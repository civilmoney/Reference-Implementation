#region License
// 
// Civil Money is free and unencumbered software released into the public domain (unlicense.org), unless otherwise 
// denoted in the source file.
//
#endregion

using Bridge.Html5;
using System;
using System.Collections.Generic;

namespace CM.Javascript {
    /// <summary>
    /// Provides a friendly graphic progress indicator during DHT commit phases.
    /// </summary>
    internal class ServerProgressIndicator {
        private HTMLElement _Element;
        private HTMLElement _MainGlyph;
        private HTMLElement _PeerHolder;
        private List<PeerVisual> _Peers;
        public ServerProgressIndicator(HTMLElement parent) {
            _Peers = new List<PeerVisual>();

            _Element = parent.Div("server-prog");
            _PeerHolder = _Element.Div();

            var earth = _Element.Div("earth popin", @"<svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" version=""1.1"" baseProfile=""full"" width=""177.702"" height=""177.288"" viewBox=""0 0 177.70 177.29"" enable-background=""new 0 0 177.70 177.29"" xml:space=""preserve"">
	<radialGradient id=""SVGID_Fill1_"" cx=""87.9305"" cy=""87.4448"" r=""88.3971"" gradientUnits=""userSpaceOnUse"" gradientTransform=""rotate(44.933121 87.930481 87.444778)"">
		<stop offset=""0.88787"" stop-color=""#ADF8FF"" stop-opacity=""0.388235""/>
		<stop offset=""0.924567"" stop-color=""#E2FAFF"" stop-opacity=""0.376471""/>
		<stop offset=""1"" stop-color=""#88DAFF"" stop-opacity=""0.0509804""/>
	</radialGradient>
	<ellipse fill=""url(#SVGID_Fill1_)"" stroke-width=""0.2"" stroke-linejoin=""round"" cx=""88.8512"" cy=""88.6438"" rx=""88.8511"" ry=""88.6439""/>
	<ellipse fill=""#56B5C4"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#006A6E"" stroke-opacity=""1"" cx=""89.3228"" cy=""85.8663"" rx=""71.7361"" ry=""71.5688""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 68.0865,20.1499C 68.0867,20.1497 45.3448,28.8453 47.1844,30.8519C 49.024,32.8582 54.8764,28.3436 55.3782,31.0189C 55.8799,33.6943 54.0403,57.7738 51.6994,55.2652C 49.3584,52.7569 44.0073,52.9244 47.1846,58.2752C 50.362,63.6258 53.5387,77.0037 57.0504,80.6822C 60.562,84.3609 67.9193,84.5284 68.2539,86.2003C 68.5883,87.8725 69.7587,90.0465 71.0966,90.7153C 72.4343,91.3841 75.2769,99.4107 77.1164,98.2401C 78.9557,97.0694 73.7719,92.8892 75.277,90.5479C 76.7819,88.207 73.7719,87.371 72.4343,87.8725C 71.0966,88.3741 73.103,80.8496 74.2737,80.8494C 75.4442,80.8494 69.257,80.0135 67.4178,81.8529C 65.5784,83.6922 60.3945,67.8067 67.0834,68.6427C 73.772,69.4786 69.0898,71.8199 71.9327,71.1508C 74.7753,70.482 74.7752,65.1313 76.2803,68.977C 77.7852,72.8231 79.1229,74.6626 78.2869,76.3345C 77.4508,78.0068 82.2999,79.3447 83.3034,76.3345C 84.3067,73.3247 78.7884,69.9805 83.1362,67.305C 87.4838,64.6293 93.3362,59.2786 94.5069,60.4491C 95.6774,61.6196 95.3428,53.2589 97.0152,54.7636C 98.6873,56.2685 99.5233,58.2753 101.363,56.9375C 103.202,55.5997 106.379,53.9277 103.369,53.0914C 100.36,52.2553 96.6806,49.2457 99.8578,48.9111C 103.035,48.5766 105.71,51.4194 106.881,49.0782C 108.052,46.7373 104.54,46.2358 103.704,42.7241C 102.868,39.2125 102.032,37.7076 103.202,37.3731C 104.373,37.0387 104.205,35.5338 103.369,33.3598C 102.533,31.186 104.54,31.1861 105.209,30.8516C 105.878,30.5172 98.0183,25.3336 96.5135,25.1663C 95.0086,24.999 94.5068,24.832 96.3463,27.6744C 98.1857,30.5172 95.5101,32.3568 94.3397,32.3565C 93.1692,32.3565 97.1823,31.1861 99.0218,33.3598C 100.861,35.5336 102.533,37.875 101.028,39.2125C 99.5234,40.5503 97.8511,43.393 97.684,41.2191C 97.5168,39.0452 97.8511,35.0322 96.6807,35.0321C 95.5103,35.0321 91.497,38.2091 91.497,38.2091C 91.497,38.2091 91.4969,40.0488 91.3298,40.8847C 91.1626,41.7207 91.1624,42.3897 89.8249,43.3929C 88.4871,44.3961 88.4871,47.7406 88.4871,47.7406L 88.1527,50.416C 88.1527,50.416 87.1492,45.7342 86.6478,42.5567C 86.1461,39.3797 80.795,38.8783 79.959,38.878C 79.123,38.878 82.4672,32.0223 83.8051,32.5239C 85.1428,33.0255 89.4904,33.6943 89.4904,33.6943C 89.4904,33.6943 90.1591,30.5174 92.8348,29.514C 95.5103,28.5106 95.3428,26.6713 94.6741,26.3368C 94.0053,26.0024 93.8379,24.3304 94.6741,24.163C 95.5103,23.9957 101.864,20.8188 103.035,22.4908C 104.206,24.163 107.215,30.3502 108.888,31.3534C 110.56,32.3565 109.556,36.0355 112.232,37.8748C 114.907,39.7142 115.074,41.3866 115.743,41.3863C 116.412,41.3863 116.078,33.5273 118.085,34.1959C 120.091,34.8648 122.265,32.8584 120.76,31.186C 119.255,29.514 117.415,22.9926 112.901,22.1563C 108.386,21.3203 100.192,17.976 94.0053,17.8087C 87.8183,17.6416 87.8181,21.9893 87.6511,22.658C 87.4838,23.327 84.4738,26.1698 83.9723,24.163C 83.4706,22.1563 77.4508,24.163 77.4508,24.163L 74.1065,25.3335L 70.9294,21.1532L 68.0865,20.1499 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 107.362,48.1383C 108.003,48.7237 108.156,51.9425 109.285,49.894C 110.414,47.8457 115.074,50.4163 114.573,48.744C 114.071,47.0717 106.86,48.6397 107.362,48.1383 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 79.1229,82.02C 79.123,82.0199 84.808,84.1939 86.1459,86.2003C 87.4838,88.2069 89.3231,87.8725 88.9888,86.5346C 88.6544,85.1969 85.9789,81.8526 85.9789,81.8526L 79.4575,79.5116L 79.1229,82.02 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 89.8245,88.7086C 89.8246,88.7085 90.8276,90.8826 91.8311,90.7152C 92.8345,90.5478 93.336,89.2103 94.0051,89.3773C 94.674,89.5445 94.3395,87.2034 94.3395,87.2034L 90.4935,87.2034L 89.8245,88.7086 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 85.8113,90.0463L 87.4835,91.2169L 87.6508,89.7117L 86.4803,88.5413L 85.8113,90.0463 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 79.6242,97.9057C 79.6243,97.9056 83.1356,100.08 81.798,102.588C 80.4604,105.096 75.2766,109.444 75.1095,111.952C 74.9423,114.46 75.4438,120.146 77.6177,122.486C 79.7916,124.827 84.9752,128.005 83.4703,133.021C 81.9654,138.038 79.1226,142.051 78.2866,143.723C 77.4506,145.395 77.9522,148.071 77.9522,148.071L 76.1129,151.582L 78.4539,155.261L 83.3032,148.74L 85.8114,148.74L 87.818,143.221L 91.8312,143.723L 102.867,136.533C 102.867,136.533 107.215,138.205 108.553,134.192C 109.891,130.179 110.894,125.497 113.402,124.66C 115.91,123.824 117.583,120.814 117.583,120.814L 108.72,114.126L 109.723,111.785L 104.54,113.791C 104.54,113.791 106.044,108.775 104.874,107.939C 103.704,107.102 102.7,104.26 102.533,103.591C 102.366,102.922 95.8444,96.5678 95.8444,96.5678L 92.1656,99.2432L 88.4869,94.7285C 88.4869,94.7285 84.6407,92.2203 84.4737,95.3974C 84.3065,98.5745 83.972,97.7384 83.972,97.7384L 79.6242,97.9057 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 122.265,45.5667C 122.265,45.5665 123.77,49.0784 125.275,49.2454C 126.78,49.4126 127.783,48.075 127.616,47.4058C 127.449,46.7371 123.435,44.5633 123.435,44.5633L 122.265,45.5667 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 125.943,36.2026C 125.944,36.2025 126.779,39.8814 128.452,40.5503C 130.124,41.2188 132.131,39.2124 132.131,39.2124L 126.445,35.0318L 125.943,36.2026 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 137.649,57.1045C 138.318,57.1043 140.659,56.2684 140.659,56.2684L 142.498,57.7733L 144.672,56.6026L 140.993,48.7435L 143.669,44.5631L 138.151,40.0482L 136.144,45.0648L 137.816,48.5763C 137.816,48.5763 138.819,51.2519 137.482,51.9205C 136.144,52.5894 137.315,57.1043 137.649,57.1045 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-width=""0.2"" stroke-linejoin=""round"" d=""M 135.14,45.2325C 135.14,45.2325 136.812,47.741 136.311,48.577C 135.809,49.4129 134.639,50.5833 134.639,50.5833""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 140.826,37.8751C 140.847,37.4862 140.826,38.7113 143.668,42.5571C 146.511,46.4029 144.672,50.0819 145.006,51.4194C 145.341,52.7572 147.013,58.1082 147.013,58.1082L 149.354,64.7968L 145.174,70.8165L 148.852,72.3216C 148.852,72.3216 151.528,74.83 148.183,74.4954C 144.839,74.161 144.504,71.8201 143.836,71.8199C 143.167,71.8199 141.495,75.4986 141.495,75.4986L 145.675,83.6923L 151.528,82.6889L 154.538,79.5118C 154.538,79.5118 156.544,77.0037 157.046,78.1741C 157.548,79.3447 159.052,82.8563 159.052,82.8563C 159.052,82.8563 160.39,76.6694 158.216,70.4823C 156.043,64.2952 151.528,51.5869 149.521,48.4095C 147.515,45.2324 143.502,38.7108 140.826,37.8751 Z ""/>
	<path fill=""#99C21D"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#8DD7FA"" stroke-opacity=""1"" d=""M 155.875,86.368C 153.367,84.8627 150.19,85.3647 148.852,86.368C 147.515,87.371 145.675,86.8696 145.675,89.5449C 145.675,92.2203 145.173,94.3944 146.01,95.0631C 146.846,95.7319 149.354,95.5649 149.354,96.2335C 149.354,96.9024 147.682,99.2436 145.174,100.08C 142.665,100.916 140.659,104.427 141.328,104.762C 141.996,105.096 147.18,103.758 147.849,103.926C 148.518,104.093 145.341,106.768 143.167,109.109C 140.993,111.45 141.495,115.296 141.996,116.132C 142.498,116.968 145.006,117.972 144.337,120.647C 143.669,123.323 142.163,127.002 141.328,127.837C 140.491,128.674 137.649,134.359 136.311,135.362C 134.973,136.366 130.96,140.212 130.96,140.212C 130.96,140.212 142.163,134.861 148.016,123.824C 153.869,112.788 159.721,94.3944 159.554,86.3678C 159.387,78.3413 157.046,86.8696 156.544,83.0234C 156.043,79.1773 156.21,86.2005 155.875,86.368 Z ""/>
</svg>");
            _MainGlyph = _Element.Div("main-glyph").Div();
            earth.Div("cloud cloud1", @"<svg viewBox=""0 0 177.70 177.29""><path fill=""#FFFFFF"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#B4B4B4"" stroke-opacity=""1"" d=""M 22.7842,38.1269C 22.8304,38.1051 17.4141,38.8305 16.8556,41.085C 16.297,43.3398 16.1895,47.728 19.5955,48.646C 23.0013,49.564 29.9646,49.4085 36.591,48.3675C 43.3164,47.3109 49.4358,45.8221 53.24,44.5318C 56.0728,43.5711 61.4343,40.3867 56.6062,36.4002C 51.778,32.414 42.4907,34.6141 41.9322,36.8687C 41.3738,39.1231 44.5297,33.8419 39.6714,32.1297C 34.813,30.4176 33.1757,36.1254 33.1757,36.1254C 33.1757,36.1254 35.427,29.5409 30.3889,28.4039C 25.3507,27.2674 25.4506,31.7689 24.0536,32.3526C 22.6565,32.9365 20.8806,35.1997 22.7842,38.1269 Z ""/></svg>");
            earth.Div("cloud cloud2", @"<svg viewBox=""0 0 177.70 177.29""><path fill=""#FFFFFF"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#B4B4B4"" stroke-opacity=""1"" d=""M 20.7643,104.428C 21.4315,104.395 18.016,97.0376 22.4366,96.2337C 26.1156,95.5648 29.794,100.08 28.4564,101.417C 27.1187,102.755 31.1317,97.4044 32.804,100.08C 34.4762,102.755 31.4663,104.595 31.4663,104.595C 31.4663,104.595 36.4827,104.929 35.6467,107.27C 34.8107,109.611 21.266,111.952 19.4267,109.945C 17.5873,107.939 15.9153,104.929 20.7643,104.428 Z ""/></svg>");
            earth.Div("cloud cloud3", @"<svg viewBox=""0 0 177.70 177.29""><path fill=""#FFFFFF"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#B4B4B4"" stroke-opacity=""1"" d=""M 63.4048,113.959C 64.5314,115.183 71.431,114.461 75.7788,112.119C 80.1266,109.778 89.3234,117.638 92.6679,106.601C 96.0122,95.5648 85.8118,103.926 88.4875,106.434C 91.1633,108.942 87.8184,99.0765 82.6349,101.25C 77.4515,103.424 78.9561,100.247 78.9561,100.247C 78.9561,100.247 77.1165,92.7221 71.7658,96.5679C 66.4149,100.414 66.2475,105.932 68.2542,107.103C 70.2608,108.273 54.877,106.601 63.4048,113.959 Z ""/></svg>");
            earth.Div("cloud cloud4", @"<svg viewBox=""0 0 177.70 177.29""><path fill=""#FFFFFF"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#B4B4B4"" stroke-opacity=""1"" d=""M 88.7766,63.2114C 88.9969,63.3701 81.2516,60.2017 81.0846,64.5493C 80.9175,68.8966 80.2485,69.7329 87.1046,69.7327C 93.9605,69.7327 111.852,67.2247 112.856,65.5523C 113.859,63.8802 115.197,56.3555 111.853,57.3587C 108.508,58.3619 109.01,59.6997 109.01,59.6997C 109.01,59.6997 109.177,54.5162 106.669,56.021C 104.161,57.5257 104.161,58.5293 104.161,58.5293C 104.161,58.5293 107.17,49.3325 98.4753,47.493C 89.7801,45.6536 93.2914,55.0179 94.9638,56.857C 96.6359,58.6964 93.4587,54.349 89.7801,57.526C 86.1013,60.7031 88.2753,61.2045 88.7766,63.2114 Z ""/></svg>");
            earth.Div("cloud cloud5", @"<svg viewBox=""0 0 177.70 177.29""><path fill=""#FFFFFF"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#B4B4B4"" stroke-opacity=""1"" d=""M 143.836,89.7124C 144.511,90.0341 143.669,80.014 149.354,80.6827C 155.04,81.3514 154.538,85.0302 154.538,85.0302C 154.538,85.0302 159.721,82.8565 161.059,85.5318C 162.397,88.2074 161.394,89.2105 161.394,89.2105C 161.394,89.2105 164.571,87.3714 165.742,89.3778C 164.905,98.9091 150.358,95.3975 150.358,95.3975C 150.079,95.9549 147.18,96.2337 143.669,98.2403C 140.157,100.247 140.993,100.414 134.974,97.7386C 128.954,95.0631 136.813,86.535 143.836,89.7124 Z ""/></svg>");
            earth.Div("cloud cloud6", @"<svg viewBox=""0 0 177.70 177.29""><path fill=""#FFFFFF"" fill-opacity=""1"" stroke-linejoin=""round"" stroke=""#B4B4B4"" stroke-opacity=""1"" d=""M 128.425,150.2C 128.205,150.359 135.95,147.191 136.117,151.538C 136.284,155.886 136.953,156.722 130.097,156.722C 123.241,156.722 105.349,154.214 104.346,152.541C 103.342,150.869 102.005,143.345 105.349,144.348C 108.693,145.351 108.192,146.689 108.192,146.689C 108.192,146.689 108.025,141.505 110.533,143.01C 113.041,144.515 113.041,145.518 113.041,145.518C 113.041,145.518 110.031,136.321 118.726,134.482C 127.422,132.643 123.91,142.007 122.238,143.846C 120.566,145.685 123.743,141.338 127.422,144.515C 131.1,147.692 128.926,148.193 128.425,150.2 Z ""/></svg>");
        }

        public void AppendPeer(Peer p) {
            if (PeerExists(p))
                return;
            _Peers.Add(new PeerVisual(_PeerHolder, p, _Peers.Count + 1));
            Arrange();
        }

        public void AppendPeers(List<Peer> ar) {
            for (int i = 0; i < ar.Count; i++) {
                if (!PeerExists(ar[i]))
                    _Peers.Add(new PeerVisual(_PeerHolder, ar[i], _Peers.Count + 1));
            }
            Arrange();
        }

        public void Arrange() {
            const int width = 120; // this might change
            const int height = 120;

            int size = (int)Math.Min(width, height);
            int centerY = size / 2;
            int centerX = size / 2;
            int radius = size / 2;
            for (int i = 0; i < _Peers.Count; i++) {
                var visual = _Peers[i];
                var peerEl = visual.Element;
                var pos = Pos(i);
                var x = centerX + radius * (float)Math.Cos(pos);
                var y = centerY + radius * (float)Math.Sin(pos);
                peerEl.Style.Position = Position.Absolute;
                x -= 16;
                y -= 16;
                peerEl.Style.MarginTop = y + "px";
                peerEl.Style.MarginLeft = x + "px";
            }
        }

        public void Remove() {
            Window.SetTimeout(() => {
                _Element.AddClass("popout");
                Window.SetTimeout(() => {
                    _Element.RemoveEx();
                }, 1000);
            }, 500);
        }

        public void SetMainGlyph(Assets.SVG glyph) {
            _MainGlyph.InnerHTML = (glyph != null ? glyph.ToString(32, 32, "#000000") + " " : "");
        }

        public void Show() {
            _Element.Style.Display = Display.Block;
        }

        public void Update(Peer peer, Assets.SVG glyph, string summary, string details = null) {
            for (int i = 0; i < _Peers.Count; i++) {
                var p = _Peers[i];
                if (p.Peer.EndPoint == peer.EndPoint) {
                    p.Update(glyph, summary, details);
                    return;
                }
            }
        }

        private bool PeerExists(Peer p) {
            for (int i = 0; i < _Peers.Count; i++)
                if (_Peers[i].Peer == p)
                    return true;
            return false;
        }

        private double Pos(int i) {
            var toRadian = Math.PI / 180.0;
            return (-90 + ((i / (double)_Peers.Count) * 360)) * toRadian;
        }

        private class PeerVisual {
            public HTMLElement Element;
            public Peer Peer;
            private string _Details;
            private HTMLElement _Glyph;
            private string _Summary;

            public PeerVisual(HTMLElement parent, Peer peer, int number) {
                Peer = peer;
                Element = parent.Div("peer popin");
                Element.Div("icon", Assets.SVG.Computer.ToString(32, 32, "#000000"));
                _Glyph = Element.Div("glyph");
                Element.OnClick = (e) => {
                    App.Identity.PopupBubble.Show(Element,
                        "Computer #" + number,
                        _Summary, _Details);
                };
            }

            public void Update(Assets.SVG glyph, string summary, string details) {
                _Summary = summary;
                _Details = details;
                string colour = glyph == Assets.SVG.CircleTick ? "#288600"
                     : glyph == Assets.SVG.CircleError ? "#cc0000"
                     : "#cccccc";
                _Glyph.InnerHTML = glyph.ToString(12, 12, colour);
            }
        }
    }
}