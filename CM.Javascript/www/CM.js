/**
 * @version 1.0.0.0
 * @compiler Bridge.NET 16.0.0
 */
Bridge.assembly("CM.Javascript", function ($asm, globals) {
    "use strict";

    Bridge.define("CM.AESCryptoRequest", {
        fields: {
            Input: null,
            Key: null,
            IV: null,
            Output: null
        }
    });

    Bridge.define("CM.IAsyncRequest", {
        $kind: "interface"
    });

    Bridge.define("CM.BridgeHacks", {
        statics: {
            fields: {
                _LabelCounter: 0
            },
            methods: {
                A$1: function (el, html, href, className) {
                    var $t, $t1, $t2;
                    if (className === void 0) { className = null; }
                    return Bridge.as(el.appendChild(($t = document.createElement('a'), $t.innerHTML = ($t1 = html, $t1 != null ? $t1 : ""), $t.href = href, $t.onclick = $asm.$.CM.BridgeHacks.f1, $t.className = ($t2 = className, $t2 != null ? $t2 : ""), $t)), HTMLAnchorElement);
                },
                A: function (el, html, onClick, className) {
                    var $t, $t1, $t2;
                    if (className === void 0) { className = null; }
                    return Bridge.as(el.appendChild(($t = document.createElement('a'), $t.innerHTML = ($t1 = html, $t1 != null ? $t1 : ""), $t.href = "javascript:;", $t.className = ($t2 = className, $t2 != null ? $t2 : ""), $t.onclick = onClick, $t)), HTMLAnchorElement);
                },
                AddClass: function (el, name) {
                    var $t;
                    if (el.classList != null) {
                        if (!el.classList.contains(name)) {
                            el.classList.add(name);
                        }
                    } else {
                        // ie9
                        var cur = ($t = el.className, $t != null ? $t : "");
                        if (System.String.indexOf(cur, name) > -1) {
                            return;
                        }
                        el.className = System.String.concat(cur, " ", name);
                    }
                },
                Amount: function (el, num, prefix, roundTo2DP) {
                    if (prefix === void 0) { prefix = ""; }
                    if (roundTo2DP === void 0) { roundTo2DP = false; }
                    var amount = num.abs();
                    var neg = num.lt(System.Decimal(0)) ? " - " : "";
                    var decimalComponent = (amount.mod(System.Decimal(1)));
                    var decimalComponentStr = Bridge.Int.format(decimalComponent, roundTo2DP ? "0.00" : "0.000000").substr(2);
                    decimalComponentStr = System.String.trimEnd(decimalComponentStr, System.Array.init([48], System.Char));
                    while (decimalComponentStr.length < 2) {
                        decimalComponentStr = System.String.concat(decimalComponentStr, "0");
                    }
                    return CM.BridgeHacks.Amount$1(el, prefix, System.String.concat(neg, System.String.replaceAll(Bridge.Int.format((amount.sub(decimalComponent)), "N0"), ",", CM.Javascript.SR.CHAR_THOUSAND_SEPERATOR)), System.String.concat(CM.Javascript.SR.CHAR_DECIMAL, decimalComponentStr)); //.ToString(SR.CHAR_DECIMAL + new string('0', Math.Min(2, decimalComponent.ToString().Length)))
                },
                Amount$1: function (el, prefix, num, dec) {
                    if (prefix === void 0) { prefix = ""; }
                    if (num === void 0) { num = ""; }
                    if (dec === void 0) { dec = ""; }
                    var sp = CM.BridgeHacks.Span(el, null, "amount");
                    CM.BridgeHacks.Span(sp, prefix);
                    CM.BridgeHacks.Span(sp, num);
                    CM.BridgeHacks.Span(sp, dec);
                    return sp;
                },
                AmountReputation: function (el, num) {
                    return CM.BridgeHacks.Amount$1(el, "", System.String.replaceAll(Bridge.Int.format((num.sub((num.mod(System.Decimal(1))))), "N0"), ",", CM.Javascript.SR.CHAR_THOUSAND_SEPERATOR), Bridge.Int.format((num.mod(System.Decimal(1))), System.String.concat(CM.Javascript.SR.CHAR_DECIMAL, "0")));
                },
                Button: function (el, html, onClick, className) {
                    var $t, $t1, $t2;
                    if (className === void 0) { className = null; }
                    var e = Bridge.as(el.appendChild(($t = document.createElement('button'), $t.innerHTML = ($t1 = html, $t1 != null ? $t1 : ""), $t.onclick = onClick, $t.className = ($t2 = className, $t2 != null ? $t2 : ""), $t)), HTMLButtonElement);

                    return e;
                },
                Button$1: function (el, html, hashUrl, className) {
                    var $t, $t1, $t2;
                    if (className === void 0) { className = null; }
                    var e = Bridge.as(el.appendChild(($t = document.createElement('button'), $t.innerHTML = ($t1 = html, $t1 != null ? $t1 : ""), $t.className = ($t2 = className, $t2 != null ? $t2 : ""), $t)), HTMLButtonElement);
                    if (!System.String.isNullOrEmpty(hashUrl)) {
                        e.onclick = function (args) {
                            CM.Javascript.App.Identity.Navigate(hashUrl);
                        };
                    }
                    return e;
                },
                CheckBox: function (el, label) {
                    var $t, $t1;
                    var d = CM.BridgeHacks.Span(el, null, "check");
                    var id = "ch" + (Bridge.identity(CM.BridgeHacks._LabelCounter, ($t = (CM.BridgeHacks._LabelCounter + 1) | 0, CM.BridgeHacks._LabelCounter = $t, $t)));
                    var ch = Bridge.as(d.appendChild(($t1 = document.createElement('input'), $t1.type = "checkbox", $t1.id = id, $t1)), HTMLInputElement);
                    var styled = d.appendChild(($t1 = document.createElement('label'), $t1.htmlFor = id, $t1.tabIndex = 0, $t1));
                    ch[System.Array.index("check-styled", ch)] = styled;
                    styled.addEventListener("keypress", function (e) {
                        if (!Bridge.referenceEquals(e.target, styled)) {
                            return;
                        }
                        var ev = Bridge.cast(e, KeyboardEvent);
                        if (ev.keyCode === 13 || ev.keyCode === 32) {
                            e.preventDefault();
                            e.stopPropagation();
                            ch.checked = !ch.checked;
                            if (!Bridge.staticEquals(ch.onchange, null)) {
                                ch.onchange(null);
                            }
                        }
                    });
                    d.appendChild(($t1 = document.createElement('label'), $t1.htmlFor = id, $t1.innerHTML = label, $t1));
                    return ch;
                },
                Clear: function (el) {
                    while (el.childElementCount > 0) {
                        el.removeChild(el.firstChild);
                    }
                },
                ContainsClass: function (el, name) {
                    var $t;
                    if (el.classList != null) {
                        return el.classList.contains(name);
                    } else {
                        // ie9
                        var cur = ($t = el.className, $t != null ? $t : "");
                        return System.String.indexOf(cur, name) !== -1;
                    }
                },
                Div: function (el, className, html) {
                    var $t, $t1, $t2;
                    if (className === void 0) { className = null; }
                    if (html === void 0) { html = null; }
                    return Bridge.as(el.appendChild(($t = document.createElement('div'), $t.className = ($t1 = className, $t1 != null ? $t1 : ""), $t.innerHTML = ($t2 = html, $t2 != null ? $t2 : ""), $t)), HTMLDivElement);
                },
                GetLocalisedDescription: function (res) {
                    return res.toString();
                },
                H1: function (el, html) {
                    var $t, $t1;
                    return Bridge.as(el.appendChild(($t = document.createElement("h1"), $t.innerHTML = ($t1 = html, $t1 != null ? $t1 : ""), $t)), HTMLElement);
                },
                H2: function (el, html, className) {
                    var $t, $t1, $t2;
                    if (className === void 0) { className = null; }
                    return Bridge.as(el.appendChild(($t = document.createElement("h2"), $t.innerHTML = ($t1 = html, $t1 != null ? $t1 : ""), $t.className = ($t2 = className, $t2 != null ? $t2 : ""), $t)), HTMLElement);
                },
                H3: function (el, html) {
                    var $t, $t1;
                    return Bridge.as(el.appendChild(($t = document.createElement("h3"), $t.innerHTML = ($t1 = html, $t1 != null ? $t1 : ""), $t)), HTMLElement);
                },
                H4: function (el, html) {
                    var $t, $t1;
                    return Bridge.as(el.appendChild(($t = document.createElement("h4"), $t.innerHTML = ($t1 = html, $t1 != null ? $t1 : ""), $t)), HTMLElement);
                },
                OnEnterKey: function (el, a) {
                    el.addEventListener("keypress", function (e) {
                        if (!Bridge.referenceEquals(e.target, el)) {
                            return;
                        }
                        var ev = Bridge.cast(e, KeyboardEvent);
                        if (ev.keyCode === 13) {
                            e.preventDefault();
                            e.stopPropagation();
                            a();
                        }
                    });
                    return el;
                },
                OnEnterKeySetFocus: function (el, target) {
                    el.addEventListener("keypress", function (e) {
                        if (!Bridge.referenceEquals(e.target, el)) {
                            return;
                        }
                        var ev = Bridge.cast(e, KeyboardEvent);
                        if (ev.keyCode === 13) {
                            e.preventDefault();
                            e.stopPropagation();
                            if (target[System.Array.index("check-styled", target)] != null) {
                                Bridge.cast(target[System.Array.index("check-styled", target)], HTMLElement).focus();
                            } else {
                                target.focus();
                            }
                        }
                    });
                    return el;
                },
                Password: function (el) {
                    var $t;
                    return Bridge.as(el.appendChild(($t = document.createElement('input'), $t.type = "password", $t)), HTMLInputElement);
                },
                Position: function (el) {
                    var $t;
                    var y = 0;
                    var x = 0;
                    var tmp = el;
                    while (tmp != null) {
                        y = (y + tmp.offsetTop) | 0;
                        x = (x + tmp.offsetLeft) | 0;
                        tmp = tmp.offsetParent;
                    }
                    return ($t = new CM.BridgeHacks.Point(), $t.X = x, $t.Y = y, $t);
                },
                RadioButton: function (el, group, label) {
                    var $t, $t1;
                    var d = CM.BridgeHacks.Span(el, null, "check");
                    var id = "ch" + (Bridge.identity(CM.BridgeHacks._LabelCounter, ($t = (CM.BridgeHacks._LabelCounter + 1) | 0, CM.BridgeHacks._LabelCounter = $t, $t)));
                    var ch = Bridge.as(d.appendChild(($t1 = document.createElement('input'), $t1.type = "radio", $t1.id = id, $t1.name = group, $t1)), HTMLInputElement);

                    var styled = d.appendChild(($t1 = document.createElement('label'), $t1.htmlFor = id, $t1.tabIndex = 0, $t1));
                    ch[System.Array.index("check-styled", ch)] = styled;
                    styled.addEventListener("keypress", function (e) {
                        var ev = Bridge.cast(e, KeyboardEvent);
                        if (ev.keyCode === 13 || ev.keyCode === 32) {
                            e.preventDefault();
                            e.stopPropagation();
                            ch.checked = !ch.checked;
                            if (!Bridge.staticEquals(ch.onchange, null)) {
                                ch.onchange(null);
                            }
                        }
                    });
                    d.appendChild(($t1 = document.createElement('label'), $t1.htmlFor = id, $t1.innerHTML = label, $t1));
                    return ch;
                },
                RemoveClass: function (el, name) {
                    var $t;
                    if (el.classList != null) {
                        el.classList.remove(name);
                    } else {
                        // ie9
                        var cur = ($t = el.className, $t != null ? $t : "");
                        if (System.String.indexOf(cur, name) === -1) {
                            return;
                        }
                        el.className = System.String.replaceAll(cur, name, "");
                    }
                },
                RemoveEx: function (el) {
                    
if(typeof el.remove == 'function')
    el.remove();
else
;
                    if (el.parentElement != null) {
                        el.parentElement.removeChild(el);
                    }
                },
                Reputation: function (el, rep, showglyph, showlabel) {
                    if (showglyph === void 0) { showglyph = true; }
                    if (showlabel === void 0) { showlabel = true; }
                    var glyph = rep === CM.RecentReputation.Good ? CM.Javascript.Assets.SVG.CircleTick : rep === CM.RecentReputation.Overspent ? CM.Javascript.Assets.SVG.CircleError : CM.Javascript.Assets.SVG.Warning;
                    var colour = rep === CM.RecentReputation.Good ? CM.Javascript.Assets.SVG.STATUS_GREEN_COLOR : "#cc0000";

                    var html = "";
                    if (showglyph) {
                        html = glyph.ToString(16, 16, colour);
                    }
                    if (showlabel) {
                        html = System.String.concat(html, (CM.BridgeHacks.ToLocalisedName(rep)));
                    }
                    return CM.BridgeHacks.Span(el, html);
                },
                ScrollTo: function (el) {
                    var p = CM.BridgeHacks.Position(el);
                    window.scroll(p.X, p.Y);
                },
                Select: function (el) {
                    var e = Bridge.as(el.appendChild(document.createElement('select')), HTMLSelectElement);
                    return e;
                },
                Span: function (el, html, className) {
                    var $t, $t1, $t2;
                    if (html === void 0) { html = null; }
                    if (className === void 0) { className = null; }
                    return Bridge.as(el.appendChild(($t = document.createElement('span'), $t.innerHTML = ($t1 = html, $t1 != null ? $t1 : ""), $t.className = ($t2 = className, $t2 != null ? $t2 : ""), $t)), HTMLElement);
                },
                StartsWith: function (src, s, comp) {
                    if (comp === 5) {
                        src = src.toLowerCase();
                        s = s.toLowerCase();
                    }
                    return System.String.startsWith(src, s);
                },
                TextBox: function (el, value) {
                    var $t, $t1;
                    var t = Bridge.as(el.appendChild(($t = document.createElement('input'), $t.type = "text", $t.value = ($t1 = value, $t1 != null ? $t1 : ""), $t)), HTMLInputElement);
                    t.setAttribute("autocorrect", "off");
                    t.setAttribute("autocapitalize", "off");
                    t.setAttribute("spellcheck", "false");
                    //spellcheck="false"
                    return t;
                },
                ToLocalisedName: function (rep) {
                    var label = rep === CM.RecentReputation.Good ? CM.Javascript.SR.LABEL_REPUTATION_GOOD : rep === CM.RecentReputation.Overspent ? CM.Javascript.SR.LABEL_REPUTATION_OVERSPENT : CM.Javascript.SR.LABEL_REPUTATION_BAD;
                    return label;
                }
            }
        }
    });

    Bridge.ns("CM.BridgeHacks", $asm.$);

    Bridge.apply($asm.$.CM.BridgeHacks, {
        f1: function (e) {
            e.preventDefault();
            e.stopPropagation();
            CM.Javascript.App.Identity.Navigate(e.currentTarget.href);
        }
    });

    Bridge.define("CM.BridgeHacks.Point", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.BridgeHacks.Point(); }
            }
        },
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1852403652, this.X, this.Y]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.BridgeHacks.Point)) {
                    return false;
                }
                return Bridge.equals(this.X, o.X) && Bridge.equals(this.Y, o.Y);
            },
            $clone: function (to) {
                var s = to || new CM.BridgeHacks.Point();
                s.X = this.X;
                s.Y = this.Y;
                return s;
            }
        }
    });

    /** @namespace CM */

    /**
     * CMResult is used in place of error messages for multilingual reasons. The description in the
     struct should not be used on client UIs.
     *
     * @public
     * @class CM.CMResult
     */
    Bridge.define("CM.CMResult", {
        $kind: "struct",
        statics: {
            fields: {
                ERROR: 0,
                CRYPTO: 0,
                ACCOUNT: 0,
                TRANSACTION: 0,
                VOTE: 0,
                SUCCESS: 0,
                /**
                 * OK
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                S_OK: null,
                /**
                 * Successful, but false
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                S_False: null,
                /**
                 * Successful, At least 1 copy of the item was found, but the minimum number of copies required are not met.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                S_Item_Transient: null,
                /**
                 * Unknown error
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_General_Failure: null,
                /**
                 * The web socket is not currently connected.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Not_Connected: null,
                /**
                 * Time-out waiting on a reply.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Timeout_Waiting_On_Reply: null,
                /**
                 * Invalid action.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Invalid_Action: null,
                /**
                 * The item was not found
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Item_Not_Found: null,
                /**
                 * Invalid request
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Invalid_Request: null,
                /**
                 * There were not enough available peers to corroborate the request.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Not_Enough_Peers: null,
                /**
                 * The requested GET or PUT path is not valid for the item provided.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Invalid_Object_Path: null,
                /**
                 * A newer version of this item is already being committed.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Object_Superseded: null,
                /**
                 * The maximum number of DHT peer hops have been reached.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Max_Hops_Reached: null,
                /**
                 * Unable to connect to any servers within a reasonable time-out period.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Connect_Attempt_Timeout: null,
                /**
                 * Invalid search date range.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Invalid_Search_Date: null,
                /**
                 * Unknown API version.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Unknown_API_Version: null,
                /**
                 * The operation has been cancelled.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Operation_Cancelled: null,
                /**
                 * The specified password didn't work for decryption.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Crypto_Invalid_Password: null,
                /**
                 * The account private key scheme ID is not recognised.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Crypto_Unrecognized_SchemeID: null,
                /**
                 * Unable to obtain an encryption key using Rfc2898.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Crypto_Rfc2898_General_Failure: null,
                /**
                 * Unable to sign the data using RSA
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Crypto_RSA_Signing_General_Failure: null,
                /**
                 * Unable to verify the data using RSA
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Crypto_RSA_Verify_General_Failure: null,
                /**
                 * Unable to generate an RSA key.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Crypto_RSA_Key_Gen_Failure: null,
                /**
                 * No valid public key was found on the account for the specified time.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Missing_Public_Key: null,
                /**
                 * The account ID is invalid.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_ID_Invalid: null,
                /**
                 * Account IDs are read-only.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_IDs_Are_Readonly: null,
                /**
                 * Created UTC is too far ahead of the server's current time.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Created_Utc_Out_Of_Range: null,
                /**
                 * Created UTC is read-only.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Created_Utc_Is_Readonly: null,
                /**
                 * Updated UTC is too far ahead of the server's current time.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Updated_Utc_Out_Of_Range: null,
                /**
                 * The account Updated UTC is out-dated. A newer copy exists.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Updated_Utc_Is_Old: null,
                /**
                 * The number of public keys specified are less than the existing record's.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Too_Few_Public_Keys: null,
                /**
                 * Unable to corroborate account information with the network.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Cant_Corroborate: null,
                /**
                 * Unable to corroborate account information with the network. The network's copy has too fewer keys than the record provided.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Cant_Corroborate_Public_Keys: null,
                /**
                 * The newest public key entry must equal the account's Updated UTC when adding new keys.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Invalid_New_Public_Key_Date: null,
                /**
                 * One or more public keys do not match the existing account.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Public_Key_Mismatch: null,
                /**
                 * One of the public keys in the account have an invalid RSA signature.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Public_Key_Signature_Error: null,
                /**
                 * The account RSA signature is invalid.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Signature_Error: null,
                /**
                 * Invalid account region specified.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Invalid_Region: null,
                /**
                 * Account names that are equal to an ISO3166-2 subdivision code require a valid governing authority attribute.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Account_Governing_Authority_Attribute_Required: null,
                /**
                 * The payee could not be found on the network.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payee_Not_Found: null,
                /**
                 * The payer could not be found on the network.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payer_Not_Found: null,
                /**
                 * Invalid payee signature.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Invalid_Payee_Signature: null,
                /**
                 * Invalid payer signature.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Invalid_Payer_Signature: null,
                /**
                 * The payer's signature is required.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payer_Signature_Required: null,
                /**
                 * A payee ID is required.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_PayeeID_Required: null,
                /**
                 * A payer ID is required.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_PayerID_Required: null,
                /**
                 * The transaction's Created UTC time is out of range. Please check your device's clock and try again.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Created_Utc_Out_Of_Range: null,
                /**
                 * The payee's updated UTC time must be greater than Created UTC.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payee_Updated_Utc_Out_Of_Range: null,
                /**
                 * The payer's updated UTC time must be greater than Created UTC.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payer_Updated_Utc_Out_Of_Range: null,
                /**
                 * The transaction amount cannot be altered.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Amount_Is_Readonly: null,
                /**
                 * The transaction created UTC cannot be altered.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Created_Utc_Is_Readonly: null,
                /**
                 * The transaction payee cannot be altered.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payee_Is_Readonly: null,
                /**
                 * The transaction payer cannot be altered.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payer_Is_Readonly: null,
                /**
                 * The transaction memo cannot be altered.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Memo_Is_Readonly: null,
                /**
                 * The transaction amount is invalid.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Invalid_Amount: null,
                /**
                 * A payee region is required.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payee_Region_Required: null,
                /**
                 * A payer region is required.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payer_Region_Required: null,
                /**
                 * The payee region is read-only.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payee_Region_Is_Readonly: null,
                /**
                 * The payer region is read-only.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payer_Region_Is_Readonly: null,
                /**
                 * The payer status must be set to Accept during initial creation.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payer_Accept_Status_Required: null,
                /**
                 * The payee status must not be set without the payee's signature.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payee_Status_Invalid: null,
                /**
                 * The new payee status value is not permitted, based on its previous status.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payee_Status_Change_Not_Allowed: null,
                /**
                 * The new payer status value is not permitted, based on its previous status.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payer_Status_Change_Not_Allowed: null,
                /**
                 * The payee and payer must be different accounts.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Payer_Payee_Must_Differ: null,
                /**
                 * The payee and payer tags must be no more than 48 UTF8 bytes in length.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Tag_Too_Long: null,
                /**
                 * The memo must be no more than 48 UTF8 bytes in length.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Transaction_Memo_Too_Long: null,
                /**
                 * The vote account ID was not found.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Vote_Account_Not_Found: null,
                /**
                 * The vote's signature is invalid.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Vote_Signature_Error: null,
                /**
                 * XXXX
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Vote_XXXX: null,
                /**
                 * Created UTC is too far ahead of the server's current time.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Vote_Created_Utc_Out_Of_Range: null,
                /**
                 * Created UTC is read-only.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Vote_Created_Utc_Is_Readonly: null,
                /**
                 * Updated UTC is too far ahead of the server's current time.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Vote_Updated_Utc_Out_Of_Range: null,
                /**
                 * The vote Updated UTC is out-dated. A newer copy exists.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.CMResult
                 * @type CM.CMResult
                 */
                E_Vote_Updated_Utc_Is_Old: null
            },
            ctors: {
                init: function () {
                    this.S_OK = new CM.CMResult();
                    this.S_False = new CM.CMResult();
                    this.S_Item_Transient = new CM.CMResult();
                    this.E_General_Failure = new CM.CMResult();
                    this.E_Not_Connected = new CM.CMResult();
                    this.E_Timeout_Waiting_On_Reply = new CM.CMResult();
                    this.E_Invalid_Action = new CM.CMResult();
                    this.E_Item_Not_Found = new CM.CMResult();
                    this.E_Invalid_Request = new CM.CMResult();
                    this.E_Not_Enough_Peers = new CM.CMResult();
                    this.E_Invalid_Object_Path = new CM.CMResult();
                    this.E_Object_Superseded = new CM.CMResult();
                    this.E_Max_Hops_Reached = new CM.CMResult();
                    this.E_Connect_Attempt_Timeout = new CM.CMResult();
                    this.E_Invalid_Search_Date = new CM.CMResult();
                    this.E_Unknown_API_Version = new CM.CMResult();
                    this.E_Operation_Cancelled = new CM.CMResult();
                    this.E_Crypto_Invalid_Password = new CM.CMResult();
                    this.E_Crypto_Unrecognized_SchemeID = new CM.CMResult();
                    this.E_Crypto_Rfc2898_General_Failure = new CM.CMResult();
                    this.E_Crypto_RSA_Signing_General_Failure = new CM.CMResult();
                    this.E_Crypto_RSA_Verify_General_Failure = new CM.CMResult();
                    this.E_Crypto_RSA_Key_Gen_Failure = new CM.CMResult();
                    this.E_Account_Missing_Public_Key = new CM.CMResult();
                    this.E_Account_ID_Invalid = new CM.CMResult();
                    this.E_Account_IDs_Are_Readonly = new CM.CMResult();
                    this.E_Account_Created_Utc_Out_Of_Range = new CM.CMResult();
                    this.E_Account_Created_Utc_Is_Readonly = new CM.CMResult();
                    this.E_Account_Updated_Utc_Out_Of_Range = new CM.CMResult();
                    this.E_Account_Updated_Utc_Is_Old = new CM.CMResult();
                    this.E_Account_Too_Few_Public_Keys = new CM.CMResult();
                    this.E_Account_Cant_Corroborate = new CM.CMResult();
                    this.E_Account_Cant_Corroborate_Public_Keys = new CM.CMResult();
                    this.E_Account_Invalid_New_Public_Key_Date = new CM.CMResult();
                    this.E_Account_Public_Key_Mismatch = new CM.CMResult();
                    this.E_Account_Public_Key_Signature_Error = new CM.CMResult();
                    this.E_Account_Signature_Error = new CM.CMResult();
                    this.E_Account_Invalid_Region = new CM.CMResult();
                    this.E_Account_Governing_Authority_Attribute_Required = new CM.CMResult();
                    this.E_Transaction_Payee_Not_Found = new CM.CMResult();
                    this.E_Transaction_Payer_Not_Found = new CM.CMResult();
                    this.E_Transaction_Invalid_Payee_Signature = new CM.CMResult();
                    this.E_Transaction_Invalid_Payer_Signature = new CM.CMResult();
                    this.E_Transaction_Payer_Signature_Required = new CM.CMResult();
                    this.E_Transaction_PayeeID_Required = new CM.CMResult();
                    this.E_Transaction_PayerID_Required = new CM.CMResult();
                    this.E_Transaction_Created_Utc_Out_Of_Range = new CM.CMResult();
                    this.E_Transaction_Payee_Updated_Utc_Out_Of_Range = new CM.CMResult();
                    this.E_Transaction_Payer_Updated_Utc_Out_Of_Range = new CM.CMResult();
                    this.E_Transaction_Amount_Is_Readonly = new CM.CMResult();
                    this.E_Transaction_Created_Utc_Is_Readonly = new CM.CMResult();
                    this.E_Transaction_Payee_Is_Readonly = new CM.CMResult();
                    this.E_Transaction_Payer_Is_Readonly = new CM.CMResult();
                    this.E_Transaction_Memo_Is_Readonly = new CM.CMResult();
                    this.E_Transaction_Invalid_Amount = new CM.CMResult();
                    this.E_Transaction_Payee_Region_Required = new CM.CMResult();
                    this.E_Transaction_Payer_Region_Required = new CM.CMResult();
                    this.E_Transaction_Payee_Region_Is_Readonly = new CM.CMResult();
                    this.E_Transaction_Payer_Region_Is_Readonly = new CM.CMResult();
                    this.E_Transaction_Payer_Accept_Status_Required = new CM.CMResult();
                    this.E_Transaction_Payee_Status_Invalid = new CM.CMResult();
                    this.E_Transaction_Payee_Status_Change_Not_Allowed = new CM.CMResult();
                    this.E_Transaction_Payer_Status_Change_Not_Allowed = new CM.CMResult();
                    this.E_Transaction_Payer_Payee_Must_Differ = new CM.CMResult();
                    this.E_Transaction_Tag_Too_Long = new CM.CMResult();
                    this.E_Transaction_Memo_Too_Long = new CM.CMResult();
                    this.E_Vote_Account_Not_Found = new CM.CMResult();
                    this.E_Vote_Signature_Error = new CM.CMResult();
                    this.E_Vote_XXXX = new CM.CMResult();
                    this.E_Vote_Created_Utc_Out_Of_Range = new CM.CMResult();
                    this.E_Vote_Created_Utc_Is_Readonly = new CM.CMResult();
                    this.E_Vote_Updated_Utc_Out_Of_Range = new CM.CMResult();
                    this.E_Vote_Updated_Utc_Is_Old = new CM.CMResult();
                    this.ERROR = 2147483648;
                    this.CRYPTO = 4096;
                    this.ACCOUNT = 8192;
                    this.TRANSACTION = 12288;
                    this.VOTE = 16384;
                    this.SUCCESS = 0;
                    this.S_OK = new CM.CMResult.$ctor1(CM.CMResult.SUCCESS, "OK");
                    this.S_False = new CM.CMResult.$ctor1(1, "False");
                    this.S_Item_Transient = new CM.CMResult.$ctor1(2, "At least 1 copy of the item was found, but the minimum number of copies required are not met.");
                    this.E_General_Failure = new CM.CMResult.$ctor1(CM.CMResult.ERROR, "General failure.");
                    this.E_Not_Connected = new CM.CMResult.$ctor1(2147483649, "The web socket is not currently connected.");
                    this.E_Timeout_Waiting_On_Reply = new CM.CMResult.$ctor1(2147483650, "Time-out waiting on a reply.");
                    this.E_Invalid_Action = new CM.CMResult.$ctor1(2147483651, "Invalid action.");
                    this.E_Item_Not_Found = new CM.CMResult.$ctor1(2147483652, "The item was not found.");
                    this.E_Invalid_Request = new CM.CMResult.$ctor1(2147483653, "Invalid request.");
                    this.E_Not_Enough_Peers = new CM.CMResult.$ctor1(2147483654, "There were not enough available peers to corroborate the request.");
                    this.E_Invalid_Object_Path = new CM.CMResult.$ctor1(2147483655, "The requested GET or PUT path is not valid for the item provided.");
                    this.E_Object_Superseded = new CM.CMResult.$ctor1(2147483656, "A newer version of this item is already being committed.");
                    this.E_Max_Hops_Reached = new CM.CMResult.$ctor1(2147483657, "The maximum number of DHT peer hops have been reached.");
                    this.E_Connect_Attempt_Timeout = new CM.CMResult.$ctor1(2147483658, "Unable to connect to any servers within a reasonable time-out period.");
                    this.E_Invalid_Search_Date = new CM.CMResult.$ctor1(2147483659, "Invalid search date range.");
                    this.E_Unknown_API_Version = new CM.CMResult.$ctor1(2147483660, "Unknown API version.");
                    this.E_Operation_Cancelled = new CM.CMResult.$ctor1(2147483661, "The operation has been cancelled.");
                    this.E_Crypto_Invalid_Password = new CM.CMResult.$ctor1(2147487744, "The specified password didn't work for decryption.");
                    this.E_Crypto_Unrecognized_SchemeID = new CM.CMResult.$ctor1(2147487745, "The account private key scheme ID is not recognised.");
                    this.E_Crypto_Rfc2898_General_Failure = new CM.CMResult.$ctor1(2147487746, "Unable to obtain an encryption key using Rfc2898.");
                    this.E_Crypto_RSA_Signing_General_Failure = new CM.CMResult.$ctor1(2147487747, "Unable to sign the data using RSA.");
                    this.E_Crypto_RSA_Verify_General_Failure = new CM.CMResult.$ctor1(2147487748, "Unable to verify the data using RSA.");
                    this.E_Crypto_RSA_Key_Gen_Failure = new CM.CMResult.$ctor1(2147487749, "Unable to generate an RSA key.");
                    this.E_Account_Missing_Public_Key = new CM.CMResult.$ctor1(2147491840, "No valid public key was found on the account for the specified time.");
                    this.E_Account_ID_Invalid = new CM.CMResult.$ctor1(2147491841, "The account ID is invalid.");
                    this.E_Account_IDs_Are_Readonly = new CM.CMResult.$ctor1(2147491842, "Account IDs are read-only.");
                    this.E_Account_Created_Utc_Out_Of_Range = new CM.CMResult.$ctor1(2147491843, "Created UTC is too far ahead of the server's current time.");
                    this.E_Account_Created_Utc_Is_Readonly = new CM.CMResult.$ctor1(2147491844, "Created UTC is read-only.");
                    this.E_Account_Updated_Utc_Out_Of_Range = new CM.CMResult.$ctor1(2147491845, "Updated UTC is too far ahead of the server's current time.");
                    this.E_Account_Updated_Utc_Is_Old = new CM.CMResult.$ctor1(2147491846, "The account Updated UTC is out-dated. A newer copy exists.");
                    this.E_Account_Too_Few_Public_Keys = new CM.CMResult.$ctor1(2147491847, "The number of public keys specified are less than the existing record's.");
                    this.E_Account_Cant_Corroborate = new CM.CMResult.$ctor1(2147491848, "Unable to corroborate account information with the network.");
                    this.E_Account_Cant_Corroborate_Public_Keys = new CM.CMResult.$ctor1(2147491849, "Unable to corroborate account information with the network. The network's copy has too fewer keys than the record provided.");
                    this.E_Account_Invalid_New_Public_Key_Date = new CM.CMResult.$ctor1(2147491850, "The newest public key entry must equal the account's Updated UTC when adding new keys.");
                    this.E_Account_Public_Key_Mismatch = new CM.CMResult.$ctor1(2147491851, "One or more public keys do not match the existing account.");
                    this.E_Account_Public_Key_Signature_Error = new CM.CMResult.$ctor1(2147491852, "One of the public keys in the account have an invalid RSA signature.");
                    this.E_Account_Signature_Error = new CM.CMResult.$ctor1(2147491853, "The account RSA signature is invalid.");
                    this.E_Account_Invalid_Region = new CM.CMResult.$ctor1(2147491854, "Invalid account region specified.");
                    this.E_Account_Governing_Authority_Attribute_Required = new CM.CMResult.$ctor1(2147491855, "Account names that are equal to an ISO3166-2 subdivision code require a valid governing authority attribute.");
                    this.E_Transaction_Payee_Not_Found = new CM.CMResult.$ctor1(2147495936, "The payee could not be found on the network.");
                    this.E_Transaction_Payer_Not_Found = new CM.CMResult.$ctor1(2147495937, "The payer could not be found on the network.");
                    this.E_Transaction_Invalid_Payee_Signature = new CM.CMResult.$ctor1(2147495938, "Invalid payee signature.");
                    this.E_Transaction_Invalid_Payer_Signature = new CM.CMResult.$ctor1(2147495939, "Invalid payer signature.");
                    this.E_Transaction_Payer_Signature_Required = new CM.CMResult.$ctor1(2147495940, "The payer's signature is required.");
                    this.E_Transaction_PayeeID_Required = new CM.CMResult.$ctor1(2147495941, "A payee ID is required.");
                    this.E_Transaction_PayerID_Required = new CM.CMResult.$ctor1(2147495942, "A payer ID is required.");
                    this.E_Transaction_Created_Utc_Out_Of_Range = new CM.CMResult.$ctor1(2147495943, "The transaction's Created UTC time is out of range. Please check your device's clock and try again.");
                    this.E_Transaction_Payee_Updated_Utc_Out_Of_Range = new CM.CMResult.$ctor1(2147495944, "The payee's updated UTC time must be greater than Created UTC.");
                    this.E_Transaction_Payer_Updated_Utc_Out_Of_Range = new CM.CMResult.$ctor1(2147495945, "The payer's updated UTC time must be greater than Created UTC.");
                    this.E_Transaction_Amount_Is_Readonly = new CM.CMResult.$ctor1(2147495946, "The transaction amount cannot be altered.");
                    this.E_Transaction_Created_Utc_Is_Readonly = new CM.CMResult.$ctor1(2147495947, "The transaction created UTC cannot be altered.");
                    this.E_Transaction_Payee_Is_Readonly = new CM.CMResult.$ctor1(2147495948, "The transaction payee cannot be altered.");
                    this.E_Transaction_Payer_Is_Readonly = new CM.CMResult.$ctor1(2147495949, "The transaction payer cannot be altered.");
                    this.E_Transaction_Memo_Is_Readonly = new CM.CMResult.$ctor1(2147495950, "The transaction memo cannot be altered.");
                    this.E_Transaction_Invalid_Amount = new CM.CMResult.$ctor1(2147495951, "The transaction amount is invalid.");
                    this.E_Transaction_Payee_Region_Required = new CM.CMResult.$ctor1(2147495952, "A payee region is required.");
                    this.E_Transaction_Payer_Region_Required = new CM.CMResult.$ctor1(2147495953, "A payer region is required.");
                    this.E_Transaction_Payee_Region_Is_Readonly = new CM.CMResult.$ctor1(2147495954, "The payee region is read-only.");
                    this.E_Transaction_Payer_Region_Is_Readonly = new CM.CMResult.$ctor1(2147495955, "The payer region is read-only.");
                    this.E_Transaction_Payer_Accept_Status_Required = new CM.CMResult.$ctor1(2147495956, "The payer status must be set to Accept during initial creation.");
                    this.E_Transaction_Payee_Status_Invalid = new CM.CMResult.$ctor1(2147495957, "The payee status must not be set without the payee's signature.");
                    this.E_Transaction_Payee_Status_Change_Not_Allowed = new CM.CMResult.$ctor1(2147495958, "The new payee status value is not permitted, based on its previous status.");
                    this.E_Transaction_Payer_Status_Change_Not_Allowed = new CM.CMResult.$ctor1(2147495959, "The new payee status value is not permitted, based on its previous status.");
                    this.E_Transaction_Payer_Payee_Must_Differ = new CM.CMResult.$ctor1(2147495960, "The payee and payer must be different accounts.");
                    this.E_Transaction_Tag_Too_Long = new CM.CMResult.$ctor1(2147495961, "The payee and payer tags must be no more than 48 UTF8 bytes in length.");
                    this.E_Transaction_Memo_Too_Long = new CM.CMResult.$ctor1(2147495962, "The memo must be no more than 48 UTF8 bytes in length.");
                    this.E_Vote_Account_Not_Found = new CM.CMResult.$ctor1(2147500032, "The vote account ID was not found.");
                    this.E_Vote_Signature_Error = new CM.CMResult.$ctor1(2147500033, "The vote's signature is invalid.");
                    this.E_Vote_XXXX = new CM.CMResult.$ctor1(2147500034, "XXXX");
                    this.E_Vote_Created_Utc_Out_Of_Range = new CM.CMResult.$ctor1(2147500035, "Created UTC is too far ahead of the server's current time.");
                    this.E_Vote_Created_Utc_Is_Readonly = new CM.CMResult.$ctor1(2147500036, "Created UTC is read-only.");
                    this.E_Vote_Updated_Utc_Out_Of_Range = new CM.CMResult.$ctor1(2147500037, "Updated UTC is too far ahead of the server's current time.");
                    this.E_Vote_Updated_Utc_Is_Old = new CM.CMResult.$ctor1(2147500038, "The vote Updated UTC is out-dated. A newer copy exists.");
                }
            },
            methods: {
                op_Equality: function (a, b) {
                    return a.Code === b.Code;
                },
                op_Inequality: function (a, b) {
                    return a.Code !== b.Code;
                },
                getDefaultValue: function () { return new CM.CMResult(); }
            }
        },
        fields: {
            Code: 0,
            Description: null
        },
        props: {
            /**
             * Returns true if the status code is positive or zero.
             *
             * @instance
             * @public
             * @readonly
             * @memberof CM.CMResult
             * @function Success
             * @type boolean
             */
            Success: {
                get: function () {
                    return System.Int64(this.Code).gte(System.Int64(CM.CMResult.SUCCESS));
                }
            }
        },
        ctors: {
            $ctor1: function (code, desc) {
                this.$initialize();
                this.Code = (code | 0);
                this.Description = desc;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            toString: function () {
                var desc = this.Description;
                
            if(desc==null)
            for(var v in CM.CMResult)
                 if(CM.CMResult[v] && CM.CMResult[v].Code==this.Code){
                     desc = CM.CMResult[v].Description;
                     break;
                 }
            ;
                // The uint cast below is a Bridge bug workaround
                return System.String.concat("0x", System.UInt32.format((this.Code >>> 0), "X"), " ", desc);
            },
            equals: function (obj) {
                if (!(Bridge.is(obj, CM.CMResult))) {
                    return false;
                }
                return this.Code === System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj), CM.CMResult)).Code;
            },
            getHashCode: function () {
                return Bridge.getHashCode(this.Code);
            },
            $clone: function (to) {
                var s = to || new CM.CMResult();
                s.Code = this.Code;
                s.Description = this.Description;
                return s;
            }
        }
    });

    Bridge.define("CM.CMSeed", {
        fields: {
            Domain: null,
            EndPoint: null
        },
        ctors: {
            ctor: function (domain, ep) {
                this.$initialize();
                this.Domain = domain;
                this.EndPoint = ep;
            }
        }
    });

    Bridge.define("CM.Constants", {
        statics: {
            fields: {
                WebSocketTransport: null,
                APIVersion: 0,
                MaxAccountIDLengthInUtf8Bytes: 0,
                /**
                 * The minimum sane date time applies to any kind of object. It will
                 never be dated before the Civil Money system even existed.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.Constants
                 * @type System.DateTime
                 */
                MinimumSaneDateTime: null,
                MaxHopCount: 0,
                MaxAllowedTimestampErrorInMinutes: 0,
                GoverningAuthorityRSAPublicKey: null,
                TaxRate: System.Decimal(0.0),
                BasicYearlyAllowance: 0,
                USDExchange: System.Decimal(0.0),
                StandardExponent65537: null,
                MessageReplyTimeoutMs: 0,
                DHTIDSize: 0,
                NumberOfCopies: 0,
                MinimumNumberOfCopies: 0,
                NewLineChars: null,
                MinimumTransactionAmount: System.Decimal(0.0),
                Symbol: null,
                TrustedSite: null,
                PATH_ACCNT: null,
                PATH_TRANS: null,
                PATH_REGIONS: null,
                PATH_VOTES: null,
                WebSocketProtocol: null,
                Seeds: null,
                /**
                 * During production, peer DHT IDs are only based on IP address
                 alone. This is to prevent a peers running multiple servers 
                 from the same address, which can increase their chance of
                 a consensus attack.
                 *
                 * @static
                 * @public
                 * @memberof CM.Constants
                 * @constant
                 * @default false
                 * @type boolean
                 */
                Peer_DHT_ID_Uses_Port: false
            },
            ctors: {
                init: function () {
                    this.MinimumSaneDateTime = System.DateTime.getDefaultValue();
                    this.WebSocketTransport = "wss";
                    this.APIVersion = 1;
                    this.MaxAccountIDLengthInUtf8Bytes = 48;
                    this.MinimumSaneDateTime = System.DateTime.create(2016, 1, 1, 0, 0, 0);
                    this.MaxHopCount = 30;
                    this.MaxAllowedTimestampErrorInMinutes = 10;
                    this.GoverningAuthorityRSAPublicKey = System.Convert.fromBase64String("6DiS3klqFkjWEvz6qHqH8XTvcwL+4kBG2X58nuokoYOnEGLnSUc6fWK+5ZiwdvrPeKbfMZoZ5LSw+jZe08/dS3NpWcf0KEdrNPFvSVnTMAzMVep65AIHeImOkLUOejGOZm49orYP1HTZVfBzs3ULxJ3ibBQcnCk8YRZKrao02B0=");
                    this.TaxRate = System.Decimal(0.1);
                    this.BasicYearlyAllowance = 600;
                    this.USDExchange = System.Decimal(50);
                    this.StandardExponent65537 = System.Array.init([1, 0, 1], System.Byte);
                    this.MessageReplyTimeoutMs = 5000;
                    this.DHTIDSize = 8;
                    this.NumberOfCopies = 5;
                    this.MinimumNumberOfCopies = 2;
                    this.NewLineChars = System.Array.init([13, 10], System.Char);
                    this.MinimumTransactionAmount = System.Decimal(0.000001);
                    this.Symbol = "//c";
                    this.TrustedSite = "https://civil.money";
                    this.PATH_ACCNT = "ACCNT";
                    this.PATH_TRANS = "TRANS";
                    this.PATH_REGIONS = "REGIONS";
                    this.PATH_VOTES = "VOTES";
                    this.WebSocketProtocol = "v1.civil.money";
                    this.Seeds = System.Array.init([new CM.CMSeed("seed1.civil.money:443", "89.36.215.217:443"), new CM.CMSeed("seed2.civil.money:443", "85.255.13.218:443"), new CM.CMSeed("seed3.civil.money:443", "212.237.61.8:443"), new CM.CMSeed("seed4.civil.money:443", "185.58.225.189:443"), new CM.CMSeed("seed5.civil.money:443", "89.40.127.213:443"), new CM.CMSeed("seed6.civil.money:443", "89.46.74.86:443")], CM.CMSeed);
                    this.Peer_DHT_ID_Uses_Port = false;
                }
            }
        }
    });

    /** @namespace CM.Cryptography */

    /**
     * A portable C# MD5, based on work by Brad Conte (bradconte.com) MIT License
     *
     * @public
     * @class CM.Cryptography.MD5
     */
    Bridge.define("CM.Cryptography.MD5", {
        statics: {
            methods: {
                ROTLEFT: function (a, b) {
                    return ((((((a) << (b)) >>> 0)) | ((a) >>> (((32 - (b)) | 0)))) >>> 0);
                },
                INT64_ADD: function (a, b, c) {
                    if (a.v > ((4294967295 - (c)) >>> 0)) {
                        b.v = (b.v + 1) >>> 0;
                    }
                    a.v = (a.v + c) >>> 0;
                },
                ComputeHash: function (data) {
                    var ctx = new CM.Cryptography.MD5.MD5_CTX();
                    CM.Cryptography.MD5.Update(ctx, data, data.length);
                    var hash = System.Array.init(16, 0, System.Byte);
                    CM.Cryptography.MD5.Final(ctx, hash);
                    return hash;
                },
                F: function (x, y, z) {
                    return ((((((x & y) >>> 0)) | (((~x & z) >>> 0))) >>> 0));
                },
                G: function (x, y, z) {
                    return ((((((x & z) >>> 0)) | (((y & ~z) >>> 0))) >>> 0));
                },
                H: function (x, y, z) {
                    return (((((x ^ y) >>> 0) ^ z) >>> 0));
                },
                I: function (x, y, z) {
                    return (((y ^ (((x | ~z) >>> 0))) >>> 0));
                },
                FF: function (a, b, c, d, m, s, t) {
                    a = (a + (((((CM.Cryptography.MD5.F(b, c, d) + m) >>> 0) + t) >>> 0))) >>> 0;
                    a = (b + CM.Cryptography.MD5.ROTLEFT(a, s)) >>> 0;
                    return a;
                },
                GG: function (a, b, c, d, m, s, t) {
                    a = (a + (((((CM.Cryptography.MD5.G(b, c, d) + m) >>> 0) + t) >>> 0))) >>> 0;
                    a = (b + CM.Cryptography.MD5.ROTLEFT(a, s)) >>> 0;
                    return a;
                },
                HH: function (a, b, c, d, m, s, t) {
                    a = (a + (((((CM.Cryptography.MD5.H(b, c, d) + m) >>> 0) + t) >>> 0))) >>> 0;
                    a = (b + CM.Cryptography.MD5.ROTLEFT(a, s)) >>> 0;
                    return a;
                },
                II: function (a, b, c, d, m, s, t) {
                    a = (a + (((((CM.Cryptography.MD5.I(b, c, d) + m) >>> 0) + t) >>> 0))) >>> 0;
                    a = (b + CM.Cryptography.MD5.ROTLEFT(a, s)) >>> 0;
                    return a;
                },
                Transform: function (ctx, data) {
                    var a, b, c, d, i, j;
                    var m = System.Array.init(16, 0, System.UInt32);
                    // MD5 specifies big endian byte order, but this implementation assumes a little
                    // endian byte order CPU. Reverse all the bytes upon input, and re-reverse them
                    // on output (in md5_final()).
                    for (i = 0, j = 0; i < 16; i = (i + 1) >>> 0, j = (j + 4) >>> 0) {
                        m[System.Array.index(i, m)] = ((((((data[System.Array.index(j, data)]) + (((data[System.Array.index(((j + 1) >>> 0), data)] << 8) >>> 0))) >>> 0) + (((data[System.Array.index(((j + 2) >>> 0), data)] << 16) >>> 0))) >>> 0) + (((data[System.Array.index(((j + 3) >>> 0), data)] << 24) >>> 0))) >>> 0;
                    }

                    a = ctx.state[System.Array.index(0, ctx.state)];
                    b = ctx.state[System.Array.index(1, ctx.state)];
                    c = ctx.state[System.Array.index(2, ctx.state)];
                    d = ctx.state[System.Array.index(3, ctx.state)];

                    a = CM.Cryptography.MD5.FF(a, b, c, d, m[System.Array.index(0, m)], 7, 3614090360);
                    d = CM.Cryptography.MD5.FF(d, a, b, c, m[System.Array.index(1, m)], 12, 3905402710);
                    c = CM.Cryptography.MD5.FF(c, d, a, b, m[System.Array.index(2, m)], 17, 606105819);
                    b = CM.Cryptography.MD5.FF(b, c, d, a, m[System.Array.index(3, m)], 22, 3250441966);
                    a = CM.Cryptography.MD5.FF(a, b, c, d, m[System.Array.index(4, m)], 7, 4118548399);
                    d = CM.Cryptography.MD5.FF(d, a, b, c, m[System.Array.index(5, m)], 12, 1200080426);
                    c = CM.Cryptography.MD5.FF(c, d, a, b, m[System.Array.index(6, m)], 17, 2821735955);
                    b = CM.Cryptography.MD5.FF(b, c, d, a, m[System.Array.index(7, m)], 22, 4249261313);
                    a = CM.Cryptography.MD5.FF(a, b, c, d, m[System.Array.index(8, m)], 7, 1770035416);
                    d = CM.Cryptography.MD5.FF(d, a, b, c, m[System.Array.index(9, m)], 12, 2336552879);
                    c = CM.Cryptography.MD5.FF(c, d, a, b, m[System.Array.index(10, m)], 17, 4294925233);
                    b = CM.Cryptography.MD5.FF(b, c, d, a, m[System.Array.index(11, m)], 22, 2304563134);
                    a = CM.Cryptography.MD5.FF(a, b, c, d, m[System.Array.index(12, m)], 7, 1804603682);
                    d = CM.Cryptography.MD5.FF(d, a, b, c, m[System.Array.index(13, m)], 12, 4254626195);
                    c = CM.Cryptography.MD5.FF(c, d, a, b, m[System.Array.index(14, m)], 17, 2792965006);
                    b = CM.Cryptography.MD5.FF(b, c, d, a, m[System.Array.index(15, m)], 22, 1236535329);

                    a = CM.Cryptography.MD5.GG(a, b, c, d, m[System.Array.index(1, m)], 5, 4129170786);
                    d = CM.Cryptography.MD5.GG(d, a, b, c, m[System.Array.index(6, m)], 9, 3225465664);
                    c = CM.Cryptography.MD5.GG(c, d, a, b, m[System.Array.index(11, m)], 14, 643717713);
                    b = CM.Cryptography.MD5.GG(b, c, d, a, m[System.Array.index(0, m)], 20, 3921069994);
                    a = CM.Cryptography.MD5.GG(a, b, c, d, m[System.Array.index(5, m)], 5, 3593408605);
                    d = CM.Cryptography.MD5.GG(d, a, b, c, m[System.Array.index(10, m)], 9, 38016083);
                    c = CM.Cryptography.MD5.GG(c, d, a, b, m[System.Array.index(15, m)], 14, 3634488961);
                    b = CM.Cryptography.MD5.GG(b, c, d, a, m[System.Array.index(4, m)], 20, 3889429448);
                    a = CM.Cryptography.MD5.GG(a, b, c, d, m[System.Array.index(9, m)], 5, 568446438);
                    d = CM.Cryptography.MD5.GG(d, a, b, c, m[System.Array.index(14, m)], 9, 3275163606);
                    c = CM.Cryptography.MD5.GG(c, d, a, b, m[System.Array.index(3, m)], 14, 4107603335);
                    b = CM.Cryptography.MD5.GG(b, c, d, a, m[System.Array.index(8, m)], 20, 1163531501);
                    a = CM.Cryptography.MD5.GG(a, b, c, d, m[System.Array.index(13, m)], 5, 2850285829);
                    d = CM.Cryptography.MD5.GG(d, a, b, c, m[System.Array.index(2, m)], 9, 4243563512);
                    c = CM.Cryptography.MD5.GG(c, d, a, b, m[System.Array.index(7, m)], 14, 1735328473);
                    b = CM.Cryptography.MD5.GG(b, c, d, a, m[System.Array.index(12, m)], 20, 2368359562);

                    a = CM.Cryptography.MD5.HH(a, b, c, d, m[System.Array.index(5, m)], 4, 4294588738);
                    d = CM.Cryptography.MD5.HH(d, a, b, c, m[System.Array.index(8, m)], 11, 2272392833);
                    c = CM.Cryptography.MD5.HH(c, d, a, b, m[System.Array.index(11, m)], 16, 1839030562);
                    b = CM.Cryptography.MD5.HH(b, c, d, a, m[System.Array.index(14, m)], 23, 4259657740);
                    a = CM.Cryptography.MD5.HH(a, b, c, d, m[System.Array.index(1, m)], 4, 2763975236);
                    d = CM.Cryptography.MD5.HH(d, a, b, c, m[System.Array.index(4, m)], 11, 1272893353);
                    c = CM.Cryptography.MD5.HH(c, d, a, b, m[System.Array.index(7, m)], 16, 4139469664);
                    b = CM.Cryptography.MD5.HH(b, c, d, a, m[System.Array.index(10, m)], 23, 3200236656);
                    a = CM.Cryptography.MD5.HH(a, b, c, d, m[System.Array.index(13, m)], 4, 681279174);
                    d = CM.Cryptography.MD5.HH(d, a, b, c, m[System.Array.index(0, m)], 11, 3936430074);
                    c = CM.Cryptography.MD5.HH(c, d, a, b, m[System.Array.index(3, m)], 16, 3572445317);
                    b = CM.Cryptography.MD5.HH(b, c, d, a, m[System.Array.index(6, m)], 23, 76029189);
                    a = CM.Cryptography.MD5.HH(a, b, c, d, m[System.Array.index(9, m)], 4, 3654602809);
                    d = CM.Cryptography.MD5.HH(d, a, b, c, m[System.Array.index(12, m)], 11, 3873151461);
                    c = CM.Cryptography.MD5.HH(c, d, a, b, m[System.Array.index(15, m)], 16, 530742520);
                    b = CM.Cryptography.MD5.HH(b, c, d, a, m[System.Array.index(2, m)], 23, 3299628645);

                    a = CM.Cryptography.MD5.II(a, b, c, d, m[System.Array.index(0, m)], 6, 4096336452);
                    d = CM.Cryptography.MD5.II(d, a, b, c, m[System.Array.index(7, m)], 10, 1126891415);
                    c = CM.Cryptography.MD5.II(c, d, a, b, m[System.Array.index(14, m)], 15, 2878612391);
                    b = CM.Cryptography.MD5.II(b, c, d, a, m[System.Array.index(5, m)], 21, 4237533241);
                    a = CM.Cryptography.MD5.II(a, b, c, d, m[System.Array.index(12, m)], 6, 1700485571);
                    d = CM.Cryptography.MD5.II(d, a, b, c, m[System.Array.index(3, m)], 10, 2399980690);
                    c = CM.Cryptography.MD5.II(c, d, a, b, m[System.Array.index(10, m)], 15, 4293915773);
                    b = CM.Cryptography.MD5.II(b, c, d, a, m[System.Array.index(1, m)], 21, 2240044497);
                    a = CM.Cryptography.MD5.II(a, b, c, d, m[System.Array.index(8, m)], 6, 1873313359);
                    d = CM.Cryptography.MD5.II(d, a, b, c, m[System.Array.index(15, m)], 10, 4264355552);
                    c = CM.Cryptography.MD5.II(c, d, a, b, m[System.Array.index(6, m)], 15, 2734768916);
                    b = CM.Cryptography.MD5.II(b, c, d, a, m[System.Array.index(13, m)], 21, 1309151649);
                    a = CM.Cryptography.MD5.II(a, b, c, d, m[System.Array.index(4, m)], 6, 4149444226);
                    d = CM.Cryptography.MD5.II(d, a, b, c, m[System.Array.index(11, m)], 10, 3174756917);
                    c = CM.Cryptography.MD5.II(c, d, a, b, m[System.Array.index(2, m)], 15, 718787259);
                    b = CM.Cryptography.MD5.II(b, c, d, a, m[System.Array.index(9, m)], 21, 3951481745);

                    ctx.state[System.Array.index(0, ctx.state)] = (ctx.state[System.Array.index(0, ctx.state)] + a) >>> 0;
                    ctx.state[System.Array.index(1, ctx.state)] = (ctx.state[System.Array.index(1, ctx.state)] + b) >>> 0;
                    ctx.state[System.Array.index(2, ctx.state)] = (ctx.state[System.Array.index(2, ctx.state)] + c) >>> 0;
                    ctx.state[System.Array.index(3, ctx.state)] = (ctx.state[System.Array.index(3, ctx.state)] + d) >>> 0;
                },
                Update: function (ctx, data, len) {
                    var i;

                    for (i = 0; i < len; i = (i + 1) | 0) {
                        ctx.data[System.Array.index(ctx.datalen, ctx.data)] = data[System.Array.index(i, data)];
                        ctx.datalen = (ctx.datalen + 1) | 0;
                        if (ctx.datalen === 64) {
                            CM.Cryptography.MD5.Transform(ctx, ctx.data);
                            var hi = { v : ctx.bitlen[System.Array.index(0, ctx.bitlen)] };
                            var lo = { v : ctx.bitlen[System.Array.index(1, ctx.bitlen)] };
                            CM.Cryptography.MD5.INT64_ADD(hi, lo, 512);
                            ctx.bitlen[System.Array.index(0, ctx.bitlen)] = hi.v;
                            ctx.bitlen[System.Array.index(1, ctx.bitlen)] = lo.v;
                            ctx.datalen = 0;
                        }
                    }
                },
                Final: function (ctx, hash) {
                    var i;

                    i = ctx.datalen;

                    // Pad whatever data is left in the buffer.
                    if (ctx.datalen < 56) {
                        ctx.data[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ctx.data)] = 128;
                        while (i < 56) {
                            ctx.data[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ctx.data)] = 0;
                        }
                    } else {
                        ctx.data[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ctx.data)] = 128;
                        while (i < 64) {
                            ctx.data[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ctx.data)] = 0;
                        }
                        CM.Cryptography.MD5.Transform(ctx, ctx.data);
                        for (i = 0; i < 56; i = (i + 1) | 0) {
                            ctx.data[System.Array.index(i, ctx.data)] = 0;
                        }
                    }

                    // Append to the padding the total message's length in bits and transform.

                    var hi = { v : ctx.bitlen[System.Array.index(0, ctx.bitlen)] };
                    var lo = { v : ctx.bitlen[System.Array.index(1, ctx.bitlen)] };
                    CM.Cryptography.MD5.INT64_ADD(hi, lo, Bridge.Int.umul((ctx.datalen >>> 0), 8));
                    ctx.bitlen[System.Array.index(0, ctx.bitlen)] = hi.v;
                    ctx.bitlen[System.Array.index(1, ctx.bitlen)] = lo.v;

                    //ctx.data[56] = (byte)(ctx.bitlen & 0xff);
                    //ctx.data[57] = (byte)((ctx.bitlen >> 8) & 0xff);
                    //ctx.data[58] = (byte)((ctx.bitlen >> 16) & 0xff);
                    //ctx.data[59] = (byte)((ctx.bitlen >> 24) & 0xff);
                    //ctx.data[60] = (byte)((ctx.bitlen >> 32) & 0xff);
                    //ctx.data[61] = (byte)((ctx.bitlen >> 40) & 0xff);
                    //ctx.data[62] = (byte)((ctx.bitlen >> 48) & 0xff);
                    //ctx.data[63] = (byte)((ctx.bitlen >> 56) & 0xff);

                    ctx.data[System.Array.index(56, ctx.data)] = (((ctx.bitlen[System.Array.index(0, ctx.bitlen)] & 255) >>> 0)) & 255;
                    ctx.data[System.Array.index(57, ctx.data)] = ((((ctx.bitlen[System.Array.index(0, ctx.bitlen)] >>> 8) & 255) >>> 0)) & 255;
                    ctx.data[System.Array.index(58, ctx.data)] = ((((ctx.bitlen[System.Array.index(0, ctx.bitlen)] >>> 16) & 255) >>> 0)) & 255;
                    ctx.data[System.Array.index(59, ctx.data)] = ((((ctx.bitlen[System.Array.index(0, ctx.bitlen)] >>> 24) & 255) >>> 0)) & 255;
                    ctx.data[System.Array.index(60, ctx.data)] = (((ctx.bitlen[System.Array.index(1, ctx.bitlen)] & 255) >>> 0)) & 255;
                    ctx.data[System.Array.index(61, ctx.data)] = ((((ctx.bitlen[System.Array.index(1, ctx.bitlen)] >>> 8) & 255) >>> 0)) & 255;
                    ctx.data[System.Array.index(62, ctx.data)] = ((((ctx.bitlen[System.Array.index(1, ctx.bitlen)] >>> 16) & 255) >>> 0)) & 255;
                    ctx.data[System.Array.index(63, ctx.data)] = ((((ctx.bitlen[System.Array.index(1, ctx.bitlen)] >>> 24) & 255) >>> 0)) & 255;

                    CM.Cryptography.MD5.Transform(ctx, ctx.data);

                    // Since this implementation uses little endian byte ordering and MD uses big endian,
                    // reverse all the bytes when copying the final state to the output hash.
                    for (i = 0; i < 4; i = (i + 1) | 0) {
                        hash[System.Array.index(i, hash)] = ((((ctx.state[System.Array.index(0, ctx.state)] >>> (Bridge.Int.mul(i, 8))) & 255) >>> 0)) & 255;
                        hash[System.Array.index(((i + 4) | 0), hash)] = ((((ctx.state[System.Array.index(1, ctx.state)] >>> (Bridge.Int.mul(i, 8))) & 255) >>> 0)) & 255;
                        hash[System.Array.index(((i + 8) | 0), hash)] = ((((ctx.state[System.Array.index(2, ctx.state)] >>> (Bridge.Int.mul(i, 8))) & 255) >>> 0)) & 255;
                        hash[System.Array.index(((i + 12) | 0), hash)] = ((((ctx.state[System.Array.index(3, ctx.state)] >>> (Bridge.Int.mul(i, 8))) & 255) >>> 0)) & 255;
                    }
                }
            }
        }
    });

    Bridge.define("CM.Cryptography.MD5.MD5_CTX", {
        fields: {
            state: null,
            data: null,
            datalen: 0,
            bitlen: null
        },
        ctors: {
            init: function () {
                this.state = System.Array.init(5, 0, System.UInt32);
                this.data = System.Array.init(64, 0, System.Byte);
                this.bitlen = System.Array.init(2, 0, System.UInt32);
            },
            ctor: function () {
                this.$initialize();
                this.Reset();
            }
        },
        methods: {
            Reset: function () {
                this.datalen = 0;
                this.bitlen[System.Array.index(0, this.bitlen)] = 0;
                this.bitlen[System.Array.index(1, this.bitlen)] = 0;

                this.state[System.Array.index(0, this.state)] = 1732584193;
                this.state[System.Array.index(1, this.state)] = 4023233417;
                this.state[System.Array.index(2, this.state)] = 2562383102;
                this.state[System.Array.index(3, this.state)] = 271733878;
            }
        }
    });

    /**
     * Rivest-Shamir-Adleman (RSA)
     *
     * @public
     * @class CM.Cryptography.RSA
     */
    Bridge.define("CM.Cryptography.RSA", {
        statics: {
            methods: {
                EMSA_PKCS1_v1_5Encode_256: function (b, keyLength) {
                    var res = System.Convert.fromBase64String("MDEwDQYJYIZIAWUDBAIBBQAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
                    System.Array.copy(b, 0, res, ((res.length - 32) | 0), 32);

                    var PSLength = Math.max(8, ((((keyLength - res.length) | 0) - 3) | 0));
                    // PS = PSLength of 0xff

                    // EM = 0x00 | 0x01 | PS | 0x00 | T
                    var EM = System.Array.init(((((PSLength + res.length) | 0) + 3) | 0), 0, System.Byte);
                    EM[System.Array.index(1, EM)] = 1;
                    for (var i = 2; i < ((PSLength + 2) | 0); i = (i + 1) | 0) {
                        EM[System.Array.index(i, EM)] = 255;
                    }
                    System.Array.copy(res, 0, EM, ((PSLength + 3) | 0), res.length);

                    return EM;
                }
            }
        }
    });

    /**
     * A portable C# SHA-256, based on work by Brad Conte (bradconte.com) MIT License
     *
     * @static
     * @abstract
     * @public
     * @class CM.Cryptography.SHA256
     */
    Bridge.define("CM.Cryptography.SHA256", {
        statics: {
            fields: {
                _k: null
            },
            ctors: {
                init: function () {
                    this._k = System.Array.init([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], System.UInt32);
                }
            },
            methods: {
                ComputeHash: function (data) {
                    var ctx = new CM.Cryptography.SHA256.SHA256_CTX();
                    CM.Cryptography.SHA256.Update(ctx, data, data.length);
                    var hash = System.Array.init(32, 0, System.Byte);
                    CM.Cryptography.SHA256.Final(ctx, hash);
                    return hash;
                },
                /**
                 * Not all platforms (such as javascript) handle INT64 very well
                 *
                 * @static
                 * @private
                 * @this CM.Cryptography.SHA256
                 * @memberof CM.Cryptography.SHA256
                 * @param   {System.UInt32}    a    
                 * @param   {System.UInt32}    b    
                 * @param   {number}           c
                 * @return  {void}
                 */
                INT64_ADD: function (a, b, c) {
                    if (a.v > ((4294967295 - (c)) >>> 0)) {
                        b.v = (b.v + 1) >>> 0;
                    }
                    a.v = (a.v + c) >>> 0;
                },
                Transform: function (ctx, data) {
                    var k = CM.Cryptography.SHA256._k;

                    
            var a, b, c, d, e, f, g, h, t1, t2;
            var m = ctx.m;

            var i, j;
            for (i = 0, j = 0; i < 16; ++i, j += 4)
                m[i] =  ((data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3])) >>> 0;

            for (; i < 64; ++i) {
                t1 = m[i - 2];
                t1 = ((t1 >>> 17) | (t1 << 15)) 
                    ^ ((t1 >>> 19) | (t1 << 13)) 
                    ^  (t1 >>> 10);
                t2 = m[i - 15];
                t2 = ((t2 >>> 7) | (t2 << 25)) 
                    ^ ((t2 >>> 18) | (t2 << 14))
                    ^ (t2 >>> 3);

                m[i] = t1 + m[i - 7] + t2 + m[i - 16];

            }

            a = ctx.state[0];
            b = ctx.state[1];
            c = ctx.state[2];
            d = ctx.state[3];
            e = ctx.state[4];
            f = ctx.state[5];
            g = ctx.state[6];
            h = ctx.state[7];

            var ep1, ep0, ch, maj;

            for (i = 0; i < 64; ++i) {
                ep1 = ((e >>> 6) | (e << 26)) 
                    ^ ((e >>> 11) | (e << 21)) 
                    ^ ((e >>> 25) | (e << 7));

                ch = g ^ (e & (f ^ g));
                t1 = h + ep1 + ch + k[i] + m[i];

                ep0 = ((a >>> 2) | (a << 30)) 
                    ^ ((a >>> 13) | (a << 19)) 
                    ^ ((a >>> 22) | (a << 10));
                maj = (a & b) | (c & (a ^ b));
                t2 = ep0 + maj;
                h = g;
                g = f;
                f = e;
                e = (d + t1)>>>0;
                d = c;
                c = b;
                b = a;
                a = (t1 + t2)>>>0;
            }
            ctx.state[0] = (((ctx.state[0] + a) >>> 0) & 4294967295) >>> 0;
            ctx.state[1] = (((ctx.state[1] + b) >>> 0) & 4294967295) >>> 0;
            ctx.state[2] = (((ctx.state[2] + c) >>> 0) & 4294967295) >>> 0;
            ctx.state[3] = (((ctx.state[3] + d) >>> 0) & 4294967295) >>> 0;
            ctx.state[4] = (((ctx.state[4] + e) >>> 0) & 4294967295) >>> 0;
            ctx.state[5] = (((ctx.state[5] + f) >>> 0) & 4294967295) >>> 0;
            ctx.state[6] = (((ctx.state[6] + g) >>> 0) & 4294967295) >>> 0;
            ctx.state[7] = (((ctx.state[7] + h) >>> 0) & 4294967295) >>> 0;


                },
                Update: function (ctx, data, len) {
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        ctx.data[System.Array.index(ctx.datalen, ctx.data)] = data[System.Array.index(i, data)];
                        ctx.datalen = (ctx.datalen + 1) | 0;
                        if (ctx.datalen === 64) {
                            CM.Cryptography.SHA256.Transform(ctx, ctx.data);
                            var hi = { v : ctx.bitlen[System.Array.index(0, ctx.bitlen)] };
                            var lo = { v : ctx.bitlen[System.Array.index(1, ctx.bitlen)] };
                            CM.Cryptography.SHA256.INT64_ADD(hi, lo, 512);
                            ctx.bitlen[System.Array.index(0, ctx.bitlen)] = hi.v;
                            ctx.bitlen[System.Array.index(1, ctx.bitlen)] = lo.v;
                            ctx.datalen = 0;
                        }
                    }
                },
                Final: function (ctx, hash) {
                    
                var i = ctx.datalen;

                // Pad whatever data is left in the buffer.
                if (ctx.datalen < 56) {
                    ctx.data[i++] = 128;
                    while (i < 56) {
                        ctx.data[i++] = 0;
                    }
                } else {
                    ctx.data[i++] = 128;
                    while (i < 64) {
                        ctx.data[i++] = 0;
                    }
                    CM.Cryptography.SHA256.Transform(ctx, ctx.data);
                    for(i=0;i<56;i++)
                        ctx.data[i] = 0;
                }

                // Append to the padding the total message's length in bits and transform.
                var hi = { v : ctx.bitlen[0] };
                var lo = { v : ctx.bitlen[1] };
                CM.Cryptography.SHA256.INT64_ADD(hi, lo, (((ctx.datalen >>> 0) * 8) >>> 0));
                ctx.bitlen[0] = hi.v;
                ctx.bitlen[1] = lo.v;

                ctx.data[63] = (((ctx.bitlen[0] & 255) >>> 0)) & 255;
                ctx.data[62] = ((((ctx.bitlen[0] >>> 8) & 255) >>> 0)) & 255;
                ctx.data[61] = ((((ctx.bitlen[0] >>> 16) & 255) >>> 0)) & 255;
                ctx.data[60] = ((((ctx.bitlen[0] >>> 24) & 255) >>> 0)) & 255;
                ctx.data[59] = (((ctx.bitlen[1] & 255) >>> 0)) & 255;
                ctx.data[58] = ((((ctx.bitlen[1] >>> 8) & 255) >>> 0)) & 255;
                ctx.data[57] = ((((ctx.bitlen[1] >>> 16) & 255) >>> 0)) & 255;
                ctx.data[56] = ((((ctx.bitlen[1] >>> 24) & 255) >>> 0)) & 255;
                CM.Cryptography.SHA256.Transform(ctx, ctx.data);

                // Since this implementation uses little endian byte ordering and SHA uses big endian,
                // reverse all the bytes when copying the final state to the output hash.
                for (i = 0; i < 4; i = (i + 1) | 0) {
                    hash[i] = ((((ctx.state[0] >>> (((24 - ((i * 8) | 0)) | 0))) & 255) >>> 0)) & 255;
                    hash[((i + 4) | 0)] = ((((ctx.state[1] >>> (((24 - ((i * 8) | 0)) | 0))) & 255) >>> 0)) & 255;
                    hash[((i + 8) | 0)] = ((((ctx.state[2] >>> (((24 - ((i * 8) | 0)) | 0))) & 255) >>> 0)) & 255;
                    hash[((i + 12) | 0)] = ((((ctx.state[3] >>> (((24 - ((i * 8) | 0)) | 0))) & 255) >>> 0)) & 255;
                    hash[((i + 16) | 0)] = ((((ctx.state[4] >>> (((24 - ((i * 8) | 0)) | 0))) & 255) >>> 0)) & 255;
                    hash[((i + 20) | 0)] = ((((ctx.state[5] >>> (((24 - ((i * 8) | 0)) | 0))) & 255) >>> 0)) & 255;
                    hash[((i + 24) | 0)] = ((((ctx.state[6] >>> (((24 - ((i * 8) | 0)) | 0))) & 255) >>> 0)) & 255;
                    hash[((i + 28) | 0)] = ((((ctx.state[7] >>> (((24 - ((i * 8) | 0)) | 0))) & 255) >>> 0)) & 255;
                }
            ;
                }
            }
        }
    });

    Bridge.define("CM.Cryptography.SHA256.SHA256_CTX", {
        fields: {
            data: null,
            datalen: 0,
            bitlen: null,
            m: null,
            state: null
        },
        ctors: {
            init: function () {
                this.data = System.Array.init(64, 0, System.Byte);
                this.bitlen = System.Array.init(2, 0, System.UInt32);
                this.m = System.Array.init(64, 0, System.UInt32);
                this.state = System.Array.init([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], System.UInt32);
            }
        }
    });

    Bridge.define("CM.DNS", {
        statics: {
            fields: {
                AUTHORITATIVE_DOMAIN: null,
                DEFAULT_PORT: null,
                UNTRUSTED_DOMAIN: null,
                Nameservers: null
            },
            ctors: {
                init: function () {
                    this.AUTHORITATIVE_DOMAIN = "civil.money";
                    this.DEFAULT_PORT = "443";
                    this.UNTRUSTED_DOMAIN = "untrusted-server.com";
                    this.Nameservers = System.Array.init(["ns1.civil.money", "ns2.civil.money", "ns3.civil.money", "ns4.civil.money", "ns5.civil.money", "ns6.civil.money"], System.String);
                }
            },
            methods: {
                /**
                 * Converts an IP address or domain name (and optional port) into a
                 *.untrusted.civil.com domain name.
                 The name server for untrusted.civil.com simply resolves the
                 IP/host in the first fragment to its original address.
                 *
                 * @static
                 * @public
                 * @this CM.DNS
                 * @memberof CM.DNS
                 * @param   {string}     ep              
                 * @param   {boolean}    preservePort
                 * @return  {string}
                 */
                EndpointToUntrustedDomain: function (ep, preservePort) {
                    var parts = System.String.split(ep, [58].map(function(i) {{ return String.fromCharCode(i); }}));

                    if (System.String.indexOf(parts[System.Array.index(0, parts)], CM.DNS.UNTRUSTED_DOMAIN) > -1) {
                        return System.String.concat(parts[System.Array.index(0, parts)], (preservePort ? System.String.concat(":", (parts.length === 2 ? parts[System.Array.index(1, parts)] : CM.DNS.DEFAULT_PORT)) : ""));
                    } // already converted.

                    // aaa.bbb.ccc.ddd:port ->  aaa-bbb-ccc-ddd-port.untrusted.civil.com
                    return System.String.concat(System.String.replaceAll(parts[System.Array.index(0, parts)], ".", "-"), "-", (parts.length === 2 ? parts[System.Array.index(1, parts)] : CM.DNS.DEFAULT_PORT), ".", CM.DNS.UNTRUSTED_DOMAIN, (preservePort ? System.String.concat(":", (parts.length === 2 ? parts[System.Array.index(1, parts)] : CM.DNS.DEFAULT_PORT)) : ""));
                },
                /**
                 * Converts a *.untrusted.civil.com domain back into its original IP/host:port form.
                 *
                 * @static
                 * @public
                 * @this CM.DNS
                 * @memberof CM.DNS
                 * @param   {string}    domainName
                 * @return  {string}
                 */
                UntrustedDomainToEndpoint: function (domainName) {
                    if (Bridge.referenceEquals(domainName, CM.DNS.UNTRUSTED_DOMAIN)) {
                        return "untrusted-server.com:443";
                    }
                    var dotted = ".untrusted-server.com";
                    if (!System.String.endsWith(domainName, dotted)) {
                        throw new System.ArgumentException("Invalid untrusted domain name.");
                    }
                    domainName = System.String.replaceAll(domainName, dotted, "");
                    // aaa-bbb-ccc-ddd-port -> aaa.bbb.ccc.ddd:port
                    var parts = System.String.split(domainName, [45].map(function(i) {{ return String.fromCharCode(i); }}));
                    var b0 = { }, b1 = { }, b2 = { }, b3 = { };
                    if ((parts.length === 4 || parts.length === 5) && System.Byte.tryParse(parts[System.Array.index(0, parts)], b0) && System.Byte.tryParse(parts[System.Array.index(1, parts)], b1) && System.Byte.tryParse(parts[System.Array.index(2, parts)], b2) && System.Byte.tryParse(parts[System.Array.index(3, parts)], b3)) {
                        var port = { v : 80 };
                        if (parts.length === 5 && !System.UInt16.tryParse(parts[System.Array.index(4, parts)], port)) {
                            throw new System.ArgumentException("Invalid untrusted domain name.");
                        }
                        return b0.v + "." + b1.v + "." + b2.v + "." + b3.v + ":" + port.v;
                    } else {
                        // host-name-com-8000 -> host.name.com:8000
                        // or
                        // host-name-com -> host.name.com:443
                        // if the last segment is a number, assume it's a port
                        var port1 = { };
                        if (System.UInt16.tryParse(parts[System.Array.index(((parts.length - 1) | 0), parts)], port1)) {
                            return System.String.concat(parts.slice(0, 0 + ((parts.length - 1) | 0)).join("."), ":", port1.v);
                        } else {
                            return System.String.concat(parts.slice(0, 0 + parts.length).join("."), ":", CM.DNS.DEFAULT_PORT);
                        }
                    }
                }
            }
        }
    });

    /**
     * Useful CLR extensions
     *
     * @static
     * @abstract
     * @public
     * @class CM.Extensions
     */
    Bridge.define("CM.Extensions", {
        statics: {
            methods: {
                /**
                 * Because Environment.NewLine in unix is different.
                 *
                 * @static
                 * @public
                 * @this CM.Extensions
                 * @memberof CM.Extensions
                 * @param   {System.Text.StringBuilder}    s       
                 * @param   {string}                       line
                 * @return  {void}
                 */
                CRLF: function (s, line) {
                    if (line === void 0) { line = null; }
                    s.append(line);
                    s.append("\r\n");
                },
                /**
                 * If necessary, encloses the string in quotes and escapes quote characters.
                 *
                 * @static
                 * @public
                 * @this CM.Extensions
                 * @memberof CM.Extensions
                 * @param   {string}    s    The string to escape.
                 * @return  {string}         A CSV value.
                 */
                CsvEscape: function (s) {
                    if (s == null) {
                        return "";
                    }
                    if (System.String.indexOf(s, String.fromCharCode(44)) === -1 && System.String.indexOf(s, String.fromCharCode(10)) === -1 && System.String.indexOf(s, String.fromCharCode(13)) === -1 && System.String.indexOf(s, String.fromCharCode(34)) === -1) {
                        return s;
                    }
                    return System.String.concat("\"", System.String.replaceAll(s, "\"", "\"\""), "\"");
                },
                /**
                 * Reads CSV lines and returns an array of values. Multi-line is supported.
                 *
                 * @static
                 * @public
                 * @this CM.Extensions
                 * @memberof CM.Extensions
                 * @param   {string}            document    The csv document to parse.
                 * @param   {System.Int32}      i           The current document index.
                 * @return  {Array.<string>}                An array of values or null if the end of document is reached.
                 */
                NextCsvLine: function (document, i) {
                    if (i.v >= document.length) {
                        return null;
                    }
                    var s = new System.Text.StringBuilder();
                    var inValue = false;
                    var inString = false;
                    var ar = new (System.Collections.Generic.List$1(System.String))();
                    for (; i.v < document.length; i.v = (i.v + 1) | 0) {
                        var c = document.charCodeAt(i.v);
                        if (c === 13 && !inString) {
                            if (((i.v + 1) | 0) >= document.length || document.charCodeAt(((i.v + 1) | 0)) === 10) {
                                i.v = (i.v + 2) | 0;
                                // end of line
                                ar.add(s.toString());
                                s.remove(0, s.getLength());
                                return ar.toArray();
                            }
                        }
                        if (!inValue) {
                            if (System.Char.isWhiteSpace(String.fromCharCode(c)) || c === 44) {
                                continue;
                            }
                            inValue = true;
                            if (c === 34) {
                                inString = true;
                                continue;
                            }
                        }
                        if (inString && c === 34) { // handle "" escape
                            if (((i.v + 1) | 0) >= document.length || document.charCodeAt(((i.v + 1) | 0)) !== 34) {
                                ar.add(s.toString());
                                s.remove(0, s.getLength());
                                inString = false;
                                inValue = false;
                                continue;
                            } else {
                                // double quote
                                i.v = (i.v + 1) | 0;
                            }
                        } else if (!inString) {
                            if (c === 44) {
                                ar.add(s.toString());
                                s.remove(0, s.getLength());
                                inValue = false;
                                continue;
                            }
                        }

                        s.append(String.fromCharCode(c));
                    }
                    ar.add(s.toString());
                    return ar.toArray();
                },
                /**
                 * Reads a CSV value at the specified index. Supports quote characters.
                 *
                 * @static
                 * @public
                 * @this CM.Extensions
                 * @memberof CM.Extensions
                 * @param   {string}          line    The string to read from
                 * @param   {System.Int32}    i       The index to begin reading.
                 * @return  {string}                  CSV delimited value
                 */
                NextCsvValue: function (line, i) {
                    var s = new System.Text.StringBuilder();
                    var inValue = false;
                    var inString = false;
                    for (; i.v < line.length; i.v = (i.v + 1) | 0) {
                        var c = line.charCodeAt(i.v);
                        if (!inValue) {
                            if (System.Char.isWhiteSpace(String.fromCharCode(c)) || c === 44) {
                                continue;
                            }
                            inValue = true;
                            if (c === 34) {
                                inString = true;
                                continue;
                            }
                        }
                        if (inString && c === 34) { // handle "" escape
                            if (((i.v + 1) | 0) >= line.length || line.charCodeAt(((i.v + 1) | 0)) !== 34) {
                                i.v = (i.v + 1) | 0;
                                return s.toString().trim();
                            }
                        } else if (!inString) {
                            if (c === 44) {
                                i.v = (i.v + 1) | 0;
                                return s.toString().trim();
                            }
                        }

                        s.append(String.fromCharCode(c));
                    }
                    return s.toString();
                }
            }
        }
    });

    Bridge.define("CM.Helpers", {
        statics: {
            fields: {
                /**
                 * Reserved path names which may or may not be desired
                 at some future point in time. Basically we don't
                 want somebody registering these as their account name
                 since account URLs are on the civil.money root.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof CM.Helpers
                 * @type System.Collections.Generic.Dictionary$2
                 */
                ReservedPathNames: null,
                UnicodeRanges: null
            },
            ctors: {
                init: function () {
                    this.UnicodeRanges = "\\u0900-\\u097F\\u4e00-\\u9faf\\u3400-\\u4dbf\\uAC00-\\uD7AF";
                },
                ctor: function () {
                    var ar = System.Array.init(["register", "history", "status", "api", "regions", "language", "help", "faq", "support", "settings", "peers", "vote", "votes", "forum", "discuss", "admin", "src", "img", "css", "bin", "servers", "about", "privacy", "privacy-policy", "terms", "legal", "disclaimer", "wiki", "seeds", "network", "download", "downloads", "secure", "info", "json", "xml", "contact", "config", "maintenance", "report", "reports", "translate", "apps", "events", "groups", "dev", "contributing", "docs", "documentation", "calendar", "ledger", "accounts", "blog", "announcements", "media", "videos", "video", "rss", "live"], System.String);
                    CM.Helpers.ReservedPathNames = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    for (var i = 0; i < ar.length; i = (i + 1) | 0) {
                        CM.Helpers.ReservedPathNames.add(ar[System.Array.index(i, ar)], null);
                    }
                }
            },
            methods: {
                DateToISO8601: function (date) {
                    if (Bridge.equals(date, System.DateTime.getMinValue())) {
                        return null;
                    }
                    return System.DateTime.format(date, "s");
                },
                DateFromISO8601$1: function (date) {
                    var d = { };
                    CM.Helpers.DateFromISO8601(date, d);
                    return d.v;
                },
                DateFromISO8601: function (date, d) {
                    var $t;
                    if (!CM.Helpers.IsISO8601(date)) {
                        d.v = System.DateTime.getMinValue();
                        return false;
                    }
                    var res = System.DateTime.tryParse((($t = date, $t != null ? $t : "")).trim(), null, d);
                    // All javascript dates when converted "toString" show timezone info as 
                    // local TZ, but bridge.net can track its own DateTimeKind. Setting DateTimeKind 
                    // is important for serialisation to work when we later on call DateToISO8601.
                    d.v = System.DateTime.create$2(System.DateTime.getTicks(d.v), System.DateTimeKind.Utc);
                    return res;
                },
                IsISO8601: function (date) {
                    if (date == null) {
                        return false;
                    }
                    //2016-03-08T15:00:00.000Z
                    return new RegExp("^\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}\\:\\d{2}\\:\\d{2}$").test(date);
                    // return date.Trim().Match(@"^\d{4}\-\d{2}\-\d{2}T\d{2}\:\d{2}\:\d{2}$") !=null;
                },
                /**
                 * Returns true if the ID is valid. The actual validation should be:
                 <p>^[\p{Ll}|\p{Mn}][\p{Ll}|\p{Mn}|0-9|\.|\-]{2,47}$</p>
                 *
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {string}     id
                 * @return  {boolean}
                 */
                IsIDValid: function (id) {
                    // Since javascript doesn't support \p{L}
                    var L = "\\u0061-\\u007a\\u00aa\\u00b5\\u00ba\\u00df-\\u00f6\\u00f8-\\u00ff\\u0101\\u0103\\u0105\\u0107\\u0109\\u010b\\u010d\\u010f\\u0111\\u0113\\u0115\\u0117\\u0119\\u011b\\u011d\\u011f\\u0121\\u0123\\u0125\\u0127\\u0129\\u012b\\u012d\\u012f\\u0131\\u0133\\u0135\\u0137\\u0138\\u013a\\u013c\\u013e\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014b\\u014d\\u014f\\u0151\\u0153\\u0155\\u0157\\u0159\\u015b\\u015d\\u015f\\u0161\\u0163\\u0165\\u0167\\u0169\\u016b\\u016d\\u016f\\u0171\\u0173\\u0175\\u0177\\u017a\\u017c\\u017e-\\u0180\\u0183\\u0185\\u0188\\u018c\\u018d\\u0192\\u0195\\u0199-\\u019b\\u019e\\u01a1\\u01a3\\u01a5\\u01a8\\u01aa\\u01ab\\u01ad\\u01b0\\u01b4\\u01b6\\u01b9\\u01ba\\u01bd-\\u01bf\\u01c6\\u01c9\\u01cc\\u01ce\\u01d0\\u01d2\\u01d4\\u01d6\\u01d8\\u01da\\u01dc\\u01dd\\u01df\\u01e1\\u01e3\\u01e5\\u01e7\\u01e9\\u01eb\\u01ed\\u01ef\\u01f0\\u01f3\\u01f5\\u01f9\\u01fb\\u01fd\\u01ff\\u0201\\u0203\\u0205\\u0207\\u0209\\u020b\\u020d\\u020f\\u0211\\u0213\\u0215\\u0217\\u0219\\u021b\\u021d\\u021f\\u0221\\u0223\\u0225\\u0227\\u0229\\u022b\\u022d\\u022f\\u0231\\u0233-\\u0239\\u023c\\u023f\\u0240\\u0242\\u0247\\u0249\\u024b\\u024d\\u024f-\\u0293\\u0295-\\u02af\\u037b-\\u037d\\u0390\\u03ac-\\u03ce\\u03d0\\u03d1\\u03d5-\\u03d7\\u03d9\\u03db\\u03dd\\u03df\\u03e1\\u03e3\\u03e5\\u03e7\\u03e9\\u03eb\\u03ed\\u03ef-\\u03f3\\u03f5\\u03f8\\u03fb\\u03fc\\u0430-\\u045f\\u0461\\u0463\\u0465\\u0467\\u0469\\u046b\\u046d\\u046f\\u0471\\u0473\\u0475\\u0477\\u0479\\u047b\\u047d\\u047f\\u0481\\u048b\\u048d\\u048f\\u0491\\u0493\\u0495\\u0497\\u0499\\u049b\\u049d\\u049f\\u04a1\\u04a3\\u04a5\\u04a7\\u04a9\\u04ab\\u04ad\\u04af\\u04b1\\u04b3\\u04b5\\u04b7\\u04b9\\u04bb\\u04bd\\u04bf\\u04c2\\u04c4\\u04c6\\u04c8\\u04ca\\u04cc\\u04ce\\u04cf\\u04d1\\u04d3\\u04d5\\u04d7\\u04d9\\u04db\\u04dd\\u04df\\u04e1\\u04e3\\u04e5\\u04e7\\u04e9\\u04eb\\u04ed\\u04ef\\u04f1\\u04f3\\u04f5\\u04f7\\u04f9\\u04fb\\u04fd\\u04ff\\u0501\\u0503\\u0505\\u0507\\u0509\\u050b\\u050d\\u050f\\u0511\\u0513\\u0561-\\u0587\\u1d00-\\u1d2b\\u1d62-\\u1d77\\u1d79-\\u1d9a\\u1e01\\u1e03\\u1e05\\u1e07\\u1e09\\u1e0b\\u1e0d\\u1e0f\\u1e11\\u1e13\\u1e15\\u1e17\\u1e19\\u1e1b\\u1e1d\\u1e1f\\u1e21\\u1e23\\u1e25\\u1e27\\u1e29\\u1e2b\\u1e2d\\u1e2f\\u1e31\\u1e33\\u1e35\\u1e37\\u1e39\\u1e3b\\u1e3d\\u1e3f\\u1e41\\u1e43\\u1e45\\u1e47\\u1e49\\u1e4b\\u1e4d\\u1e4f\\u1e51\\u1e53\\u1e55\\u1e57\\u1e59\\u1e5b\\u1e5d\\u1e5f\\u1e61\\u1e63\\u1e65\\u1e67\\u1e69\\u1e6b\\u1e6d\\u1e6f\\u1e71\\u1e73\\u1e75\\u1e77\\u1e79\\u1e7b\\u1e7d\\u1e7f\\u1e81\\u1e83\\u1e85\\u1e87\\u1e89\\u1e8b\\u1e8d\\u1e8f\\u1e91\\u1e93\\u1e95-\\u1e9b\\u1ea1\\u1ea3\\u1ea5\\u1ea7\\u1ea9\\u1eab\\u1ead\\u1eaf\\u1eb1\\u1eb3\\u1eb5\\u1eb7\\u1eb9\\u1ebb\\u1ebd\\u1ebf\\u1ec1\\u1ec3\\u1ec5\\u1ec7\\u1ec9\\u1ecb\\u1ecd\\u1ecf\\u1ed1\\u1ed3\\u1ed5\\u1ed7\\u1ed9\\u1edb\\u1edd\\u1edf\\u1ee1\\u1ee3\\u1ee5\\u1ee7\\u1ee9\\u1eeb\\u1eed\\u1eef\\u1ef1\\u1ef3\\u1ef5\\u1ef7\\u1ef9\\u1f00-\\u1f07\\u1f10-\\u1f15\\u1f20-\\u1f27\\u1f30-\\u1f37\\u1f40-\\u1f45\\u1f50-\\u1f57\\u1f60-\\u1f67\\u1f70-\\u1f7d\\u1f80-\\u1f87\\u1f90-\\u1f97\\u1fa0-\\u1fa7\\u1fb0-\\u1fb4\\u1fb6\\u1fb7\\u1fbe\\u1fc2-\\u1fc4\\u1fc6\\u1fc7\\u1fd0-\\u1fd3\\u1fd6\\u1fd7\\u1fe0-\\u1fe7\\u1ff2-\\u1ff4\\u1ff6\\u1ff7\\u2071\\u207f\\u210a\\u210e\\u210f\\u2113\\u212f\\u2134\\u2139\\u213c\\u213d\\u2146-\\u2149\\u214e\\u2184\\u2c30-\\u2c5e\\u2c61\\u2c65\\u2c66\\u2c68\\u2c6a\\u2c6c\\u2c74\\u2c76\\u2c77\\u2c81\\u2c83\\u2c85\\u2c87\\u2c89\\u2c8b\\u2c8d\\u2c8f\\u2c91\\u2c93\\u2c95\\u2c97\\u2c99\\u2c9b\\u2c9d\\u2c9f\\u2ca1\\u2ca3\\u2ca5\\u2ca7\\u2ca9\\u2cab\\u2cad\\u2caf\\u2cb1\\u2cb3\\u2cb5\\u2cb7\\u2cb9\\u2cbb\\u2cbd\\u2cbf\\u2cc1\\u2cc3\\u2cc5\\u2cc7\\u2cc9\\u2ccb\\u2ccd\\u2ccf\\u2cd1\\u2cd3\\u2cd5\\u2cd7\\u2cd9\\u2cdb\\u2cdd\\u2cdf\\u2ce1\\u2ce3\\u2ce4\\u2d00-\\u2d25\\ufb00-\\ufb06\\ufb13-\\ufb17\\uff41-\\uff5a\\u0041-\\u005a\\u00c0-\\u00d6\\u00d8-\\u00de\\u0100\\u0102\\u0104\\u0106\\u0108\\u010a\\u010c\\u010e\\u0110\\u0112\\u0114\\u0116\\u0118\\u011a\\u011c\\u011e\\u0120\\u0122\\u0124\\u0126\\u0128\\u012a\\u012c\\u012e\\u0130\\u0132\\u0134\\u0136\\u0139\\u013b\\u013d\\u013f\\u0141\\u0143\\u0145\\u0147\\u014a\\u014c\\u014e\\u0150\\u0152\\u0154\\u0156\\u0158\\u015a\\u015c\\u015e\\u0160\\u0162\\u0164\\u0166\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017b\\u017d\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018b\\u018e-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019c\\u019d\\u019f\\u01a0\\u01a2\\u01a4\\u01a6\\u01a7\\u01a9\\u01ac\\u01ae\\u01af\\u01b1-\\u01b3\\u01b5\\u01b7\\u01b8\\u01bc\\u01c4\\u01c7\\u01ca\\u01cd\\u01cf\\u01d1\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u01de\\u01e0\\u01e2\\u01e4\\u01e6\\u01e8\\u01ea\\u01ec\\u01ee\\u01f1\\u01f4\\u01f6-\\u01f8\\u01fa\\u01fc\\u01fe\\u0200\\u0202\\u0204\\u0206\\u0208\\u020a\\u020c\\u020e\\u0210\\u0212\\u0214\\u0216\\u0218\\u021a\\u021c\\u021e\\u0220\\u0222\\u0224\\u0226\\u0228\\u022a\\u022c\\u022e\\u0230\\u0232\\u023a\\u023b\\u023d\\u023e\\u0241\\u0243-\\u0246\\u0248\\u024a\\u024c\\u024e\\u0386\\u0388-\\u038a\\u038c\\u038e\\u038f\\u0391-\\u03a1\\u03a3-\\u03ab\\u03d2-\\u03d4\\u03d8\\u03da\\u03dc\\u03de\\u03e0\\u03e2\\u03e4\\u03e6\\u03e8\\u03ea\\u03ec\\u03ee\\u03f4\\u03f7\\u03f9\\u03fa\\u03fd-\\u042f\\u0460\\u0462\\u0464\\u0466\\u0468\\u046a\\u046c\\u046e\\u0470\\u0472\\u0474\\u0476\\u0478\\u047a\\u047c\\u047e\\u0480\\u048a\\u048c\\u048e\\u0490\\u0492\\u0494\\u0496\\u0498\\u049a\\u049c\\u049e\\u04a0\\u04a2\\u04a4\\u04a6\\u04a8\\u04aa\\u04ac\\u04ae\\u04b0\\u04b2\\u04b4\\u04b6\\u04b8\\u04ba\\u04bc\\u04be\\u04c0\\u04c1\\u04c3\\u04c5\\u04c7\\u04c9\\u04cb\\u04cd\\u04d0\\u04d2\\u04d4\\u04d6\\u04d8\\u04da\\u04dc\\u04de\\u04e0\\u04e2\\u04e4\\u04e6\\u04e8\\u04ea\\u04ec\\u04ee\\u04f0\\u04f2\\u04f4\\u04f6\\u04f8\\u04fa\\u04fc\\u04fe\\u0500\\u0502\\u0504\\u0506\\u0508\\u050a\\u050c\\u050e\\u0510\\u0512\\u0531-\\u0556\\u10a0-\\u10c5\\u1e00\\u1e02\\u1e04\\u1e06\\u1e08\\u1e0a\\u1e0c\\u1e0e\\u1e10\\u1e12\\u1e14\\u1e16\\u1e18\\u1e1a\\u1e1c\\u1e1e\\u1e20\\u1e22\\u1e24\\u1e26\\u1e28\\u1e2a\\u1e2c\\u1e2e\\u1e30\\u1e32\\u1e34\\u1e36\\u1e38\\u1e3a\\u1e3c\\u1e3e\\u1e40\\u1e42\\u1e44\\u1e46\\u1e48\\u1e4a\\u1e4c\\u1e4e\\u1e50\\u1e52\\u1e54\\u1e56\\u1e58\\u1e5a\\u1e5c\\u1e5e\\u1e60\\u1e62\\u1e64\\u1e66\\u1e68\\u1e6a\\u1e6c\\u1e6e\\u1e70\\u1e72\\u1e74\\u1e76\\u1e78\\u1e7a\\u1e7c\\u1e7e\\u1e80\\u1e82\\u1e84\\u1e86\\u1e88\\u1e8a\\u1e8c\\u1e8e\\u1e90\\u1e92\\u1e94\\u1ea0\\u1ea2\\u1ea4\\u1ea6\\u1ea8\\u1eaa\\u1eac\\u1eae\\u1eb0\\u1eb2\\u1eb4\\u1eb6\\u1eb8\\u1eba\\u1ebc\\u1ebe\\u1ec0\\u1ec2\\u1ec4\\u1ec6\\u1ec8\\u1eca\\u1ecc\\u1ece\\u1ed0\\u1ed2\\u1ed4\\u1ed6\\u1ed8\\u1eda\\u1edc\\u1ede\\u1ee0\\u1ee2\\u1ee4\\u1ee6\\u1ee8\\u1eea\\u1eec\\u1eee\\u1ef0\\u1ef2\\u1ef4\\u1ef6\\u1ef8\\u1f08-\\u1f0f\\u1f18-\\u1f1d\\u1f28-\\u1f2f\\u1f38-\\u1f3f\\u1f48-\\u1f4d\\u1f59\\u1f5b\\u1f5d\\u1f5f\\u1f68-\\u1f6f\\u1fb8-\\u1fbb\\u1fc8-\\u1fcb\\u1fd8-\\u1fdb\\u1fe8-\\u1fec\\u1ff8-\\u1ffb\\u2102\\u2107\\u210b-\\u210d\\u2110-\\u2112\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u2130-\\u2133\\u213e\\u213f\\u2145\\u2183\\u2c00-\\u2c2e\\u2c60\\u2c62-\\u2c64\\u2c67\\u2c69\\u2c6b\\u2c75\\u2c80\\u2c82\\u2c84\\u2c86\\u2c88\\u2c8a\\u2c8c\\u2c8e\\u2c90\\u2c92\\u2c94\\u2c96\\u2c98\\u2c9a\\u2c9c\\u2c9e\\u2ca0\\u2ca2\\u2ca4\\u2ca6\\u2ca8\\u2caa\\u2cac\\u2cae\\u2cb0\\u2cb2\\u2cb4\\u2cb6\\u2cb8\\u2cba\\u2cbc\\u2cbe\\u2cc0\\u2cc2\\u2cc4\\u2cc6\\u2cc8\\u2cca\\u2ccc\\u2cce\\u2cd0\\u2cd2\\u2cd4\\u2cd6\\u2cd8\\u2cda\\u2cdc\\u2cde\\u2ce0\\u2ce2\\uff21-\\uff3a\\u01c5\\u01c8\\u01cb\\u01f2\\u1f88-\\u1f8f\\u1f98-\\u1f9f\\u1fa8-\\u1faf\\u1fbc\\u1fcc\\u1ffc\\u02b0-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ee\\u037a\\u0559\\u0640\\u06e5\\u06e6\\u07f4\\u07f5\\u07fa\\u0e46\\u0ec6\\u10fc\\u17d7\\u1843\\u1d2c-\\u1d61\\u1d78\\u1d9b-\\u1dbf\\u2090-\\u2094\\u2d6f\\u3005\\u3031-\\u3035\\u303b\\u309d\\u309e\\u30fc-\\u30fe\\ua015\\ua717-\\ua71a\\uff70\\uff9e\\uff9f\\u01bb\\u01c0-\\u01c3\\u0294\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0621-\\u063a\\u0641-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u076d\\u0780-\\u07a5\\u07b1\\u07ca-\\u07ea\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u097b-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d28\\u0d2a-\\u0d39\\u0d60\\u0d61\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e45\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0edc\\u0edd\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6a\\u0f88-\\u0f8b\\u1000-\\u1021\\u1023-\\u1027\\u1029\\u102a\\u1050-\\u1055\\u10d0-\\u10fa\\u1100-\\u1159\\u115f-\\u11a2\\u11a8-\\u11f9\\u1200-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u1676\\u1681-\\u169a\\u16a0-\\u16ea\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17dc\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18a8\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19a9\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u2135-\\u2138\\u2d30-\\u2d65\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3006\\u303c\\u3041-\\u3096\\u309f\\u30a1-\\u30fa\\u30ff\\u3105-\\u312c\\u3131-\\u318e\\u31a0-\\u31b7\\u31f0-\\u31ff\\u3400\\u4db5\\u4e00\\u9fbb\\ua000-\\ua014\\ua016-\\ua48c\\ua800\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\uac00\\ud7a3\\uf900-\\ufa2d\\ufa30-\\ufa6a\\ufa70-\\ufad9\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff66-\\uff6f\\uff71-\\uff9d\\uffa0-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\\u0300-\\u036f\\u0483-\\u0486\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u0615\\u064b-\\u065e\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07eb-\\u07f3\\u0901\\u0902\\u093c\\u0941-\\u0948\\u094d\\u0951-\\u0954\\u0962\\u0963\\u0981\\u09bc\\u09c1-\\u09c4\\u09cd\\u09e2\\u09e3\\u0a01\\u0a02\\u0a3c\\u0a41\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a70\\u0a71\\u0a81\\u0a82\\u0abc\\u0ac1-\\u0ac5\\u0ac7\\u0ac8\\u0acd\\u0ae2\\u0ae3\\u0b01\\u0b3c\\u0b3f\\u0b41-\\u0b43\\u0b4d\\u0b56\\u0b82\\u0bc0\\u0bcd\\u0c3e-\\u0c40\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0cbc\\u0cbf\\u0cc6\\u0ccc\\u0ccd\\u0ce2\\u0ce3\\u0d41-\\u0d43\\u0d4d\\u0dca\\u0dd2-\\u0dd4\\u0dd6\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0f18\\u0f19\\u0f35\\u0f37\\u0f39\\u0f71-\\u0f7e\\u0f80-\\u0f84\\u0f86\\u0f87\\u0f90-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102d-\\u1030\\u1032\\u1036\\u1037\\u1039\\u1058\\u1059\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b7-\\u17bd\\u17c6\\u17c9-\\u17d3\\u17dd\\u180b-\\u180d\\u18a9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193b\\u1a17\\u1a18\\u1b00-\\u1b03\\u1b34\\u1b36-\\u1b3a\\u1b3c\\u1b42\\u1b6b-\\u1b73\\u1dc0-\\u1dca\\u1dfe\\u1dff\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20ef\\u302a-\\u302f\\u3099\\u309a\\ua806\\ua80b\\ua825\\ua826\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe23\\u0900-\\u097F\\u4e00-\\u9faf\\u3400-\\u4dbf\\uAC00-\\uD7AF";
                    var rx = new RegExp(System.String.concat("^[", L, "][", L, "|0-9|\\-]{2,47}$"));

                    return id != null && rx.test(id) && !CM.Helpers.ReservedPathNames.containsKey(id);
                },
                /**
                 * Splits a transaction ID into its date/payee/payer components
                 *
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {string}             id            The ID to parse
                 * @param   {System.DateTime}    createdUtc    Pointer to receive the creation date
                 * @param   {System.String}      payee         Pointer to receive the payee ID
                 * @param   {System.String}      payer         Pointer to receive the payer ID
                 * @return  {boolean}                          True if the ID was valid, otherwise false.
                 */
                TryParseTransactionID: function (id, createdUtc, payee, payer) {
                    createdUtc.v = System.DateTime.getMinValue();
                    payee.v = null;
                    payer.v = null;
                    if (id == null) {
                        return false;
                    }
                    var parts = System.String.split(id.trim(), [32].map(function(i) {{ return String.fromCharCode(i); }}));
                    if (parts.length !== 3) {
                        return false;
                    }
                    if (!CM.Helpers.DateFromISO8601(parts[System.Array.index(0, parts)], createdUtc) || !CM.Helpers.IsIDValid(parts[System.Array.index(1, parts)]) || !CM.Helpers.IsIDValid(parts[System.Array.index(2, parts)])) {
                        return false;
                    }
                    payee.v = parts[System.Array.index(1, parts)];
                    payer.v = parts[System.Array.index(2, parts)];
                    return true;
                },
                /**
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {Array.<number>}    a    
                 * @param   {Array.<number>}    b
                 * @return  {boolean}
                 */
                IsHashEqual: function (a, b) {
                    if (a == null && b == null) {
                        return true;
                    }
                    if ((a == null) !== (b == null)) {
                        return false;
                    }
                    if (a.length !== b.length) {
                        return false;
                    }
                    for (var i = 0; i < b.length; i = (i + 1) | 0) {
                        if (b[System.Array.index(i, b)] !== a[System.Array.index(i, a)]) {
                            return false;
                        }
                    }
                    return true;
                },
                IsLocalNetworkAddress: function (ep) {
                    if (ep == null) {
                        return false;
                    }
                    return System.String.startsWith(ep, "0.") || System.String.startsWith(ep, "127.0.") || System.String.startsWith(ep, ":") || System.String.startsWith(ep, "192.168.");
                },
                DHT_ID: function (value) {
                    var b = System.Linq.Enumerable.from(CM.Cryptography.MD5.ComputeHash(System.Text.Encoding.UTF8.GetBytes(value.toLowerCase()))).take(CM.Constants.DHTIDSize).toArray(System.Byte);
                    return b;
                },
                DHT_IDForEndpoint: function (ipAddressAndPort) {
                    var value = ipAddressAndPort;
                    if (true) {
                        var idx = System.String.indexOf(value, String.fromCharCode(58));
                        if (idx > -1) {
                            value = value.substr(0, idx);
                        }
                    }
                    return CM.Helpers.DHT_ID(value);
                },
                /**
                 * Returns the copy having the highest time-stamp and whether or not
                 the DHT network presently agrees with the record. IsTransientState
                 is set to true if MinimumNumberOfCopies are not satisfied. In which
                 case the item should be flagged at the presentation layer.
                 *
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {Function}                             T         An IStorable Message type.
                 * @param   {System.Collections.Generic.List$1}    copies    The collection of items to sort
                 * @param   {T}                                    latest    Pointer to receive the latest item.
                 * @return  {CM.CMResult}
                 */
                CheckConsensus: function (T, copies, latest) {
                    latest.v = null;
                    if (copies.Count === 0) {
                        return CM.CMResult.E_Item_Not_Found.$clone();
                    }
                    // Consensus is simply:
                    // - pick the "newest",
                    // - make sure that a min number of copies agree with that version
                    copies.sort($asm.$.CM.Helpers.f1);

                    var best = copies.getItem(0);

                    // Omit any stale results from the count
                    var latestCopies = System.Linq.Enumerable.from(copies).where(function (x) {
                            return Bridge.equals(x.CM$IStorable$UpdatedUtc, best.CM$IStorable$UpdatedUtc);
                        }).toList(T);
                    var count = { v : latestCopies.Count };
                    // For accounts we also want to factor in soft calculations
                    if (Bridge.is(best, CM.Schema.Account)) {
                        var calcs = new (System.Collections.Generic.List$1(CM.Schema.AccountCalculations))();
                        for (var i = 0; i < latestCopies.Count; i = (i + 1) | 0) {
                            var a = Bridge.as(latestCopies.getItem(i), CM.Schema.Account);
                            if (a.AccountCalculations == null) {
                                a.AccountCalculations = new CM.Schema.AccountCalculations(a);
                            }
                            calcs.add(a.AccountCalculations);
                        }
                        calcs.sort($asm.$.CM.Helpers.f2);
                        // The one with the newest transaction is probably correct
                        // but not necessarily if it's not synced older transactions.
                        var bestCalc = calcs.getItem(0);
                        var latestCalcs = System.Linq.Enumerable.from(calcs).where(function (x) {
                                return Bridge.equals(System.Nullable.getValueOrDefault(x.LastTransactionUtc, System.DateTime.getDefaultValue()), System.Nullable.getValueOrDefault(bestCalc.LastTransactionUtc, System.DateTime.getDefaultValue()));
                            }).toList(CM.Schema.AccountCalculations);
                        // Which ones have credits + debits that agree
                        var consensusCalcs = CM.Schema.AccountCalculations.GetConsensus(latestCalcs, count);
                        best = Bridge.as(consensusCalcs.Account, T);
                    }
                    latest.v = best;
                    latest.v.CM$IStorable$ConsensusCount = count.v;
                    return latest.v.CM$IStorable$ConsensusOK ? CM.CMResult.S_OK.$clone() : CM.CMResult.S_Item_Transient.$clone();
                },
                /**
                 * Gets the current depreciated value of the transaction, regardless of its status.
                 *
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {System.DateTime}    reportingTimeUtc         Typically DateTime.UtcNow, but may be a historical point in time for history analysis.
                 * @param   {System.DateTime}    transactionCreatedUtc    The creation date of the transaction.
                 * @param   {number}             amount                   The original amount of the transaction.
                 * @return  {number}                                      A current amount with demurrage applied.
                 */
                CalculateTransactionDepreciatedAmount: function (reportingTimeUtc, transactionCreatedUtc, amount) {
                    // A linear demurrage begins 12 months after Created UTC, over a following 12
                    // month period.
                    // DEPRECIATE() = MIN(1, MAX(0, 1 - ( (DAYS-SINCE-CREATION - 365) / 365 ))) * AMOUNT
                    var daysSinceCreation = Bridge.Int.clip32((System.DateTime.subdd(reportingTimeUtc, transactionCreatedUtc)).getTotalDays());
                    return System.Decimal.toDecimalPlaces(System.Decimal.min(System.Decimal(1), System.Decimal.max(System.Decimal(0), System.Decimal(1).sub((System.Decimal((((daysSinceCreation - 365) | 0))).div(System.Decimal(365.0)))))).mul(amount), 6, 6);
                },
                /**
                 * Gets the current depreciated value of the transaction for the payer's side
                 according to the transaction date and status.
                 *
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {System.DateTime}          reportingTimeUtc         Typically DateTime.UtcNow, but may be a historical point in time for history analysis.
                 * @param   {System.DateTime}          transactionCreatedUtc    The creation date of the transaction.
                 * @param   {number}                   amount                   The original amount of the transaction.
                 * @param   {CM.Schema.PayeeStatus}    payeeStatus              The current payee status.
                 * @param   {CM.Schema.PayerStatus}    payerStatus              The current payer status.
                 * @return  {number}                                            A depreciated amount or 0 if it should not currently account against the payer's balance.
                 */
                CalculateTransactionDepreciatedAmountForPayer: function (reportingTimeUtc, transactionCreatedUtc, amount, payeeStatus, payerStatus) {
                    switch (payeeStatus) {
                        case CM.Schema.PayeeStatus.NotSet: 
                        case CM.Schema.PayeeStatus.Accept:  // Unaccepted payments count against payer balance until we know otherwise. // OK.
                            break;
                        case CM.Schema.PayeeStatus.Refund: 
                        case CM.Schema.PayeeStatus.Decline: 
                            return System.Decimal(0);
                    }
                    //
                    // When payers issue a Dispute they get their money back, but the payee
                    // retains their money also, unless they choose to refund amicably.
                    //
                    // Non-refunded Disputed transactions reflect badly on the seller as well
                    // as the buyer.
                    //
                    switch (payerStatus) {
                        case CM.Schema.PayerStatus.NotSet: 
                        case CM.Schema.PayerStatus.Dispute: 
                        case CM.Schema.PayerStatus.Cancel: 
                            return System.Decimal(0);
                        case CM.Schema.PayerStatus.Accept: 
                            break;
                    }

                    return CM.Helpers.CalculateTransactionDepreciatedAmount(reportingTimeUtc, transactionCreatedUtc, amount);
                },
                /**
                 * Gets the current depreciated value of the transaction for the payee's side
                 according to the transaction date and status.
                 *
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {System.DateTime}          reportingTimeUtc         Typically DateTime.UtcNow, but may be a historical point in time for history analysis.
                 * @param   {System.DateTime}          transactionCreatedUtc    The creation date of the transaction.
                 * @param   {number}                   amount                   The original amount of the transaction.
                 * @param   {CM.Schema.PayeeStatus}    payeeStatus              The current payee status.
                 * @return  {number}                                            A depreciated amount or 0 if it should not currently account against the payee's balance.
                 */
                CalculateTransactionDepreciatedAmountForPayee: function (reportingTimeUtc, transactionCreatedUtc, amount, payeeStatus) {
                    switch (payeeStatus) {
                        case CM.Schema.PayeeStatus.Accept: 
                            break;
                        case CM.Schema.PayeeStatus.NotSet: 
                        case CM.Schema.PayeeStatus.Refund: 
                        case CM.Schema.PayeeStatus.Decline: 
                            return System.Decimal(0);
                    }

                    // When payers issue a Dispute they get their money back, but the payee
                    // retains their money also, unless they choose to refund amicably.
                    //
                    // Non-refunded Disputed transactions reflect badly on the seller as well
                    // as the buyer.
                    return CM.Helpers.CalculateTransactionDepreciatedAmount(reportingTimeUtc, transactionCreatedUtc, amount);
                },
                /**
                 * Because of demurrage over a 12 month period after the first year on all
                 transactions, we always consider your balance to be based on a two
                 year period. So the calculation for balance is simply
                 'BasicYearlyAllowance x 2 + RecentCredits - RecentDebits'
                 where credits and debits both have their demurrage depreciated amounts
                 summed.
                 *
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {number}    recentCredits    
                 * @param   {number}    recentDebits
                 * @return  {number}
                 */
                CalculateAccountBalance: function (recentCredits, recentDebits) {
                    return System.Decimal(1200).add(recentCredits).sub(recentDebits);
                },
                /**
                 * Returns true if the specified old and new PayeeStatus values are valid.
                 *
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {CM.Schema.PayeeStatus}    oldStatus    The old or previous PayeeStatus
                 * @param   {CM.Schema.PayeeStatus}    newStatus    The new or current PayeeStatus
                 * @return  {boolean}
                 */
                IsPayeeStatusChangeAllowed: function (oldStatus, newStatus) {

                    if (oldStatus === newStatus) {
                        return true;
                    } // no change

                    switch (newStatus) {
                        case CM.Schema.PayeeStatus.NotSet: 
                            return oldStatus === CM.Schema.PayeeStatus.NotSet;
                        case CM.Schema.PayeeStatus.Accept: 
                            return oldStatus === CM.Schema.PayeeStatus.NotSet || oldStatus === CM.Schema.PayeeStatus.Decline;
                        case CM.Schema.PayeeStatus.Decline: 
                            return oldStatus === CM.Schema.PayeeStatus.NotSet;
                        case CM.Schema.PayeeStatus.Refund: 
                            return oldStatus === CM.Schema.PayeeStatus.Accept;
                    }

                    throw new System.NotImplementedException("Unrecognised PayeeStatus " + System.Enum.toString(CM.Schema.PayeeStatus, newStatus));
                },
                /**
                 * Returns true if the specified old and new PayerStatus values are valid.
                 *
                 * @static
                 * @public
                 * @this CM.Helpers
                 * @memberof CM.Helpers
                 * @param   {CM.Schema.PayerStatus}    oldStatus    The old or previous PayerStatus
                 * @param   {CM.Schema.PayerStatus}    newStatus    The new or current PayerStatus
                 * @return  {boolean}
                 */
                IsPayerStatusChangeAllowed: function (oldStatus, newStatus) {

                    if (oldStatus === newStatus && newStatus !== CM.Schema.PayerStatus.NotSet) {
                        return true;
                    }

                    switch (newStatus) {
                        case CM.Schema.PayerStatus.NotSet: 
                            // Only a payer is allowed to initialise a transaction and payers must always be
                            // in "Accept" during creation. Therefore NotSet is always disallowed. It is only
                            // defined for completeness/programming convenience.
                            return false;
                        case CM.Schema.PayerStatus.Accept: 
                            return oldStatus === CM.Schema.PayerStatus.NotSet;
                        case CM.Schema.PayerStatus.Dispute: 
                            return oldStatus === CM.Schema.PayerStatus.Accept;
                        case CM.Schema.PayerStatus.Cancel: 
                            return oldStatus === CM.Schema.PayerStatus.Accept;
                    }

                    throw new System.NotImplementedException("Unrecognised PayerStatus " + System.Enum.toString(CM.Schema.PayerStatus, newStatus));
                },
                CalculateRecentReputation: function (recentCredits, recentDebits, val, status) {
                    // MIN(1, MAX(0, (BASIC-YEARLY-INCOME * 2 + CREDITS - DEBITS) / (BASIC-YEARLY-INCOME * 4))) * 100
                    val.v = System.Decimal.toDecimalPlaces(System.Decimal.max(System.Decimal(0), System.Decimal.min(System.Decimal(1), (System.Decimal(1200).add(recentCredits).sub(recentDebits)).div(System.Decimal((2400))))).mul(System.Decimal(100)), 1, 6);
                    // 1 year of basic income is 25%
                    status.v = val.v.gte(System.Decimal(25)) ? CM.RecentReputation.Good : val.v.gt(System.Decimal(0)) ? CM.RecentReputation.Overspent : CM.RecentReputation.Bad;
                }
            }
        }
    });

    Bridge.ns("CM.Helpers", $asm.$);

    Bridge.apply($asm.$.CM.Helpers, {
        f1: function (a, b) {
            return Bridge.Int.mul(Bridge.compare(a.CM$IStorable$UpdatedUtc, b.CM$IStorable$UpdatedUtc), -1);
        },
        f2: function (a1, b) {
            return Bridge.Int.mul(Bridge.compare(System.Nullable.getValueOrDefault(a1.LastTransactionUtc, System.DateTime.getDefaultValue()), System.Nullable.getValueOrDefault(b.LastTransactionUtc, System.DateTime.getDefaultValue())), -1);
        }
    });

    /**
     * Represents all cryptography functions that are needed by CM. Native crypto library functions
     can be swapped in using this interface instead of using the slower portable reference
     implementations. Many of these operation can be very expensive and slow ARM hardware, so some
     ICryptoFunctions take an asynchronous worker pattern, even though some platforms will be able
     to run very fast and synchronously.
     *
     * @abstract
     * @public
     * @class CM.ICryptoFunctions
     */
    Bridge.define("CM.ICryptoFunctions", {
        $kind: "interface"
    });

    Bridge.define("CM.ISO31662", {
        statics: {
            fields: {
                _Lookup: null,
                Values: null,
                Data: null
            },
            ctors: {
                init: function () {
                    this.Data = "\"AF-BDS\",\"Afghanistan/Badakhshan\"\r\n\"AF-BDG\",\"Afghanistan/Badghis\"\r\n\"AF-BGL\",\"Afghanistan/Baghlan\"\r\n\"AF-BAL\",\"Afghanistan/Balkh\"\r\n\"AF-BAM\",\"Afghanistan/Bamian\"\r\n\"AF-DAY\",\"Afghanistan/Daykondi\"\r\n\"AF-FRA\",\"Afghanistan/Farah\"\r\n\"AF-FYB\",\"Afghanistan/Faryab\"\r\n\"AF-GHA\",\"Afghanistan/Ghazni\"\r\n\"AF-GHO\",\"Afghanistan/Ghowr\"\r\n\"AF-HEL\",\"Afghanistan/Helmand\"\r\n\"AF-HER\",\"Afghanistan/Herat\"\r\n\"AF-JOW\",\"Afghanistan/Jowzjan\"\r\n\"AF-KAB\",\"Afghanistan/Kabol\"\r\n\"AF-KAN\",\"Afghanistan/Kandahar\"\r\n\"AF-KAP\",\"Afghanistan/Kapisa\"\r\n\"AF-KHO\",\"Afghanistan/Khowst\"\r\n\"AF-KNR\",\"Afghanistan/Konar\"\r\n\"AF-KDZ\",\"Afghanistan/Kondoz\"\r\n\"AF-LAG\",\"Afghanistan/Laghman\"\r\n\"AF-LOG\",\"Afghanistan/Lowgar\"\r\n\"AF-NAN\",\"Afghanistan/Nangarhar\"\r\n\"AF-NTM\",\"Afghanistan/Nimruz\"\r\n\"AF-NUR\",\"Afghanistan/Nurestan\"\r\n\"AF-URU\",\"Afghanistan/Oruzgan\"\r\n\"AF-PIA\",\"Afghanistan/Paktia\"\r\n\"AF-PKA\",\"Afghanistan/Paktika\"\r\n\"AF-PAN\",\"Afghanistan/Panjshir\"\r\n\"AF-PAR\",\"Afghanistan/Parvan\"\r\n\"AF-SAM\",\"Afghanistan/Samangan\"\r\n\"AF-SAR\",\"Afghanistan/Sar-e Pol\"\r\n\"AF-TAK\",\"Afghanistan/Takhar\"\r\n\"AF-WAR\",\"Afghanistan/Vardak\"\r\n\"AF-ZAB\",\"Afghanistan/Zabol\"\r\n\"AL-01\",\"Albania/Berat\"\r\n\"AL-09\",\"Albania/Diber\"\r\n\"AL-02\",\"Albania/Durres\"\r\n\"AL-03\",\"Albania/Elbasan\"\r\n\"AL-04\",\"Albania/Fier\"\r\n\"AL-05\",\"Albania/Gjirokaster\"\r\n\"AL-06\",\"Albania/Korce\"\r\n\"AL-07\",\"Albania/Kukes\"\r\n\"AL-08\",\"Albania/Lezhe\"\r\n\"AL-10\",\"Albania/Shkoder\"\r\n\"AL-11\",\"Albania/Tirane\"\r\n\"AL-12\",\"Albania/Vlore\"\r\n\"DZ-01\",\"Algeria/Adrar\"\r\n\"DZ-44\",\"Algeria/Ain Defla\"\r\n\"DZ-46\",\"Algeria/Ain Temouchent\"\r\n\"DZ-16\",\"Algeria/Alger\"\r\n\"DZ-23\",\"Algeria/Annaba\"\r\n\"DZ-05\",\"Algeria/Batna\"\r\n\"DZ-08\",\"Algeria/Bechar\"\r\n\"DZ-06\",\"Algeria/Bejaia\"\r\n\"DZ-07\",\"Algeria/Biskra\"\r\n\"DZ-09\",\"Algeria/Blida\"\r\n\"DZ-34\",\"Algeria/Bordj Bou Arreridj\"\r\n\"DZ-10\",\"Algeria/Bouira\"\r\n\"DZ-35\",\"Algeria/Boumerdes\"\r\n\"DZ-02\",\"Algeria/Chlef\"\r\n\"DZ-25\",\"Algeria/Constantine\"\r\n\"DZ-17\",\"Algeria/Djelfa\"\r\n\"DZ-32\",\"Algeria/El Bayadh\"\r\n\"DZ-39\",\"Algeria/El Oued\"\r\n\"DZ-36\",\"Algeria/El Tarf\"\r\n\"DZ-47\",\"Algeria/Ghardaia\"\r\n\"DZ-24\",\"Algeria/Guelma\"\r\n\"DZ-33\",\"Algeria/Illizi\"\r\n\"DZ-40\",\"Algeria/Khenchela\"\r\n\"DZ-03\",\"Algeria/Laghouat\"\r\n\"DZ-29\",\"Algeria/Mascara\"\r\n\"DZ-26\",\"Algeria/Medea\"\r\n\"DZ-43\",\"Algeria/Mila\"\r\n\"DZ-27\",\"Algeria/Mostaganem\"\r\n\"DZ-28\",\"Algeria/M'sila\"\r\n\"DZ-45\",\"Algeria/Naama\"\r\n\"DZ-31\",\"Algeria/Oran\"\r\n\"DZ-30\",\"Algeria/Ouargla\"\r\n\"DZ-04\",\"Algeria/Oum el Bouaghi\"\r\n\"DZ-48\",\"Algeria/Relizane\"\r\n\"DZ-20\",\"Algeria/Saida\"\r\n\"DZ-19\",\"Algeria/Setif\"\r\n\"DZ-22\",\"Algeria/Sidi Bel Abbes\"\r\n\"DZ-21\",\"Algeria/Skikda\"\r\n\"DZ-41\",\"Algeria/Souk Ahras\"\r\n\"DZ-11\",\"Algeria/Tamanghasset\"\r\n\"DZ-12\",\"Algeria/Tebessa\"\r\n\"DZ-14\",\"Algeria/Tiaret\"\r\n\"DZ-37\",\"Algeria/Tindouf\"\r\n\"DZ-42\",\"Algeria/Tipaza\"\r\n\"DZ-38\",\"Algeria/Tissemsilt\"\r\n\"DZ-15\",\"Algeria/Tizi Ouzou\"\r\n\"DZ-13\",\"Algeria/Tlemcen\"\r\n\"AD-07\",\"Andorra/Andorra la Vella\"\r\n\"AD-03\",\"Andorra/Encamp\"\r\n\"AD-08\",\"Andorra/Escaldes-Engordany\"\r\n\"AD-04\",\"Andorra/La Massana\"\r\n\"AD-05\",\"Andorra/Ordino\"\r\n\"AD-06\",\"Andorra/Sant Julia de Loria\"\r\n\"AO-BGO\",\"Angola/Bengo\"\r\n\"AO-BGU\",\"Angola/Benguela\"\r\n\"AO-BIE\",\"Angola/Bie\"\r\n\"AO-CAB\",\"Angola/Cabinda\"\r\n\"AO-CCU\",\"Angola/Cuando Cubango\"\r\n\"AO-CNO\",\"Angola/Cuanza Norte\"\r\n\"AO-CUS\",\"Angola/Cuanza Sul\"\r\n\"AO-CNN\",\"Angola/Cunene\"\r\n\"AO-HUA\",\"Angola/Huambo\"\r\n\"AO-HUI\",\"Angola/Huila\"\r\n\"AO-LUA\",\"Angola/Luanda\"\r\n\"AO-LNO\",\"Angola/Lunda Norte\"\r\n\"AO-LSU\",\"Angola/Lunda Sul\"\r\n\"AO-MAL\",\"Angola/Malanje\"\r\n\"AO-MOX\",\"Angola/Moxico\"\r\n\"AO-NAM\",\"Angola/Namibe\"\r\n\"AO-UIG\",\"Angola/Uige\"\r\n\"AO-ZAI\",\"Angola/Zaire\"\r\n\"AG-10\",\"Antigua and Barbuda/Antigua and Barbuda\"\r\n\"AG-04\",\"Antigua and Barbuda/Saint John\"\r\n\"AG-05\",\"Antigua and Barbuda/Saint Mary\"\r\n\"AG-06\",\"Antigua and Barbuda/Saint Paul\"\r\n\"AR-B\",\"Argentina/Buenos Aires\"\r\n\"AR-K\",\"Argentina/Catamarca\"\r\n\"AR-H\",\"Argentina/Chaco\"\r\n\"AR-U\",\"Argentina/Chubut\"\r\n\"AR-X\",\"Argentina/Cordoba\"\r\n\"AR-W\",\"Argentina/Corrientes\"\r\n\"AR-E\",\"Argentina/Entre Rios\"\r\n\"AR-P\",\"Argentina/Formosa\"\r\n\"AR-Y\",\"Argentina/Jujuy\"\r\n\"AR-L\",\"Argentina/La Pampa\"\r\n\"AR-F\",\"Argentina/La Rioja\"\r\n\"AR-M\",\"Argentina/Mendoza\"\r\n\"AR-N\",\"Argentina/Misiones\"\r\n\"AR-Q\",\"Argentina/Neuquen\"\r\n\"AR-R\",\"Argentina/Rio Negro\"\r\n\"AR-A\",\"Argentina/Salta\"\r\n\"AR-J\",\"Argentina/San Juan\"\r\n\"AR-D\",\"Argentina/San Luis\"\r\n\"AR-Z\",\"Argentina/Santa Cruz\"\r\n\"AR-S\",\"Argentina/Santa Fe\"\r\n\"AR-G\",\"Argentina/Santiago del Estero\"\r\n\"AR-V\",\"Argentina/Tierra del Fuego\"\r\n\"AR-T\",\"Argentina/Tucuman\"\r\n\"AM-AG\",\"Armenia/Aragatsotn\"\r\n\"AM-AR\",\"Armenia/Ararat\"\r\n\"AM-AV\",\"Armenia/Armavir\"\r\n\"AM-GR\",\"Armenia/Geghark'unik'\"\r\n\"AM-KT\",\"Armenia/Kotayk'\"\r\n\"AM-LO\",\"Armenia/Lorri\"\r\n\"AM-SH\",\"Armenia/Shirak\"\r\n\"AM-SU\",\"Armenia/Syunik'\"\r\n\"AM-TV\",\"Armenia/Tavush\"\r\n\"AM-VD\",\"Armenia/Vayots' Dzor\"\r\n\"AM-ER\",\"Armenia/Yerevan\"\r\n\"AU-ACT\",\"Australia/Australian Capital Territory\"\r\n\"AU-NSW\",\"Australia/New South Wales\"\r\n\"AU-NT\",\"Australia/Northern Territory\"\r\n\"AU-QLD\",\"Australia/Queensland\"\r\n\"AU-SA\",\"Australia/South Australia\"\r\n\"AU-TAS\",\"Australia/Tasmania\"\r\n\"AU-VIC\",\"Australia/Victoria\"\r\n\"AU-WA\",\"Australia/Western Australia\"\r\n\"AT-1\",\"Austria/Burgenland\"\r\n\"AT-2\",\"Austria/Karnten\"\r\n\"AT-3\",\"Austria/Niederosterreich\"\r\n\"AT-4\",\"Austria/Oberosterreich\"\r\n\"AT-5\",\"Austria/Salzburg\"\r\n\"AT-6\",\"Austria/Steiermark\"\r\n\"AT-7\",\"Austria/Tirol\"\r\n\"AT-8\",\"Austria/Vorarlberg\"\r\n\"AT-9\",\"Austria/Wien\"\r\n\"AZ-ABS\",\"Azerbaijan/Abseron\"\r\n\"AZ-AGC\",\"Azerbaijan/Agcabadi\"\r\n\"AZ-AGM\",\"Azerbaijan/Agdam\"\r\n\"AZ-AGS\",\"Azerbaijan/Agdas\"\r\n\"AZ-AGA\",\"Azerbaijan/Agstafa\"\r\n\"AZ-AGU\",\"Azerbaijan/Agsu\"\r\n\"AZ-AB\",\"Azerbaijan/Ali Bayramli\"\r\n\"AZ-AST\",\"Azerbaijan/Astara\"\r\n\"AZ-BA\",\"Azerbaijan/Baki\"\r\n\"AZ-BAL\",\"Azerbaijan/Balakan\"\r\n\"AZ-BAR\",\"Azerbaijan/Barda\"\r\n\"AZ-BEY\",\"Azerbaijan/Beylaqan\"\r\n\"AZ-BIL\",\"Azerbaijan/Bilasuvar\"\r\n\"AZ-CAB\",\"Azerbaijan/Cabrayil\"\r\n\"AZ-CAL\",\"Azerbaijan/Calilabad\"\r\n\"AZ-DAS\",\"Azerbaijan/Daskasan\"\r\n\"AZ-FUZ\",\"Azerbaijan/Fuzuli\"\r\n\"AZ-GAD\",\"Azerbaijan/Gadabay\"\r\n\"AZ-GA\",\"Azerbaijan/Ganca\"\r\n\"AZ-GOR\",\"Azerbaijan/Goranboy\"\r\n\"AZ-GOY\",\"Azerbaijan/Goycay\"\r\n\"AZ-HAC\",\"Azerbaijan/Haciqabul\"\r\n\"AZ-IMI\",\"Azerbaijan/Imisli\"\r\n\"AZ-ISM\",\"Azerbaijan/Ismayilli\"\r\n\"AZ-KAL\",\"Azerbaijan/Kalbacar\"\r\n\"AZ-LAC\",\"Azerbaijan/Lacin\"\r\n\"AZ-LAN\",\"Azerbaijan/Lankaran\"\r\n\"AZ-LER\",\"Azerbaijan/Lerik\"\r\n\"AZ-MAS\",\"Azerbaijan/Masalli\"\r\n\"AZ-MI\",\"Azerbaijan/Mingacevir\"\r\n\"AZ-NA\",\"Azerbaijan/Naftalan\"\r\n\"AZ-NV\",\"Azerbaijan/Naxcivan\"\r\n\"AZ-NEF\",\"Azerbaijan/Neftcala\"\r\n\"AZ-OGU\",\"Azerbaijan/Oguz\"\r\n\"AZ-QAB\",\"Azerbaijan/Qabala\"\r\n\"AZ-QAX\",\"Azerbaijan/Qax\"\r\n\"AZ-QAZ\",\"Azerbaijan/Qazax\"\r\n\"AZ-QOB\",\"Azerbaijan/Qobustan\"\r\n\"AZ-QBA\",\"Azerbaijan/Quba\"\r\n\"AZ-QBI\",\"Azerbaijan/Qubadli\"\r\n\"AZ-QUS\",\"Azerbaijan/Qusar\"\r\n\"AZ-SAT\",\"Azerbaijan/Saatli\"\r\n\"AZ-SAB\",\"Azerbaijan/Sabirabad\"\r\n\"AZ-SAK\",\"Azerbaijan/Saki\"\r\n\"AZ-SAL\",\"Azerbaijan/Salyan\"\r\n\"AZ-SMI\",\"Azerbaijan/Samaxi\"\r\n\"AZ-SKR\",\"Azerbaijan/Samkir\"\r\n\"AZ-SMX\",\"Azerbaijan/Samux\"\r\n\"AZ-SM\",\"Azerbaijan/Sumqayit\"\r\n\"AZ-SUS\",\"Azerbaijan/Susa\"\r\n\"AZ-TAR\",\"Azerbaijan/Tartar\"\r\n\"AZ-TOV\",\"Azerbaijan/Tovuz\"\r\n\"AZ-UCA\",\"Azerbaijan/Ucar\"\r\n\"AZ-XAC\",\"Azerbaijan/Xacmaz\"\r\n\"AZ-XA\",\"Azerbaijan/Xankandi\"\r\n\"AZ-XAN\",\"Azerbaijan/Xanlar\"\r\n\"AZ-XTZ\",\"Azerbaijan/Xizi\"\r\n\"AZ-XCI\",\"Azerbaijan/Xocali\"\r\n\"AZ-XVD\",\"Azerbaijan/Xocavand\"\r\n\"AZ-YAR\",\"Azerbaijan/Yardimli\"\r\n\"AZ-YEV\",\"Azerbaijan/Yevlax\"\r\n\"AZ-ZAN\",\"Azerbaijan/Zangilan\"\r\n\"AZ-ZAQ\",\"Azerbaijan/Zaqatala\"\r\n\"AZ-ZAR\",\"Azerbaijan/Zardab\"\r\n\"BS-FP\",\"Bahamas/Freeport\"\r\n\"BS-FC\",\"Bahamas/Fresh Creek\"\r\n\"BS-HI\",\"Bahamas/Harbour Island\"\r\n\"BS-HR\",\"Bahamas/High Rock\"\r\n\"BS-LI\",\"Bahamas/Long Island\"\r\n\"BS-MH\",\"Bahamas/Marsh Harbour\"\r\n\"BS-NP\",\"Bahamas/New Providence\"\r\n\"BS-RS\",\"Bahamas/Rock Sound\"\r\n\"BH-13\",\"Bahrain/Al Asimah\"\r\n\"BH-15\",\"Bahrain/Al Muharraq\"\r\n\"BH-16\",\"Bahrain/Al Wusta\"\r\n\"BH-17\",\"Bahrain/Ash Shamaliyah\"\r\n\"BD-A\",\"Bangladesh/Barisal\"\r\n\"BD-B\",\"Bangladesh/Chittagong\"\r\n\"BD-C\",\"Bangladesh/Dhaka\"\r\n\"BD-D\",\"Bangladesh/Khulna\"\r\n\"BD-E\",\"Bangladesh/Rajshahi\"\r\n\"BD-F\",\"Bangladesh/Rangpur\"\r\n\"BD-G\",\"Bangladesh/Sylhet\"\r\n\"BB-01\",\"Barbados/Christ Church\"\r\n\"BB-04\",\"Barbados/Saint James\"\r\n\"BB-06\",\"Barbados/Saint Joseph\"\r\n\"BB-08\",\"Barbados/Saint Michael\"\r\n\"BB-09\",\"Barbados/Saint Peter\"\r\n\"BY-BR\",\"Belarus/Brestskaya Voblasts'\"\r\n\"BY-HO\",\"Belarus/Homyel'skaya Voblasts'\"\r\n\"BY-HR\",\"Belarus/Hrodzyenskaya Voblasts'\"\r\n\"BY-MA\",\"Belarus/Mahilyowskaya Voblasts'\"\r\n\"BY-MI\",\"Belarus/Minskaya Voblasts'\"\r\n\"BY-VI\",\"Belarus/Vitsyebskaya Voblasts'\"\r\n\"BE-VAN\",\"Belgium/Antwerpen\"\r\n\"BE-WBR\",\"Belgium/Brabant Wallon\"\r\n\"BE-BRU\",\"Belgium/Brussels Hoofdstedelijk Gewest\"\r\n\"BE-WHT\",\"Belgium/Hainaut\"\r\n\"BE-WLG\",\"Belgium/Liege\"\r\n\"BG-VLI\",\"Belgium/Limburg\"\r\n\"BE-WLX\",\"Belgium/Luxembourg\"\r\n\"BE-WNA\",\"Belgium/Namur\"\r\n\"BE-VOV\",\"Belgium/Oost-Vlaanderen\"\r\n\"BE-VBR\",\"Belgium/Vlaams-Brabant\"\r\n\"BE-VWV\",\"Belgium/West-Vlaanderen\"\r\n\"BZ-BZ\",\"Belize/Belize\"\r\n\"BZ-CY\",\"Belize/Cayo\"\r\n\"BZ-CZL\",\"Belize/Corozal\"\r\n\"BZ-OW\",\"Belize/Orange Walk\"\r\n\"BZ-SC\",\"Belize/Stann Creek\"\r\n\"BZ-TOL\",\"Belize/Toledo\"\r\n\"BJ-AL\",\"Benin/Alibori\"\r\n\"BJ-AK\",\"Benin/Atakora\"\r\n\"BJ-AQ\",\"Benin/Atlantique\"\r\n\"BJ-BO\",\"Benin/Borgou\"\r\n\"BJ-CO\",\"Benin/Collines\"\r\n\"BJ-DO\",\"Benin/Donga\"\r\n\"BJ-KO\",\"Benin/Kouffo\"\r\n\"BJ-LI\",\"Benin/Littoral\"\r\n\"BJ-MO\",\"Benin/Mono\"\r\n\"BJ-OU\",\"Benin/Oueme\"\r\n\"BJ-PL\",\"Benin/Plateau\"\r\n\"BJ-ZO\",\"Benin/Zou\"\r\n\"BT-12\",\"Bhutan/Chhukha\"\r\n\"BT-22\",\"Bhutan/Daga\"\r\n\"BT-GA\",\"Bhutan/Gasa\"\r\n\"BT-13\",\"Bhutan/Ha\"\r\n\"BT-42\",\"Bhutan/Mongar\"\r\n\"BT-11\",\"Bhutan/Paro\"\r\n\"BT-23\",\"Bhutan/Punakha\"\r\n\"BT-34\",\"Bhutan/Shemgang\"\r\n\"BT-15\",\"Bhutan/Thimphu\"\r\n\"BT-32\",\"Bhutan/Tongsa\"\r\n\"BT-TY\",\"Bhutan/Trashi Yangste\"\r\n\"BO-H\",\"Bolivia, Plurinational State of/Chuquisaca\"\r\n\"BO-C\",\"Bolivia, Plurinational State of/Cochabamba\"\r\n\"BO-B\",\"Bolivia, Plurinational State of/El Beni\"\r\n\"BO-L\",\"Bolivia, Plurinational State of/La Paz\"\r\n\"BO-O\",\"Bolivia, Plurinational State of/Oruro\"\r\n\"BO-N\",\"Bolivia, Plurinational State of/Pando\"\r\n\"BO-P\",\"Bolivia, Plurinational State of/Potosi\"\r\n\"BO-S\",\"Bolivia, Plurinational State of/Santa Cruz\"\r\n\"BO-T\",\"Bolivia, Plurinational State of/Tarija\"\r\n\"BQ-BO\",\"Bonaire, Sint Eustatius and Saba/Bonaire\"\r\n\"BQ-SA\",\"Bonaire, Sint Eustatius and Saba/Saba\"\r\n\"BQ-SE\",\"Bonaire, Sint Eustatius and Saba/Sint Eustatius\"\r\n\"BA-BIH\",\"Bosnia and Herzegovina/Federation of Bosnia and Herzegovina\"\r\n\"BA-SRP\",\"Bosnia and Herzegovina/Republika Srpska\"\r\n\"BW-CE\",\"Botswana/Central\"\r\n\"BW-GH\",\"Botswana/Ghanzi\"\r\n\"BW-KG\",\"Botswana/Kgalagadi\"\r\n\"BW-KL\",\"Botswana/Kgatleng\"\r\n\"BW-KW\",\"Botswana/Kweneng\"\r\n\"BW-NE\",\"Botswana/North-East\"\r\n\"BW-NW\",\"Botswana/North-West\"\r\n\"BW-SE\",\"Botswana/South-East\"\r\n\"BW-SO\",\"Botswana/Southern\"\r\n\"BR-AC\",\"Brazil/Acre\"\r\n\"BR-AL\",\"Brazil/Alagoas\"\r\n\"BR-AP\",\"Brazil/Amapa\"\r\n\"BR-AM\",\"Brazil/Amazonas\"\r\n\"BR-BA\",\"Brazil/Bahia\"\r\n\"BR-CE\",\"Brazil/Ceara\"\r\n\"BR-DF\",\"Brazil/Distrito Federal\"\r\n\"BR-ES\",\"Brazil/Espirito Santo\"\r\n\"BR-GO\",\"Brazil/Goias\"\r\n\"BR-MA\",\"Brazil/Maranhao\"\r\n\"BR-MT\",\"Brazil/Mato Grosso\"\r\n\"BR-MS\",\"Brazil/Mato Grosso do Sul\"\r\n\"BR-MG\",\"Brazil/Minas Gerais\"\r\n\"BR-PA\",\"Brazil/Para\"\r\n\"BR-PB\",\"Brazil/Paraiba\"\r\n\"BR-PR\",\"Brazil/Parana\"\r\n\"BR-PE\",\"Brazil/Pernambuco\"\r\n\"BR-PI\",\"Brazil/Piaui\"\r\n\"BR-RJ\",\"Brazil/Rio de Janeiro\"\r\n\"BR-RN\",\"Brazil/Rio Grande do Norte\"\r\n\"BR-RS\",\"Brazil/Rio Grande do Sul\"\r\n\"BR-RO\",\"Brazil/Rondonia\"\r\n\"BR-RR\",\"Brazil/Roraima\"\r\n\"BR-SC\",\"Brazil/Santa Catarina\"\r\n\"BR-SP\",\"Brazil/Sao Paulo\"\r\n\"BR-SE\",\"Brazil/Sergipe\"\r\n\"BR-TO\",\"Brazil/Tocantins\"\r\n\"BN-BE\",\"Brunei Darussalam/Belait\"\r\n\"BN-BM\",\"Brunei Darussalam/Brunei and Muara\"\r\n\"BN-TE\",\"Brunei Darussalam/Temburong\"\r\n\"BN-TU\",\"Brunei Darussalam/Tutong\"\r\n\"BG-01\",\"Bulgaria/Blagoevgrad\"\r\n\"BG-02\",\"Bulgaria/Burgas\"\r\n\"BG-08\",\"Bulgaria/Dobrich\"\r\n\"BG-07\",\"Bulgaria/Gabrovo\"\r\n\"BG-22\",\"Bulgaria/Grad Sofiya\"\r\n\"BG-26\",\"Bulgaria/Khaskovo\"\r\n\"BG-09\",\"Bulgaria/Kurdzhali\"\r\n\"BG-10\",\"Bulgaria/Kyustendil\"\r\n\"BG-11\",\"Bulgaria/Lovech\"\r\n\"BG-12\",\"Bulgaria/Montana\"\r\n\"BG-13\",\"Bulgaria/Pazardzhik\"\r\n\"BG-14\",\"Bulgaria/Pernik\"\r\n\"BG-15\",\"Bulgaria/Pleven\"\r\n\"BG-16\",\"Bulgaria/Plovdiv\"\r\n\"BG-17\",\"Bulgaria/Razgrad\"\r\n\"BG-18\",\"Bulgaria/Ruse\"\r\n\"BG-27\",\"Bulgaria/Shumen\"\r\n\"BG-19\",\"Bulgaria/Silistra\"\r\n\"BG-20\",\"Bulgaria/Sliven\"\r\n\"BG-21\",\"Bulgaria/Smolyan\"\r\n\"BG-23\",\"Bulgaria/Sofiya\"\r\n\"BG-24\",\"Bulgaria/Stara Zagora\"\r\n\"BG-25\",\"Bulgaria/Turgovishte\"\r\n\"BG-03\",\"Bulgaria/Varna\"\r\n\"BG-04\",\"Bulgaria/Veliko Turnovo\"\r\n\"BG-05\",\"Bulgaria/Vidin\"\r\n\"BG-06\",\"Bulgaria/Vratsa\"\r\n\"BG-28\",\"Bulgaria/Yambol\"\r\n\"BF-BAL\",\"Burkina Faso/Bale\"\r\n\"BF-BAM\",\"Burkina Faso/Bam\"\r\n\"BF-ABN\",\"Burkina Faso/Banwa\"\r\n\"BF-BAZ\",\"Burkina Faso/Bazega\"\r\n\"BF-BGR\",\"Burkina Faso/Bougouriba\"\r\n\"BF-BLG\",\"Burkina Faso/Boulgou\"\r\n\"BF-BLK\",\"Burkina Faso/Boulkiemde\"\r\n\"BF-GAN\",\"Burkina Faso/Ganzourgou\"\r\n\"BF-GNA\",\"Burkina Faso/Gnagna\"\r\n\"BF-GOU\",\"Burkina Faso/Gourma\"\r\n\"BF-HOU\",\"Burkina Faso/Houet\"\r\n\"BF-IOB\",\"Burkina Faso/Ioba\"\r\n\"BF-KAD\",\"Burkina Faso/Kadiogo\"\r\n\"BF-KEN\",\"Burkina Faso/Kenedougou\"\r\n\"BF-COM\",\"Burkina Faso/Komoe\"\r\n\"BF-KMD\",\"Burkina Faso/Komondjari\"\r\n\"BF-KMP\",\"Burkina Faso/Kompienga\"\r\n\"BF-KOS\",\"Burkina Faso/Kossi\"\r\n\"BF-KOP\",\"Burkina Faso/Koulpelogo\"\r\n\"BF-KOT\",\"Burkina Faso/Kouritenga\"\r\n\"BF-KOW\",\"Burkina Faso/Kourweogo\"\r\n\"BF-LER\",\"Burkina Faso/Leraba\"\r\n\"BF-LOR\",\"Burkina Faso/Loroum\"\r\n\"BF-MOU\",\"Burkina Faso/Mouhoun\"\r\n\"BF-NAM\",\"Burkina Faso/Namentenga\"\r\n\"BF-NAO\",\"Burkina Faso/Naouri\"\r\n\"BF-NAY\",\"Burkina Faso/Nayala\"\r\n\"BF-NOU\",\"Burkina Faso/Noumbiel\"\r\n\"BF-OUB\",\"Burkina Faso/Oubritenga\"\r\n\"BF-OUD\",\"Burkina Faso/Oudalan\"\r\n\"BF-PAS\",\"Burkina Faso/Passore\"\r\n\"BF-PON\",\"Burkina Faso/Poni\"\r\n\"BF-SNG\",\"Burkina Faso/Sanguie\"\r\n\"BF-SMT\",\"Burkina Faso/Sanmatenga\"\r\n\"BF-SEN\",\"Burkina Faso/Seno\"\r\n\"BF-SIS\",\"Burkina Faso/Sissili\"\r\n\"BF-SOM\",\"Burkina Faso/Soum\"\r\n\"BF-SOR\",\"Burkina Faso/Sourou\"\r\n\"BF-TAP\",\"Burkina Faso/Tapoa\"\r\n\"BF-TUI\",\"Burkina Faso/Tuy\"\r\n\"BF-YAG\",\"Burkina Faso/Yagha\"\r\n\"BF-YAT\",\"Burkina Faso/Yatenga\"\r\n\"BF-ZIR\",\"Burkina Faso/Ziro\"\r\n\"BF-ZON\",\"Burkina Faso/Zondoma\"\r\n\"BF-ZOU\",\"Burkina Faso/Zoundweogo\"\r\n\"BI-BB\",\"Burundi/Bubanza\"\r\n\"BI-BM\",\"Burundi/Bujumbura Mairie\"\r\n\"BI-BR\",\"Burundi/Bururi\"\r\n\"BI-CA\",\"Burundi/Cankuzo\"\r\n\"BI-CI\",\"Burundi/Cibitoke\"\r\n\"BI-GI\",\"Burundi/Gitega\"\r\n\"BI-KR\",\"Burundi/Karuzi\"\r\n\"BI-KY\",\"Burundi/Kayanza\"\r\n\"BI-KI\",\"Burundi/Kirundo\"\r\n\"BI-MA\",\"Burundi/Makamba\"\r\n\"BI-MU\",\"Burundi/Muramvya\"\r\n\"BI-MY\",\"Burundi/Muyinga\"\r\n\"BI-MW\",\"Burundi/Mwaro\"\r\n\"BI-NG\",\"Burundi/Ngozi\"\r\n\"BI-RT\",\"Burundi/Rutana\"\r\n\"BI-RY\",\"Burundi/Ruyigi\"\r\n\"KH-1\",\"Cambodia/Banteay Meanchey\"\r\n\"KH-2\",\"Cambodia/Battambang\"\r\n\"KH-3\",\"Cambodia/Kampong Cham\"\r\n\"KH-4\",\"Cambodia/Kampong Chhnang\"\r\n\"KH-5\",\"Cambodia/Kampong Speu\"\r\n\"KH-6\",\"Cambodia/Kampong Thom\"\r\n\"KH-7\",\"Cambodia/Kampot\"\r\n\"KH-8\",\"Cambodia/Kandal\"\r\n\"KH-23\",\"Cambodia/Kep\"\r\n\"KH-9\",\"Cambodia/Koh Kong\"\r\n\"KH-10\",\"Cambodia/Kratie\"\r\n\"KH-11\",\"Cambodia/Mondulkiri\"\r\n\"KH-22\",\"Cambodia/Oddar Meanchey\"\r\n\"KH-24\",\"Cambodia/Pailin\"\r\n\"KH-12\",\"Cambodia/Phnom Penh\"\r\n\"KH-18\",\"Cambodia/Preah Sihanouk\"\r\n\"KH-13\",\"Cambodia/Preah Vihear\"\r\n\"KH-14\",\"Cambodia/Prey Veng\"\r\n\"KH-15\",\"Cambodia/Pursat\"\r\n\"KH-16\",\"Cambodia/Ratanakiri\"\r\n\"KH-17\",\"Cambodia/Siem Reap\"\r\n\"KH-19\",\"Cambodia/Stung Treng\"\r\n\"KH-20\",\"Cambodia/Svay Rieng\"\r\n\"KH-21\",\"Cambodia/Takeo\"\r\n\"CM-AD\",\"Cameroon/Adamaoua\"\r\n\"CM-CE\",\"Cameroon/Centre\"\r\n\"CM-ES\",\"Cameroon/Est\"\r\n\"CM-EN\",\"Cameroon/Extreme-Nord\"\r\n\"CM-LT\",\"Cameroon/Littoral\"\r\n\"CM-NO\",\"Cameroon/Nord\"\r\n\"CM-NW\",\"Cameroon/Nord-Ouest\"\r\n\"CM-OU\",\"Cameroon/Ouest\"\r\n\"CM-SU\",\"Cameroon/Sud\"\r\n\"CM-SW\",\"Cameroon/Sud-Ouest\"\r\n\"CA-AB\",\"Canada/Alberta\"\r\n\"CA-BC\",\"Canada/British Columbia\"\r\n\"CA-MB\",\"Canada/Manitoba\"\r\n\"CA-NB\",\"Canada/New Brunswick\"\r\n\"CA-NL\",\"Canada/Newfoundland and Labrador\"\r\n\"CA-NT\",\"Canada/Northwest Territories\"\r\n\"CA-NS\",\"Canada/Nova Scotia\"\r\n\"CA-NU\",\"Canada/Nunavut\"\r\n\"CA-ON\",\"Canada/Ontario\"\r\n\"CA-PE\",\"Canada/Prince Edward Island\"\r\n\"CA-QC\",\"Canada/Quebec\"\r\n\"CA-SK\",\"Canada/Saskatchewan\"\r\n\"CA-YT\",\"Canada/Yukon Territory\"\r\n\"CV-BV\",\"Cape Verde/Boa Vista\"\r\n\"CV-BR\",\"Cape Verde/Brava\"\r\n\"CV-MA\",\"Cape Verde/Maio\"\r\n\"CV-MO\",\"Cape Verde/Mosteiros\"\r\n\"CV-PA\",\"Cape Verde/Paul\"\r\n\"CV-PN\",\"Cape Verde/Porto Novo\"\r\n\"CV-PR\",\"Cape Verde/Praia\"\r\n\"CV-RB\",\"Cape Verde/Ribeira Brava\"\r\n\"CV-RG\",\"Cape Verde/Ribeira Grande\"\r\n\"CV-RS\",\"Cape Verde/Ribeira Grande de Santiago\"\r\n\"CV-SL\",\"Cape Verde/Sal\"\r\n\"CV-CA\",\"Cape Verde/Santa Catarina\"\r\n\"CV-CF\",\"Cape Verde/Santa Catarina do Fogo\"\r\n\"CV-CR\",\"Cape Verde/Santa Cruz\"\r\n\"CV-SD\",\"Cape Verde/Sao Domingos\"\r\n\"CV-SF\",\"Cape Verde/Sao Filipe\"\r\n\"CV-SM\",\"Cape Verde/Sao Miguel\"\r\n\"CV-SS\",\"Cape Verde/Sao Salvador do Mundo\"\r\n\"CV-SV\",\"Cape Verde/Sao Vicente\"\r\n\"CV-TA\",\"Cape Verde/Tarrafal\"\r\n\"CV-TS\",\"Cape Verde/Tarrafal de Sao Nicolau\"\r\n\"CF-BB\",\"Central African Republic/Bamingui-Bangoran\"\r\n\"CF-BGF\",\"Central African Republic/Bangui\"\r\n\"CF-BK\",\"Central African Republic/Basse-Kotto\"\r\n\"CF-HK\",\"Central African Republic/Haute-Kotto\"\r\n\"CF-HM\",\"Central African Republic/Haut-Mbomou\"\r\n\"CF-KG\",\"Central African Republic/Kemo\"\r\n\"CF-LB\",\"Central African Republic/Lobaye\"\r\n\"CF-HS\",\"Central African Republic/Mambere-Kadei\"\r\n\"CF-MB\",\"Central African Republic/Mbomou\"\r\n\"CF-NM\",\"Central African Republic/Nana-Mambere\"\r\n\"CF-MP\",\"Central African Republic/Ombella-Mpoko\"\r\n\"CF-UK\",\"Central African Republic/Ouaka\"\r\n\"CF-AC\",\"Central African Republic/Ouham\"\r\n\"CF-OP\",\"Central African Republic/Ouham-Pende\"\r\n\"CF-SE\",\"Central African Republic/Sangha-Mbaere\"\r\n\"TD-BG\",\"Chad/Barh el Ghazel\"\r\n\"TD-BA\",\"Chad/Batha\"\r\n\"TD-BO\",\"Chad/Borkou\"\r\n\"TD-CB\",\"Chad/Chari-Baguirmi\"\r\n\"TD-GR\",\"Chad/Guera\"\r\n\"TD-HL\",\"Chad/Hadjer-Lamis\"\r\n\"TD-KA\",\"Chad/Kanem\"\r\n\"TD-LC\",\"Chad/Lac\"\r\n\"TD-LO\",\"Chad/Logone Occidental\"\r\n\"TD-LR\",\"Chad/Logone Oriental\"\r\n\"TD-MA\",\"Chad/Mandoul\"\r\n\"TD-ME\",\"Chad/Mayo-Kebbi Est\"\r\n\"TD-MO\",\"Chad/Mayo-Kebbi Ouest\"\r\n\"TD-MC\",\"Chad/Moyen-Chari\"\r\n\"TD-OD\",\"Chad/Ouaddai\"\r\n\"TD-SA\",\"Chad/Salamat\"\r\n\"TD-TA\",\"Chad/Tandjile\"\r\n\"TD-TI\",\"Chad/Tibesti\"\r\n\"TD-WF\",\"Chad/Wadi Fira\"\r\n\"CL-AI\",\"Chile/Aisen del General Carlos Ibanez del Campo\"\r\n\"CL-AN\",\"Chile/Antofagasta\"\r\n\"CL-AR\",\"Chile/Araucania\"\r\n\"CL-AP\",\"Chile/Arica y Parinacota\"\r\n\"CL-AT\",\"Chile/Atacama\"\r\n\"CL-BI\",\"Chile/Bio-Bio\"\r\n\"CL-CO\",\"Chile/Coquimbo\"\r\n\"CL-LI\",\"Chile/Libertador General Bernardo O'Higgins\"\r\n\"CL-LL\",\"Chile/Los Lagos\"\r\n\"CL-LR\",\"Chile/Los Rios\"\r\n\"CL-MA\",\"Chile/Magallanes y de la Antartica Chilena\"\r\n\"CL-ML\",\"Chile/Maule\"\r\n\"CL-RM\",\"Chile/Region Metropolitana\"\r\n\"CL-TA\",\"Chile/Tarapaca\"\r\n\"CL-VS\",\"Chile/Valparaiso\"\r\n\"CN-34\",\"China/Anhui\"\r\n\"CN-11\",\"China/Beijing\"\r\n\"CN-50\",\"China/Chongqing\"\r\n\"CN-35\",\"China/Fujian\"\r\n\"CN-62\",\"China/Gansu\"\r\n\"CN-44\",\"China/Guangdong\"\r\n\"CN-45\",\"China/Guangxi\"\r\n\"CN-52\",\"China/Guizhou\"\r\n\"CN-46\",\"China/Hainan\"\r\n\"CN-13\",\"China/Hebei\"\r\n\"CN-23\",\"China/Heilongjiang\"\r\n\"CN-41\",\"China/Henan\"\r\n\"CN-42\",\"China/Hubei\"\r\n\"CN-43\",\"China/Hunan\"\r\n\"CN-32\",\"China/Jiangsu\"\r\n\"CN-36\",\"China/Jiangxi\"\r\n\"CN-22\",\"China/Jilin\"\r\n\"CN-21\",\"China/Liaoning\"\r\n\"CN-15\",\"China/Nei Mongol\"\r\n\"CN-64\",\"China/Ningxia\"\r\n\"CN-63\",\"China/Qinghai\"\r\n\"CN-61\",\"China/Shaanxi\"\r\n\"CN-37\",\"China/Shandong\"\r\n\"CN-31\",\"China/Shanghai\"\r\n\"CN-14\",\"China/Shanxi\"\r\n\"CN-51\",\"China/Sichuan\"\r\n\"CN-12\",\"China/Tianjin\"\r\n\"CN-65\",\"China/Xinjiang\"\r\n\"CN-54\",\"China/Xizang\"\r\n\"CN-53\",\"China/Yunnan\"\r\n\"CN-33\",\"China/Zhejiang\"\r\n\"CO-AMA\",\"Colombia/Amazonas\"\r\n\"CO-ANT\",\"Colombia/Antioquia\"\r\n\"CO-ARA\",\"Colombia/Arauca\"\r\n\"CO-ATL\",\"Colombia/Atlantico\"\r\n\"CO-BOL\",\"Colombia/Bolivar\"\r\n\"CO-BOY\",\"Colombia/Boyaca\"\r\n\"CO-CAL\",\"Colombia/Caldas\"\r\n\"CO-CAQ\",\"Colombia/Caqueta\"\r\n\"CO-CAS\",\"Colombia/Casanare\"\r\n\"CO-CAU\",\"Colombia/Cauca\"\r\n\"CO-CES\",\"Colombia/Cesar\"\r\n\"CO-CHO\",\"Colombia/Choco\"\r\n\"CO-COR\",\"Colombia/Cordoba\"\r\n\"CO-CUN\",\"Colombia/Cundinamarca\"\r\n\"CO-GUA\",\"Colombia/Guainia\"\r\n\"CO-GUV\",\"Colombia/Guaviare\"\r\n\"CO-HUI\",\"Colombia/Huila\"\r\n\"CO-LAG\",\"Colombia/La Guajira\"\r\n\"CO-MAG\",\"Colombia/Magdalena\"\r\n\"CO-MET\",\"Colombia/Meta\"\r\n\"CO-NAR\",\"Colombia/Narino\"\r\n\"CO-NSA\",\"Colombia/Norte de Santander\"\r\n\"CO-PUT\",\"Colombia/Putumayo\"\r\n\"CO-QUI\",\"Colombia/Quindio\"\r\n\"CO-RIS\",\"Colombia/Risaralda\"\r\n\"CO-SAP\",\"Colombia/San Andres y Providencia\"\r\n\"CO-SAN\",\"Colombia/Santander\"\r\n\"CO-SUC\",\"Colombia/Sucre\"\r\n\"CO-TOL\",\"Colombia/Tolima\"\r\n\"CO-VAC\",\"Colombia/Valle del Cauca\"\r\n\"CO-VAU\",\"Colombia/Vaupes\"\r\n\"CO-VID\",\"Colombia/Vichada\"\r\n\"KM-A\",\"Comoros/Anjouan\"\r\n\"KM-G\",\"Comoros/Grande Comore\"\r\n\"KM-M\",\"Comoros/Moheli\"\r\n\"CD-BN\",\"Congo, the Democratic Republic of the/Bandundu\"\r\n\"CD-BC\",\"Congo, the Democratic Republic of the/Bas-Congo\"\r\n\"CD-EQ\",\"Congo, the Democratic Republic of the/Equateur\"\r\n\"CD-KW\",\"Congo, the Democratic Republic of the/Kasai-Occidental\"\r\n\"CD-KE\",\"Congo, the Democratic Republic of the/Kasai-Oriental\"\r\n\"CD-KA\",\"Congo, the Democratic Republic of the/Katanga\"\r\n\"CD-KN\",\"Congo, the Democratic Republic of the/Kinshasa\"\r\n\"CD-MA\",\"Congo, the Democratic Republic of the/Maniema\"\r\n\"CD-NK\",\"Congo, the Democratic Republic of the/Nord-Kivu\"\r\n\"CD-OR\",\"Congo, the Democratic Republic of the/Orientale\"\r\n\"CD-SK\",\"Congo, the Democratic Republic of the/Sud-Kivu\"\r\n\"CG-11\",\"Congo/Bouenza\"\r\n\"CG-BZV\",\"Congo/Brazzaville\"\r\n\"CG-8\",\"Congo/Cuvette\"\r\n\"CG-15\",\"Congo/Cuvette-Ouest\"\r\n\"G-5\",\"Congo/Kouilou\"\r\n\"CG-2\",\"Congo/Lekoumou\"\r\n\"CG-7\",\"Congo/Likouala\"\r\n\"CG-9\",\"Congo/Niari\"\r\n\"CG-14\",\"Congo/Plateaux\"\r\n\"CG-12\",\"Congo/Pool\"\r\n\"CG-13\",\"Congo/Sangha\"\r\n\"CR-A\",\"Costa Rica/Alajuela\"\r\n\"CR-C\",\"Costa Rica/Cartago\"\r\n\"CR-G\",\"Costa Rica/Guanacaste\"\r\n\"CR-H\",\"Costa Rica/Heredia\"\r\n\"CR-L\",\"Costa Rica/Limon\"\r\n\"CR-P\",\"Costa Rica/Puntarenas\"\r\n\"CR-SJ\",\"Costa Rica/San Jose\"\r\n\"CI-16\",\"Côte d'Ivoire/Agneby\"\r\n\"CI-17\",\"Côte d'Ivoire/Bafing\"\r\n\"CI-09\",\"Côte d'Ivoire/Bas-Sassandra\"\r\n\"CI-10\",\"Côte d'Ivoire/Denguele\"\r\n\"CI-06\",\"Côte d'Ivoire/Dix-Huit Montagnes\"\r\n\"CI-18\",\"Côte d'Ivoire/Fromager\"\r\n\"CI-02\",\"Côte d'Ivoire/Haut-Sassandra\"\r\n\"CI-07\",\"Côte d'Ivoire/Lacs\"\r\n\"CI-01\",\"Côte d'Ivoire/Lagunes\"\r\n\"CI-12\",\"Côte d'Ivoire/Marahoue\"\r\n\"CI-19\",\"Côte d'Ivoire/Moyen-Cavally\"\r\n\"CI-05\",\"Côte d'Ivoire/Moyen-Comoe\"\r\n\"CI-11\",\"Côte d'Ivoire/N'zi-Comoe\"\r\n\"CI-03\",\"Côte d'Ivoire/Savanes\"\r\n\"CI-15\",\"Côte d'Ivoire/Sud-Bandama\"\r\n\"CI-13\",\"Côte d'Ivoire/Sud-Comoe\"\r\n\"CI-04\",\"Côte d'Ivoire/Vallee du Bandama\"\r\n\"CI-14\",\"Côte d'Ivoire/Worodougou\"\r\n\"CI-08\",\"Côte d'Ivoire/Zanzan\"\r\n\"HR-07\",\"Croatia/Bjelovarsko-Bilogorska\"\r\n\"HR-12\",\"Croatia/Brodsko-Posavska\"\r\n\"HR-19\",\"Croatia/Dubrovacko-Neretvanska\"\r\n\"HR-21\",\"Croatia/Grad Zagreb\"\r\n\"HR-18\",\"Croatia/Istarska\"\r\n\"HR-04\",\"Croatia/Karlovacka\"\r\n\"HR-06\",\"Croatia/Koprivnicko-Krizevacka\"\r\n\"HR-02\",\"Croatia/Krapinsko-Zagorska\"\r\n\"HR-09\",\"Croatia/Licko-Senjska\"\r\n\"HR-20\",\"Croatia/Medimurska\"\r\n\"HR-14\",\"Croatia/Osjecko-Baranjska\"\r\n\"HR-11\",\"Croatia/Pozesko-Slavonska\"\r\n\"HR-08\",\"Croatia/Primorsko-Goranska\"\r\n\"HR-15\",\"Croatia/Sibensko-Kninska\"\r\n\"HR-03\",\"Croatia/Sisacko-Moslavacka\"\r\n\"HR-17\",\"Croatia/Splitsko-Dalmatinska\"\r\n\"HR-05\",\"Croatia/Varazdinska\"\r\n\"HR-10\",\"Croatia/Viroviticko-Podravska\"\r\n\"HR-16\",\"Croatia/Vukovarsko-Srijemska\"\r\n\"HR-13\",\"Croatia/Zadarska\"\r\n\"HR-01\",\"Croatia/Zagrebacka\"\r\n\"CU-09\",\"Cuba/Camaguey\"\r\n\"CU-08\",\"Cuba/Ciego de Avila\"\r\n\"CU-06\",\"Cuba/Cienfuegos\"\r\n\"CU-03\",\"Cuba/Ciudad de la Habana\"\r\n\"CU-12\",\"Cuba/Granma\"\r\n\"CU-14\",\"Cuba/Guantanamo\"\r\n\"CU-11\",\"Cuba/Holguin\"\r\n\"CU-99\",\"Cuba/Isla de la Juventud\"\r\n\"CU-02\",\"Cuba/La Habana\"\r\n\"CU-10\",\"Cuba/Las Tunas\"\r\n\"CU-04\",\"Cuba/Matanzas\"\r\n\"CU-01\",\"Cuba/Pinar del Rio\"\r\n\"CU-07\",\"Cuba/Sancti Spiritus\"\r\n\"CU-13\",\"Cuba/Santiago de Cuba\"\r\n\"CU-05\",\"Cuba/Villa Clara\"\r\n\"CY-04\",\"Cyprus/Famagusta\"\r\n\"CY-06\",\"Cyprus/Kyrenia\"\r\n\"CY-03\",\"Cyprus/Larnaca\"\r\n\"CY-02\",\"Cyprus/Limassol\"\r\n\"CY-01\",\"Cyprus/Nicosia\"\r\n\"CY-05\",\"Cyprus/Paphos\"\r\n\"CZ-PR\",\"Czech Republic/Hlavni mesto Praha\"\r\n\"CZ-JC\",\"Czech Republic/Jihocesky kraj\"\r\n\"CZ-JM\",\"Czech Republic/Jihomoravsky kraj\"\r\n\"CZ-KA\",\"Czech Republic/Karlovarsky kraj\"\r\n\"CZ-KR\",\"Czech Republic/Kralovehradecky kraj\"\r\n\"CZ-LI\",\"Czech Republic/Liberecky kraj\"\r\n\"CZ-MO\",\"Czech Republic/Moravskoslezsky kraj\"\r\n\"CZ-OL\",\"Czech Republic/Olomoucky kraj\"\r\n\"CZ-PA\",\"Czech Republic/Pardubicky kraj\"\r\n\"CZ-PL\",\"Czech Republic/Plzensky kraj\"\r\n\"CZ-ST\",\"Czech Republic/Stredocesky kraj\"\r\n\"CZ-US\",\"Czech Republic/Ustecky kraj\"\r\n\"CZ-VY\",\"Czech Republic/Vysocina kraj\"\r\n\"CZ-ZL\",\"Czech Republic/Zlinsky kraj\"\r\n\"DK-84\",\"Denmark/Hovedstaden\"\r\n\"DK-82\",\"Denmark/Midtjylland\"\r\n\"DK-81\",\"Denmark/Nordjylland\"\r\n\"DK-85\",\"Denmark/Sjelland\"\r\n\"DK-83\",\"Denmark/Syddanmark\"\r\n\"DJ-AS\",\"Djibouti/Ali Sabieh\"\r\n\"DJ-AR\",\"Djibouti/Arta\"\r\n\"DJ-DI\",\"Djibouti/Dikhil\"\r\n\"DJ-DJ\",\"Djibouti/Djibouti\"\r\n\"DJ-OB\",\"Djibouti/Obock\"\r\n\"DJ-TA\",\"Djibouti/Tadjoura\"\r\n\"DM-02\",\"Dominica/Saint Andrew\"\r\n\"DM-03\",\"Dominica/Saint David\"\r\n\"DM-04\",\"Dominica/Saint George\"\r\n\"DM-05\",\"Dominica/Saint John\"\r\n\"DM-06\",\"Dominica/Saint Joseph\"\r\n\"DM-07\",\"Dominica/Saint Luke\"\r\n\"DM-08\",\"Dominica/Saint Mark\"\r\n\"DM-09\",\"Dominica/Saint Patrick\"\r\n\"DM-10\",\"Dominica/Saint Paul\"\r\n\"DO-02\",\"Dominican Republic/Azua\"\r\n\"DO-03\",\"Dominican Republic/Baoruco\"\r\n\"DO-04\",\"Dominican Republic/Barahona\"\r\n\"DO-05\",\"Dominican Republic/Dajabon\"\r\n\"DO-01\",\"Dominican Republic/Distrito Nacional\"\r\n\"DO-06\",\"Dominican Republic/Duarte\"\r\n\"DO-08\",\"Dominican Republic/El Seibo\"\r\n\"DO-07\",\"Dominican Republic/Elias Pina\"\r\n\"DO-09\",\"Dominican Republic/Espaillat\"\r\n\"DO-30\",\"Dominican Republic/Hato Mayor\"\r\n\"DO-10\",\"Dominican Republic/Independencia\"\r\n\"DO-11\",\"Dominican Republic/La Altagracia\"\r\n\"DO-12\",\"Dominican Republic/La Romana\"\r\n\"DO-13\",\"Dominican Republic/La Vega\"\r\n\"DO-14\",\"Dominican Republic/Maria Trinidad Sanchez\"\r\n\"DO-28\",\"Dominican Republic/Monsenor Nouel\"\r\n\"DO-15\",\"Dominican Republic/Monte Cristi\"\r\n\"DO-29\",\"Dominican Republic/Monte Plata\"\r\n\"DO-16\",\"Dominican Republic/Pedernales\"\r\n\"DO-17\",\"Dominican Republic/Peravia\"\r\n\"DO-18\",\"Dominican Republic/Puerto Plata\"\r\n\"DO-19\",\"Dominican Republic/Salcedo\"\r\n\"DO-20\",\"Dominican Republic/Samana\"\r\n\"DO-21\",\"Dominican Republic/San Cristobal\"\r\n\"DO-22\",\"Dominican Republic/San Juan\"\r\n\"DO-23\",\"Dominican Republic/San Pedro De Macoris\"\r\n\"DO-24\",\"Dominican Republic/Sanchez Ramirez\"\r\n\"DO-25\",\"Dominican Republic/Santiago\"\r\n\"DO-26\",\"Dominican Republic/Santiago Rodriguez\"\r\n\"DO-27\",\"Dominican Republic/Valverde\"\r\n\"EC-A\",\"Ecuador/Azuay\"\r\n\"EC-B\",\"Ecuador/Bolivar\"\r\n\"EC-F\",\"Ecuador/Canar\"\r\n\"EC-C\",\"Ecuador/Carchi\"\r\n\"EC-H\",\"Ecuador/Chimborazo\"\r\n\"EC-X\",\"Ecuador/Cotopaxi\"\r\n\"EC-O\",\"Ecuador/El Oro\"\r\n\"EC-E\",\"Ecuador/Esmeraldas\"\r\n\"EC-W\",\"Ecuador/Galapagos\"\r\n\"EC-G\",\"Ecuador/Guayas\"\r\n\"EC-I\",\"Ecuador/Imbabura\"\r\n\"EC-L\",\"Ecuador/Loja\"\r\n\"EC-R\",\"Ecuador/Los Rios\"\r\n\"EC-M\",\"Ecuador/Manabi\"\r\n\"EC-S\",\"Ecuador/Morona-Santiago\"\r\n\"EC-N\",\"Ecuador/Napo\"\r\n\"EC-D\",\"Ecuador/Orellana\"\r\n\"EC-Y\",\"Ecuador/Pastaza\"\r\n\"EC-P\",\"Ecuador/Pichincha\"\r\n\"EC-SE\",\"Ecuador/Santa Elena\"\r\n\"EC-U\",\"Ecuador/Sucumbios\"\r\n\"EC-T\",\"Ecuador/Tungurahua\"\r\n\"EC-Z\",\"Ecuador/Zamora-Chinchipe\"\r\n\"EG-DK\",\"Egypt/Ad Daqahliyah\"\r\n\"EG-BA\",\"Egypt/Al Bahr al Ahmar\"\r\n\"EG-BH\",\"Egypt/Al Buhayrah\"\r\n\"EG-FYM\",\"Egypt/Al Fayyum\"\r\n\"EG-GH\",\"Egypt/Al Gharbiyah\"\r\n\"EG-ALX\",\"Egypt/Al Iskandariyah\"\r\n\"EG-IS\",\"Egypt/Al Isma'iliyah\"\r\n\"EG-GZ\",\"Egypt/Al Jizah\"\r\n\"EG-MNF\",\"Egypt/Al Minufiyah\"\r\n\"EG-MN\",\"Egypt/Al Minya\"\r\n\"EG-C\",\"Egypt/Al Qahirah\"\r\n\"EG-KB\",\"Egypt/Al Qalyubiyah\"\r\n\"EG-WAD\",\"Egypt/Al Wadi al Jadid\"\r\n\"EG-SUZ\",\"Egypt/As Suways\"\r\n\"EG-SHR\",\"Egypt/Ash Sharqiyah\"\r\n\"EG-ASN\",\"Egypt/Aswan\"\r\n\"EG-AST\",\"Egypt/Asyut\"\r\n\"EG-BNS\",\"Egypt/Bani Suwayf\"\r\n\"EG-PTS\",\"Egypt/Bur Sa'id\"\r\n\"EG-DT\",\"Egypt/Dumyat\"\r\n\"EG-JS\",\"Egypt/Janub Sina'\"\r\n\"EG-KFS\",\"Egypt/Kafr ash Shaykh\"\r\n\"EG-MT\",\"Egypt/Matruh\"\r\n\"EG-LX\",\"Egypt/Muhafazat al Uqsur\"\r\n\"EG-KN\",\"Egypt/Qina\"\r\n\"EG-SIN\",\"Egypt/Shamal Sina'\"\r\n\"EG-SHG\",\"Egypt/Suhaj\"\r\n\"SV-AH\",\"El Salvador/Ahuachapan\"\r\n\"SV-CA\",\"El Salvador/Cabanas\"\r\n\"SV-CH\",\"El Salvador/Chalatenango\"\r\n\"SV-CU\",\"El Salvador/Cuscatlan\"\r\n\"SV-LI\",\"El Salvador/La Libertad\"\r\n\"SV-PA\",\"El Salvador/La Paz\"\r\n\"SV-UN\",\"El Salvador/La Union\"\r\n\"SV-MO\",\"El Salvador/Morazan\"\r\n\"SV-SM\",\"El Salvador/San Miguel\"\r\n\"SV-SS\",\"El Salvador/San Salvador\"\r\n\"SV-SV\",\"El Salvador/San Vicente\"\r\n\"SV-SA\",\"El Salvador/Santa Ana\"\r\n\"SV-SO\",\"El Salvador/Sonsonate\"\r\n\"SV-US\",\"El Salvador/Usulutan\"\r\n\"GQ-AN\",\"Equatorial Guinea/Annobon\"\r\n\"GQ-BN\",\"Equatorial Guinea/Bioko Norte\"\r\n\"GQ-BS\",\"Equatorial Guinea/Bioko Sur\"\r\n\"GQ-CS\",\"Equatorial Guinea/Centro Sur\"\r\n\"GQ-KN\",\"Equatorial Guinea/Kie-Ntem\"\r\n\"GQ-LI\",\"Equatorial Guinea/Litoral\"\r\n\"GQ-WN\",\"Equatorial Guinea/Wele-Nzas\"\r\n\"ER-AN\",\"Eritrea/Anseba\"\r\n\"ER-DU\",\"Eritrea/Debub\"\r\n\"ER-DK\",\"Eritrea/Debubawi K'eyih Bahri\"\r\n\"ER-GB\",\"Eritrea/Gash Barka\"\r\n\"ER-MA\",\"Eritrea/Ma'akel\"\r\n\"ER-SK\",\"Eritrea/Semenawi K'eyih Bahri\"\r\n\"EE-37\",\"Estonia/Harjumaa\"\r\n\"EE-39\",\"Estonia/Hiiumaa\"\r\n\"EE-44\",\"Estonia/Ida-Virumaa\"\r\n\"EE-51\",\"Estonia/Jarvamaa\"\r\n\"EE-49\",\"Estonia/Jogevamaa\"\r\n\"EE-57\",\"Estonia/Laanemaa\"\r\n\"EE-59\",\"Estonia/Laane-Virumaa\"\r\n\"EE-67\",\"Estonia/Parnumaa\"\r\n\"EE-65\",\"Estonia/Polvamaa\"\r\n\"EE-70\",\"Estonia/Raplamaa\"\r\n\"EE-74\",\"Estonia/Saaremaa\"\r\n\"EE-78\",\"Estonia/Tartumaa\"\r\n\"EE-82\",\"Estonia/Valgamaa\"\r\n\"EE-84\",\"Estonia/Viljandimaa\"\r\n\"EE-86\",\"Estonia/Vorumaa\"\r\n\"ET-AA\",\"Ethiopia/Adis Abeba\"\r\n\"ET-AF\",\"Ethiopia/Afar\"\r\n\"ET-AM\",\"Ethiopia/Amara\"\r\n\"ET-BE\",\"Ethiopia/Binshangul Gumuz\"\r\n\"ET-DD\",\"Ethiopia/Dire Dawa\"\r\n\"ET-GA\",\"Ethiopia/Gambela Hizboch\"\r\n\"ET-HA\",\"Ethiopia/Hareri Hizb\"\r\n\"ET-OR\",\"Ethiopia/Oromiya\"\r\n\"ET-SO\",\"Ethiopia/Sumale\"\r\n\"ET-TI\",\"Ethiopia/Tigray\"\r\n\"ET-SN\",\"Ethiopia/YeDebub Biheroch Bihereseboch na Hizboch\"\r\n\"FJ-C\",\"Fiji/Central\"\r\n\"FJ-N\",\"Fiji/Northern\"\r\n\"FJ-W\",\"Fiji/Western\"\r\n\"FI-10\",\"Finland/Lapland\"\r\n\"FR-A\",\"France/Alsace\"\r\n\"FR-B\",\"France/Aquitaine\"\r\n\"FR-C\",\"France/Auvergne\"\r\n\"FR-P\",\"France/Basse-Normandie\"\r\n\"FR-D\",\"France/Bourgogne\"\r\n\"FR-E\",\"France/Bretagne\"\r\n\"FR-F\",\"France/Centre\"\r\n\"FR-G\",\"France/Champagne-Ardenne\"\r\n\"FR-H\",\"France/Corse\"\r\n\"FR-I\",\"France/Franche-Comte\"\r\n\"FR-Q\",\"France/Haute-Normandie\"\r\n\"FR-J\",\"France/Ile-de-France\"\r\n\"FR-K\",\"France/Languedoc-Roussillon\"\r\n\"FR-L\",\"France/Limousin\"\r\n\"FR-M\",\"France/Lorraine\"\r\n\"FR-N\",\"France/Midi-Pyrenees\"\r\n\"FR-O\",\"France/Nord-Pas-de-Calais\"\r\n\"FR-R\",\"France/Pays de la Loire\"\r\n\"FR-S\",\"France/Picardie\"\r\n\"FR-T\",\"France/Poitou-Charentes\"\r\n\"FR-U\",\"France/Provence-Alpes-Cote d'Azur\"\r\n\"FR-V\",\"France/Rhone-Alpes\"\r\n\"GA-1\",\"Gabon/Estuaire\"\r\n\"GA-2\",\"Gabon/Haut-Ogooue\"\r\n\"GA-3\",\"Gabon/Moyen-Ogooue\"\r\n\"GA-4\",\"Gabon/Ngounie\"\r\n\"GA-5\",\"Gabon/Nyanga\"\r\n\"GA-6\",\"Gabon/Ogooue-Ivindo\"\r\n\"GA-7\",\"Gabon/Ogooue-Lolo\"\r\n\"GA-8\",\"Gabon/Ogooue-Maritime\"\r\n\"GA-9\",\"Gabon/Woleu-Ntem\"\r\n\"GM-B\",\"Gambia/Banjul\"\r\n\"GM-M\",\"Gambia/Central River\"\r\n\"GM-L\",\"Gambia/Lower River\"\r\n\"GM-N\",\"Gambia/North Bank\"\r\n\"GM-U\",\"Gambia/Upper River\"\r\n\"GM-W\",\"Gambia/Western\"\r\n\"GE-AB\",\"Georgia/Abkhazia\"\r\n\"GE-AJ\",\"Georgia/Ajaria\"\r\n\"GE-04\",\"Georgia/Akhalk'alak'is Raioni\"\r\n\"GE-09\",\"Georgia/Baghdat'is Raioni\"\r\n\"GE-11\",\"Georgia/Borjomis Raioni\"\r\n\"GE-19\",\"Georgia/Goris Raioni\"\r\n\"GE-GU\",\"Georgia/Guria\"\r\n\"GE-IM\",\"Georgia/Imereti\"\r\n\"GE-23\",\"Georgia/Javis Raioni\"\r\n\"GE-KA\",\"Georgia/Kakheti\"\r\n\"GE-24\",\"Georgia/K'arelis Raioni\"\r\n\"GE-28\",\"Georgia/Khashuris Raioni\"\r\n\"GE-KK\",\"Georgia/Kvemo Kartli\"\r\n\"GE-MM\",\"Georgia/Mtskheta-Mtianeti\"\r\n\"GE-RL\",\"Georgia/Racha-Lechkhumi and Kvemo Svaneti\"\r\n\"GE-SZ\",\"Georgia/Samegrelo and Zemo Svaneti\"\r\n\"GE-SJ\",\"Georgia/Samtskhe-Javakheti\"\r\n\"GE-SK\",\"Georgia/Shida Kartli\"\r\n\"GE-TBS\",\"Georgia/T'bilisi\"\r\n\"GE-61\",\"Georgia/Vanis Raioni\"\r\n\"DE-BW\",\"Germany/Baden-Wurttemberg\"\r\n\"DE-BY\",\"Germany/Bayern\"\r\n\"DE-BE\",\"Germany/Berlin\"\r\n\"DE-BB\",\"Germany/Brandenburg\"\r\n\"DE-HB\",\"Germany/Bremen\"\r\n\"DE-HH\",\"Germany/Hamburg\"\r\n\"DE-HE\",\"Germany/Hessen\"\r\n\"DE-MV\",\"Germany/Mecklenburg-Vorpommern\"\r\n\"DE-NI\",\"Germany/Niedersachsen\"\r\n\"DE-NW\",\"Germany/Nordrhein-Westfalen\"\r\n\"DE-RP\",\"Germany/Rheinland-Pfalz\"\r\n\"DE-SL\",\"Germany/Saarland\"\r\n\"DE-SN\",\"Germany/Sachsen\"\r\n\"DE-ST\",\"Germany/Sachsen-Anhalt\"\r\n\"DE-SH\",\"Germany/Schleswig-Holstein\"\r\n\"DE-TH\",\"Germany/Thuringen\"\r\n\"GH-AH\",\"Ghana/Ashanti\"\r\n\"GH-BA\",\"Ghana/Brong-Ahafo\"\r\n\"GH-CP\",\"Ghana/Central\"\r\n\"GH-EP\",\"Ghana/Eastern\"\r\n\"GH-AA\",\"Ghana/Greater Accra\"\r\n\"GH-NP\",\"Ghana/Northern\"\r\n\"GH-UE\",\"Ghana/Upper East\"\r\n\"GH-UW\",\"Ghana/Upper West\"\r\n\"GH-TV\",\"Ghana/Volta\"\r\n\"GH-WP\",\"Ghana/Western\"\r\n\"GR-01\",\"Greece/Aitolia kai Akarnania\"\r\n\"GR-13\",\"Greece/Akhaia\"\r\n\"GR-11\",\"Greece/Argolis\"\r\n\"GR-12\",\"Greece/Arkadhia\"\r\n\"GR-31\",\"Greece/Arta\"\r\n\"GR-A1\",\"Greece/Attiki\"\r\n\"GR-81\",\"Greece/Dhodhekanisos\"\r\n\"GR-52\",\"Greece/Drama\"\r\n\"GR-05\",\"Greece/Evritania\"\r\n\"GR-71\",\"Greece/Evros\"\r\n\"GR-04\",\"Greece/Evvoia\"\r\n\"GR-63\",\"Greece/Florina\"\r\n\"GR-07\",\"Greece/Fokis\"\r\n\"GR-06\",\"Greece/Fthiotis\"\r\n\"GR-51\",\"Greece/Grevena\"\r\n\"GR-14\",\"Greece/Ilia\"\r\n\"GR-53\",\"Greece/Imathia\"\r\n\"GR-33\",\"Greece/Ioannina\"\r\n\"GR-91\",\"Greece/Iraklion\"\r\n\"GR-41\",\"Greece/Kardhitsa\"\r\n\"GR-56\",\"Greece/Kastoria\"\r\n\"GR-55\",\"Greece/Kavala\"\r\n\"GR-23\",\"Greece/Kefallinia\"\r\n\"GR-22\",\"Greece/Kerkira\"\r\n\"GR-64\",\"Greece/Khalkidhiki\"\r\n\"GR-94\",\"Greece/Khania\"\r\n\"GR-85\",\"Greece/Khios\"\r\n\"GR-82\",\"Greece/Kikladhes\"\r\n\"GR-57\",\"Greece/Kilkis\"\r\n\"GR-15\",\"Greece/Korinthia\"\r\n\"GR-58\",\"Greece/Kozani\"\r\n\"GR-16\",\"Greece/Lakonia\"\r\n\"GR-42\",\"Greece/Larisa\"\r\n\"GR-92\",\"Greece/Lasithi\"\r\n\"GR-83\",\"Greece/Lesvos\"\r\n\"GR-24\",\"Greece/Levkas\"\r\n\"GR-43\",\"Greece/Magnisia\"\r\n\"GR-17\",\"Greece/Messinia\"\r\n\"GR-59\",\"Greece/Pella\"\r\n\"GR-61\",\"Greece/Pieria\"\r\n\"GR-34\",\"Greece/Preveza\"\r\n\"GR-93\",\"Greece/Rethimni\"\r\n\"GR-73\",\"Greece/Rodhopi\"\r\n\"GR-84\",\"Greece/Samos\"\r\n\"GR-62\",\"Greece/Serrai\"\r\n\"GR-32\",\"Greece/Thesprotia\"\r\n\"GR-54\",\"Greece/Thessaloniki\"\r\n\"GR-44\",\"Greece/Trikala\"\r\n\"GR-03\",\"Greece/Voiotia\"\r\n\"GR-72\",\"Greece/Xanthi\"\r\n\"GR-21\",\"Greece/Zakinthos\"\r\n\"GL-KU\",\"Greenland/Kujalleq\"\r\n\"GL-QA\",\"Greenland/Qaasuitsup\"\r\n\"GL-QE\",\"Greenland/Qeqqata\"\r\n\"GL-SM\",\"Greenland/Sermersooq\"\r\n\"GD-01\",\"Grenada/Saint Andrew\"\r\n\"GD-02\",\"Grenada/Saint David\"\r\n\"GD-03\",\"Grenada/Saint George\"\r\n\"GD-04\",\"Grenada/Saint John\"\r\n\"GD-05\",\"Grenada/Saint Mark\"\r\n\"GD-06\",\"Grenada/Saint Patrick\"\r\n\"GT-AV\",\"Guatemala/Alta Verapaz\"\r\n\"GT-BV\",\"Guatemala/Baja Verapaz\"\r\n\"GT-CM\",\"Guatemala/Chimaltenango\"\r\n\"GT-CQ\",\"Guatemala/Chiquimula\"\r\n\"GT-PR\",\"Guatemala/El Progreso\"\r\n\"GT-ES\",\"Guatemala/Escuintla\"\r\n\"GT-GU\",\"Guatemala/Guatemala\"\r\n\"GT-HU\",\"Guatemala/Huehuetenango\"\r\n\"GT-IZ\",\"Guatemala/Izabal\"\r\n\"GT-JA\",\"Guatemala/Jalapa\"\r\n\"GT-JU\",\"Guatemala/Jutiapa\"\r\n\"GT-PE\",\"Guatemala/Peten\"\r\n\"GT-QZ\",\"Guatemala/Quetzaltenango\"\r\n\"GT-QC\",\"Guatemala/Quiche\"\r\n\"GT-RE\",\"Guatemala/Retalhuleu\"\r\n\"GT-SA\",\"Guatemala/Sacatepequez\"\r\n\"GT-SM\",\"Guatemala/San Marcos\"\r\n\"GT-SR\",\"Guatemala/Santa Rosa\"\r\n\"GT-SO\",\"Guatemala/Solola\"\r\n\"GT-SU\",\"Guatemala/Suchitepequez\"\r\n\"GT-TO\",\"Guatemala/Totonicapan\"\r\n\"GT-ZA\",\"Guatemala/Zacapa\"\r\n\"GN-BE\",\"Guinea/Beyla\"\r\n\"GN-BF\",\"Guinea/Boffa\"\r\n\"GN-BK\",\"Guinea/Boke\"\r\n\"GN-C\",\"Guinea/Conakry\"\r\n\"GN-CO\",\"Guinea/Coyah\"\r\n\"GN-DB\",\"Guinea/Dabola\"\r\n\"GN-DL\",\"Guinea/Dalaba\"\r\n\"GN-DI\",\"Guinea/Dinguiraye\"\r\n\"GN-DU\",\"Guinea/Dubreka\"\r\n\"GN-FA\",\"Guinea/Faranah\"\r\n\"GN-FO\",\"Guinea/Forecariah\"\r\n\"GN-FR\",\"Guinea/Fria\"\r\n\"GN-GA\",\"Guinea/Gaoual\"\r\n\"GN-GU\",\"Guinea/Gueckedou\"\r\n\"GN-KA\",\"Guinea/Kankan\"\r\n\"GN-KE\",\"Guinea/Kerouane\"\r\n\"GN-KD\",\"Guinea/Kindia\"\r\n\"GN-KS\",\"Guinea/Kissidougou\"\r\n\"GN-KB\",\"Guinea/Koubia\"\r\n\"GN-KN\",\"Guinea/Koundara\"\r\n\"GN-KO\",\"Guinea/Kouroussa\"\r\n\"GN-LA\",\"Guinea/Labe\"\r\n\"GN-LE\",\"Guinea/Lelouma\"\r\n\"GN-LO\",\"Guinea/Lola\"\r\n\"GN-MC\",\"Guinea/Macenta\"\r\n\"GN-ML\",\"Guinea/Mali\"\r\n\"GN-MM\",\"Guinea/Mamou\"\r\n\"GN-MD\",\"Guinea/Mandiana\"\r\n\"GN-NZ\",\"Guinea/Nzerekore\"\r\n\"GN-PI\",\"Guinea/Pita\"\r\n\"GN-SI\",\"Guinea/Siguiri\"\r\n\"GN-TE\",\"Guinea/Telimele\"\r\n\"GN-TO\",\"Guinea/Tougue\"\r\n\"GN-YO\",\"Guinea/Yomou\"\r\n\"GW-BA\",\"Guinea-Bissau/Bafata\"\r\n\"GW-BM\",\"Guinea-Bissau/Biombo\"\r\n\"GW-BS\",\"Guinea-Bissau/Bissau\"\r\n\"GW-BL\",\"Guinea-Bissau/Bolama\"\r\n\"GW-CA\",\"Guinea-Bissau/Cacheu\"\r\n\"GW-GA\",\"Guinea-Bissau/Gabu\"\r\n\"GW-OI\",\"Guinea-Bissau/Oio\"\r\n\"GW-QU\",\"Guinea-Bissau/Quinara\"\r\n\"GW-TO\",\"Guinea-Bissau/Tombali\"\r\n\"GY-CU\",\"Guyana/Cuyuni-Mazaruni\"\r\n\"GY-DE\",\"Guyana/Demerara-Mahaica\"\r\n\"GY-EB\",\"Guyana/East Berbice-Corentyne\"\r\n\"GY-ES\",\"Guyana/Essequibo Islands-West Demerara\"\r\n\"GY-MA\",\"Guyana/Mahaica-Berbice\"\r\n\"GY-PM\",\"Guyana/Pomeroon-Supenaam\"\r\n\"GY-UD\",\"Guyana/Upper Demerara-Berbice\"\r\n\"HT-AR\",\"Haiti/Artibonite\"\r\n\"HT-CE\",\"Haiti/Centre\"\r\n\"HT-GA\",\"Haiti/Grand' Anse\"\r\n\"HT-NI\",\"Haiti/Nippes\"\r\n\"HT-ND\",\"Haiti/Nord\"\r\n\"HT-NE\",\"Haiti/Nord-Est\"\r\n\"HT-NO\",\"Haiti/Nord-Ouest\"\r\n\"HT-OU\",\"Haiti/Ouest\"\r\n\"HT-SD\",\"Haiti/Sud\"\r\n\"HT-SE\",\"Haiti/Sud-Est\"\r\n\"HN-AT\",\"Honduras/Atlantida\"\r\n\"HN-CH\",\"Honduras/Choluteca\"\r\n\"HN-CL\",\"Honduras/Colon\"\r\n\"HN-CM\",\"Honduras/Comayagua\"\r\n\"HN-CP\",\"Honduras/Copan\"\r\n\"HN-CR\",\"Honduras/Cortes\"\r\n\"HN-EP\",\"Honduras/El Paraiso\"\r\n\"HN-FM\",\"Honduras/Francisco Morazan\"\r\n\"HN-GD\",\"Honduras/Gracias a Dios\"\r\n\"HN-IN\",\"Honduras/Intibuca\"\r\n\"HN-IB\",\"Honduras/Islas de la Bahia\"\r\n\"HN-LP\",\"Honduras/La Paz\"\r\n\"HN-LE\",\"Honduras/Lempira\"\r\n\"HN-OC\",\"Honduras/Ocotepeque\"\r\n\"HN-OL\",\"Honduras/Olancho\"\r\n\"HN-SB\",\"Honduras/Santa Barbara\"\r\n\"HN-VA\",\"Honduras/Valle\"\r\n\"HN-YO\",\"Honduras/Yoro\"\r\n\"HU-BK\",\"Hungary/Bacs-Kiskun\"\r\n\"HU-BA\",\"Hungary/Baranya\"\r\n\"HU-BE\",\"Hungary/Bekes\"\r\n\"HU-BZ\",\"Hungary/Borsod-Abauj-Zemplen\"\r\n\"HU-BU\",\"Hungary/Budapest\"\r\n\"HU-CS\",\"Hungary/Csongrad\"\r\n\"HU-FE\",\"Hungary/Fejer\"\r\n\"HU-GS\",\"Hungary/Gyor-Moson-Sopron\"\r\n\"HU-HB\",\"Hungary/Hajdu-Bihar\"\r\n\"HU-HE\",\"Hungary/Heves\"\r\n\"HU-JN\",\"Hungary/Jasz-Nagykun-Szolnok\"\r\n\"HU-KE\",\"Hungary/Komarom-Esztergom\"\r\n\"HU-NO\",\"Hungary/Nograd\"\r\n\"HU-PE\",\"Hungary/Pest\"\r\n\"HU-SO\",\"Hungary/Somogy\"\r\n\"HU-SZ\",\"Hungary/Szabolcs-Szatmar-Bereg\"\r\n\"HU-TO\",\"Hungary/Tolna\"\r\n\"HU-VA\",\"Hungary/Vas\"\r\n\"HU-VE\",\"Hungary/Veszprem\"\r\n\"HU-ZA\",\"Hungary/Zala\"\r\n\"IS-7\",\"Iceland/Austurland\"\r\n\"IS-1\",\"Iceland/Hofuoborgarsvaoio\"\r\n\"IS-6\",\"Iceland/Norourland Eystra\"\r\n\"IS-5\",\"Iceland/Norourland Vestra\"\r\n\"IS-8\",\"Iceland/Suourland\"\r\n\"IS-2\",\"Iceland/Suournes\"\r\n\"IS-4\",\"Iceland/Vestfiroir\"\r\n\"IS-3\",\"Iceland/Vesturland\"\r\n\"IN-AN\",\"India/Andaman and Nicobar Islands\"\r\n\"IN-AP\",\"India/Andhra Pradesh\"\r\n\"IN-AR\",\"India/Arunachal Pradesh\"\r\n\"IN-AS\",\"India/Assam\"\r\n\"IN-BR\",\"India/Bihar\"\r\n\"IN-CH\",\"India/Chandigarh\"\r\n\"IN-CT\",\"India/Chhattisgarh\"\r\n\"IN-DN\",\"India/Dadra and Nagar Haveli\"\r\n\"IN-DD\",\"India/Daman and Diu\"\r\n\"IN-DL\",\"India/Delhi\"\r\n\"IN-GA\",\"India/Goa\"\r\n\"IN-GJ\",\"India/Gujarat\"\r\n\"IN-HR\",\"India/Haryana\"\r\n\"IN-HP\",\"India/Himachal Pradesh\"\r\n\"IN-JK\",\"India/Jammu and Kashmir\"\r\n\"IN-JH\",\"India/Jharkhand\"\r\n\"IN-KA\",\"India/Karnataka\"\r\n\"IN-KL\",\"India/Kerala\"\r\n\"IN-LD\",\"India/Lakshadweep\"\r\n\"IN-MP\",\"India/Madhya Pradesh\"\r\n\"IN-MH\",\"India/Maharashtra\"\r\n\"IN-MN\",\"India/Manipur\"\r\n\"IN-ML\",\"India/Meghalaya\"\r\n\"IN-MZ\",\"India/Mizoram\"\r\n\"IN-NL\",\"India/Nagaland\"\r\n\"IN-OR\",\"India/Orissa\"\r\n\"IN-PY\",\"India/Puducherry\"\r\n\"IN-PB\",\"India/Punjab\"\r\n\"IN-RJ\",\"India/Rajasthan\"\r\n\"IN-SK\",\"India/Sikkim\"\r\n\"IN-TN\",\"India/Tamil Nadu\"\r\n\"IN-TR\",\"India/Tripura\"\r\n\"IN-UP\",\"India/Uttar Pradesh\"\r\n\"IN-UT\",\"India/Uttarakhand\"\r\n\"IN-WB\",\"India/West Bengal\"\r\n\"ID-AC\",\"Indonesia/Aceh\"\r\n\"ID-BA\",\"Indonesia/Bali\"\r\n\"ID-BT\",\"Indonesia/Banten\"\r\n\"ID-BE\",\"Indonesia/Bengkulu\"\r\n\"ID-GO\",\"Indonesia/Gorontalo\"\r\n\"ID-JK\",\"Indonesia/Jakarta Raya\"\r\n\"ID-JA\",\"Indonesia/Jambi\"\r\n\"ID-JB\",\"Indonesia/Jawa Barat\"\r\n\"ID-JT\",\"Indonesia/Jawa Tengah\"\r\n\"ID-JI\",\"Indonesia/Jawa Timur\"\r\n\"ID-KB\",\"Indonesia/Kalimantan Barat\"\r\n\"ID-KS\",\"Indonesia/Kalimantan Selatan\"\r\n\"ID-KT\",\"Indonesia/Kalimantan Tengah\"\r\n\"ID-KI\",\"Indonesia/Kalimantan Timur\"\r\n\"ID-BB\",\"Indonesia/Kepulauan Bangka Belitung\"\r\n\"ID-KR\",\"Indonesia/Kepulauan Riau\"\r\n\"ID-LA\",\"Indonesia/Lampung\"\r\n\"ID-MA\",\"Indonesia/Maluku\"\r\n\"ID-MU\",\"Indonesia/Maluku Utara\"\r\n\"ID-NB\",\"Indonesia/Nusa Tenggara Barat\"\r\n\"ID-NT\",\"Indonesia/Nusa Tenggara Timur\"\r\n\"ID-PA\",\"Indonesia/Papua\"\r\n\"ID-RI\",\"Indonesia/Riau\"\r\n\"ID-SR\",\"Indonesia/Sulawesi Barat\"\r\n\"ID-SN\",\"Indonesia/Sulawesi Selatan\"\r\n\"ID-ST\",\"Indonesia/Sulawesi Tengah\"\r\n\"ID-SG\",\"Indonesia/Sulawesi Tenggara\"\r\n\"ID-SA\",\"Indonesia/Sulawesi Utara\"\r\n\"ID-SB\",\"Indonesia/Sumatera Barat\"\r\n\"ID-SS\",\"Indonesia/Sumatera Selatan\"\r\n\"ID-SU\",\"Indonesia/Sumatera Utara\"\r\n\"ID-YO\",\"Indonesia/Yogyakarta\"\r\n\"IR-03\",\"Iran, Islamic Republic of/Ardabil\"\r\n\"IR-01\",\"Iran, Islamic Republic of/Azarbayjan-e Sharqi\"\r\n\"IR-06\",\"Iran, Islamic Republic of/Bushehr\"\r\n\"IR-08\",\"Iran, Islamic Republic of/Chahar Mahall va Bakhtiari\"\r\n\"IR-04\",\"Iran, Islamic Republic of/Esfahan\"\r\n\"IR-14\",\"Iran, Islamic Republic of/Fars\"\r\n\"IR-19\",\"Iran, Islamic Republic of/Gilan\"\r\n\"IR-27\",\"Iran, Islamic Republic of/Golestan\"\r\n\"IR-24\",\"Iran, Islamic Republic of/Hamadan\"\r\n\"IR-23\",\"Iran, Islamic Republic of/Hormozgan\"\r\n\"IR-05\",\"Iran, Islamic Republic of/Ilam\"\r\n\"IR-15\",\"Iran, Islamic Republic of/Kerman\"\r\n\"IR-29\",\"Iran, Islamic Republic of/Khorasan-e Janubi\"\r\n\"IR-30\",\"Iran, Islamic Republic of/Khorasan-e Razavi\"\r\n\"IR-31\",\"Iran, Islamic Republic of/Khorasan-e Shemali\"\r\n\"IR-10\",\"Iran, Islamic Republic of/Khuzestan\"\r\n\"IR-18\",\"Iran, Islamic Republic of/Kohkiluyeh va Buyer Ahmadi\"\r\n\"IR-16\",\"Iran, Islamic Republic of/Kordestan\"\r\n\"IR-20\",\"Iran, Islamic Republic of/Lorestan\"\r\n\"IR-22\",\"Iran, Islamic Republic of/Markazi\"\r\n\"IR-21\",\"Iran, Islamic Republic of/Mazandaran\"\r\n\"IR-02\",\"Iran, Islamic Republic of/Ostan-e Azarbayjan-e Gharbi\"\r\n\"IR-28\",\"Iran, Islamic Republic of/Qazvin\"\r\n\"IR-26\",\"Iran, Islamic Republic of/Qom\"\r\n\"IR-12\",\"Iran, Islamic Republic of/Semnan\"\r\n\"IR-13\",\"Iran, Islamic Republic of/Sistan va Baluchestan\"\r\n\"IR-07\",\"Iran, Islamic Republic of/Tehran\"\r\n\"IR-25\",\"Iran, Islamic Republic of/Yazd\"\r\n\"IR-11\",\"Iran, Islamic Republic of/Zanjan\"\r\n\"IQ-AN\",\"Iraq/Al Anbar\"\r\n\"IQ-BA\",\"Iraq/Al Basrah\"\r\n\"IQ-MU\",\"Iraq/Al Muthanna\"\r\n\"IQ-QA\",\"Iraq/Al Qadisiyah\"\r\n\"IQ-NA\",\"Iraq/An Najaf\"\r\n\"IQ-AR\",\"Iraq/Arbil\"\r\n\"IQ-SU\",\"Iraq/As Sulaymaniyah\"\r\n\"IQ-TS\",\"Iraq/At Ta'mim\"\r\n\"IQ-BB\",\"Iraq/Babil\"\r\n\"IQ-BG\",\"Iraq/Baghdad\"\r\n\"IQ-DA\",\"Iraq/Dahuk\"\r\n\"IQ-DQ\",\"Iraq/Dhi Qar\"\r\n\"IQ-DI\",\"Iraq/Diyala\"\r\n\"IQ-KA\",\"Iraq/Karbala'\"\r\n\"IQ-MA\",\"Iraq/Maysan\"\r\n\"IQ-NI\",\"Iraq/Ninawa\"\r\n\"IQ-SD\",\"Iraq/Salah ad Din\"\r\n\"IQ-WA\",\"Iraq/Wasit\"\r\n\"IE-CW\",\"Ireland/Carlow\"\r\n\"IE-CN\",\"Ireland/Cavan\"\r\n\"IE-CE\",\"Ireland/Clare\"\r\n\"IE-CO\",\"Ireland/Cork\"\r\n\"IE-DL\",\"Ireland/Donegal\"\r\n\"IE-D\",\"Ireland/Dublin\"\r\n\"IE-G\",\"Ireland/Galway\"\r\n\"IE-KY\",\"Ireland/Kerry\"\r\n\"IE-KE\",\"Ireland/Kildare\"\r\n\"IE-KK\",\"Ireland/Kilkenny\"\r\n\"IE-LS\",\"Ireland/Laois\"\r\n\"IE-LM\",\"Ireland/Leitrim\"\r\n\"IE-LK\",\"Ireland/Limerick\"\r\n\"IE-LD\",\"Ireland/Longford\"\r\n\"IE-LH\",\"Ireland/Louth\"\r\n\"IE-MO\",\"Ireland/Mayo\"\r\n\"IE-MH\",\"Ireland/Meath\"\r\n\"IE-MN\",\"Ireland/Monaghan\"\r\n\"IE-OY\",\"Ireland/Offaly\"\r\n\"IE-RN\",\"Ireland/Roscommon\"\r\n\"IE-SO\",\"Ireland/Sligo\"\r\n\"IE-TA\",\"Ireland/Tipperary\"\r\n\"IE-WD\",\"Ireland/Waterford\"\r\n\"IE-WH\",\"Ireland/Westmeath\"\r\n\"IE-WX\",\"Ireland/Wexford\"\r\n\"IE-WW\",\"Ireland/Wicklow\"\r\n\"IL-D\",\"Israel/HaDarom\"\r\n\"IL-M\",\"Israel/HaMerkaz\"\r\n\"IL-Z\",\"Israel/HaZafon\"\r\n\"IL-HA\",\"Israel/Hefa\"\r\n\"IL-TA\",\"Israel/Tel Aviv\"\r\n\"IL-JM\",\"Israel/Yerushalayim\"\r\n\"IT-65\",\"Italy/Abruzzi\"\r\n\"IT-77\",\"Italy/Basilicata\"\r\n\"IT-78\",\"Italy/Calabria\"\r\n\"IT-72\",\"Italy/Campania\"\r\n\"IT-45\",\"Italy/Emilia-Romagna\"\r\n\"IT-36\",\"Italy/Friuli-Venezia Giulia\"\r\n\"IT-62\",\"Italy/Lazio\"\r\n\"IT-42\",\"Italy/Liguria\"\r\n\"IT-25\",\"Italy/Lombardia\"\r\n\"IT-57\",\"Italy/Marche\"\r\n\"IT-67\",\"Italy/Molise\"\r\n\"IT-21\",\"Italy/Piemonte\"\r\n\"IT-75\",\"Italy/Puglia\"\r\n\"IT-88\",\"Italy/Sardegna\"\r\n\"IT-82\",\"Italy/Sicilia\"\r\n\"IT-52\",\"Italy/Toscana\"\r\n\"IT-32\",\"Italy/Trentino-Alto Adige\"\r\n\"IT-55\",\"Italy/Umbria\"\r\n\"IT-23\",\"Italy/Valle d'Aosta\"\r\n\"IT-34\",\"Italy/Veneto\"\r\n\"JM-13\",\"Jamaica/Clarendon\"\r\n\"JM-09\",\"Jamaica/Hanover\"\r\n\"JM-01\",\"Jamaica/Kingston\"\r\n\"JM-12\",\"Jamaica/Manchester\"\r\n\"JM-04\",\"Jamaica/Portland\"\r\n\"JM-02\",\"Jamaica/Saint Andrew\"\r\n\"JM-06\",\"Jamaica/Saint Ann\"\r\n\"JM-14\",\"Jamaica/Saint Catherine\"\r\n\"JM-11\",\"Jamaica/Saint Elizabeth\"\r\n\"JM-08\",\"Jamaica/Saint James\"\r\n\"JM-05\",\"Jamaica/Saint Mary\"\r\n\"JM-03\",\"Jamaica/Saint Thomas\"\r\n\"JM-07\",\"Jamaica/Trelawny\"\r\n\"JM-10\",\"Jamaica/Westmoreland\"\r\n\"JP-23\",\"Japan/Aichi\"\r\n\"JP-05\",\"Japan/Akita\"\r\n\"JP-02\",\"Japan/Aomori\"\r\n\"JP-12\",\"Japan/Chiba\"\r\n\"JP-38\",\"Japan/Ehime\"\r\n\"JP-18\",\"Japan/Fukui\"\r\n\"JP-40\",\"Japan/Fukuoka\"\r\n\"JP-07\",\"Japan/Fukushima\"\r\n\"JP-21\",\"Japan/Gifu\"\r\n\"JP-10\",\"Japan/Gumma\"\r\n\"JP-34\",\"Japan/Hiroshima\"\r\n\"JP-01\",\"Japan/Hokkaido\"\r\n\"JP-28\",\"Japan/Hyogo\"\r\n\"JP-08\",\"Japan/Ibaraki\"\r\n\"JP-17\",\"Japan/Ishikawa\"\r\n\"JP-03\",\"Japan/Iwate\"\r\n\"JP-37\",\"Japan/Kagawa\"\r\n\"JP-46\",\"Japan/Kagoshima\"\r\n\"JP-14\",\"Japan/Kanagawa\"\r\n\"JP-39\",\"Japan/Kochi\"\r\n\"JP-43\",\"Japan/Kumamoto\"\r\n\"JP-26\",\"Japan/Kyoto\"\r\n\"JP-24\",\"Japan/Mie\"\r\n\"JP-04\",\"Japan/Miyagi\"\r\n\"JP-45\",\"Japan/Miyazaki\"\r\n\"JP-20\",\"Japan/Nagano\"\r\n\"JP-42\",\"Japan/Nagasaki\"\r\n\"JP-29\",\"Japan/Nara\"\r\n\"JP-15\",\"Japan/Niigata\"\r\n\"JP-44\",\"Japan/Oita\"\r\n\"JP-33\",\"Japan/Okayama\"\r\n\"JP-47\",\"Japan/Okinawa\"\r\n\"JP-27\",\"Japan/Osaka\"\r\n\"JP-41\",\"Japan/Saga\"\r\n\"JP-11\",\"Japan/Saitama\"\r\n\"JP-25\",\"Japan/Shiga\"\r\n\"JP-32\",\"Japan/Shimane\"\r\n\"JP-22\",\"Japan/Shizuoka\"\r\n\"JP-09\",\"Japan/Tochigi\"\r\n\"JP-36\",\"Japan/Tokushima\"\r\n\"JP-13\",\"Japan/Tokyo\"\r\n\"JP-31\",\"Japan/Tottori\"\r\n\"JP-16\",\"Japan/Toyama\"\r\n\"JP-30\",\"Japan/Wakayama\"\r\n\"JP-06\",\"Japan/Yamagata\"\r\n\"JP-35\",\"Japan/Yamaguchi\"\r\n\"JP-19\",\"Japan/Yamanashi\"\r\n\"JO-AQ\",\"Jordan/Al 'Aqabah\"\r\n\"JO-BA\",\"Jordan/Al Balqa'\"\r\n\"JO-KA\",\"Jordan/Al Karak\"\r\n\"JO-MA\",\"Jordan/Al Mafraq\"\r\n\"JO-AM\",\"Jordan/'Amman\"\r\n\"JO-AT\",\"Jordan/At Tafilah\"\r\n\"JO-AZ\",\"Jordan/Az Zarqa'\"\r\n\"JO-IR\",\"Jordan/Irbid\"\r\n\"JO-MN\",\"Jordan/Ma'an\"\r\n\"JO-MD\",\"Jordan/Madaba\"\r\n\"KZ-ALA\",\"Kazakhstan/Almaty\"\r\n\"KZ-ALM\",\"Kazakhstan/Almaty City\"\r\n\"KZ-AKM\",\"Kazakhstan/Aqmola\"\r\n\"KZ-AKT\",\"Kazakhstan/Aqtobe\"\r\n\"KZ-AST\",\"Kazakhstan/Astana\"\r\n\"KZ-ATY\",\"Kazakhstan/Atyrau\"\r\n\"KZ-ZAP\",\"Kazakhstan/Bayqonyr\"\r\n\"KZ-MAN\",\"Kazakhstan/Mangghystau\"\r\n\"KZ-PAV\",\"Kazakhstan/Pavlodar\"\r\n\"KZ-KAR\",\"Kazakhstan/Qaraghandy\"\r\n\"KZ-KUS\",\"Kazakhstan/Qostanay\"\r\n\"KZ-KZY\",\"Kazakhstan/Qyzylorda\"\r\n\"KZ-ZHA\",\"Kazakhstan/Zhambyl\"\r\n\"KE-200\",\"Kenya/Central\"\r\n\"KE-300\",\"Kenya/Coast\"\r\n\"KE-400\",\"Kenya/Eastern\"\r\n\"KE-110\",\"Kenya/Nairobi Area\"\r\n\"KE-500\",\"Kenya/North-Eastern\"\r\n\"KE-600\",\"Kenya/Nyanza\"\r\n\"KE-700\",\"Kenya/Rift Valley\"\r\n\"KE-800\",\"Kenya/Western\"\r\n\"KI-G\",\"Kiribati/Gilbert Islands\"\r\n\"KI-L\",\"Kiribati/Line Islands\"\r\n\"KP-04\",\"Korea, Democratic People's Republic of/Chagang-do\"\r\n\"KP-09\",\"Korea, Democratic People's Republic of/Hamgyong-bukto\"\r\n\"KP-08\",\"Korea, Democratic People's Republic of/Hamgyong-namdo\"\r\n\"KP-06\",\"Korea, Democratic People's Republic of/Hwanghae-bukto\"\r\n\"KP-05\",\"Korea, Democratic People's Republic of/Hwanghae-namdo\"\r\n\"KP-07\",\"Korea, Democratic People's Republic of/Kangwon-do\"\r\n\"KP-13\",\"Korea, Democratic People's Republic of/Najin Sonbong-si\"\r\n\"KP-03\",\"Korea, Democratic People's Republic of/P'yongan-bukto\"\r\n\"KP-02\",\"Korea, Democratic People's Republic of/P'yongan-namdo\"\r\n\"KP-01\",\"Korea, Democratic People's Republic of/P'yongyang-si\"\r\n\"KP-10\",\"Korea, Democratic People's Republic of/Yanggang-do\"\r\n\"KR-49\",\"Korea, Republic of/Cheju-do\"\r\n\"KR-45\",\"Korea, Republic of/Cholla-bukto\"\r\n\"KR-46\",\"Korea, Republic of/Cholla-namdo\"\r\n\"KR-43\",\"Korea, Republic of/Ch'ungch'ong-bukto\"\r\n\"KR-44\",\"Korea, Republic of/Ch'ungch'ong-namdo\"\r\n\"KR-28\",\"Korea, Republic of/Inch'on-jikhalsi\"\r\n\"KR-42\",\"Korea, Republic of/Kangwon-do\"\r\n\"KR-29\",\"Korea, Republic of/Kwangju-jikhalsi\"\r\n\"KR-41\",\"Korea, Republic of/Kyonggi-do\"\r\n\"KR-47\",\"Korea, Republic of/Kyongsang-bukto\"\r\n\"KR-48\",\"Korea, Republic of/Kyongsang-namdo\"\r\n\"KR-26\",\"Korea, Republic of/Pusan-jikhalsi\"\r\n\"KR-11\",\"Korea, Republic of/Seoul-t'ukpyolsi\"\r\n\"KR-27\",\"Korea, Republic of/Taegu-jikhalsi\"\r\n\"KR-30\",\"Korea, Republic of/Taejon-jikhalsi\"\r\n\"KR-31\",\"Korea, Republic of/Ulsan-gwangyoksi\"\r\n\"KW-AH\",\"Kuwait/Al Ahmadi\"\r\n\"KW-KU\",\"Kuwait/Al Asimah\"\r\n\"KW-FA\",\"Kuwait/Al Farwaniyah\"\r\n\"KW-JA\",\"Kuwait/Al Jahra\"\r\n\"KW-HA\",\"Kuwait/Hawalli\"\r\n\"KW-MU\",\"Kuwait/Mubarak al Kabir\"\r\n\"KG-B\",\"Kyrgyzstan/Batken\"\r\n\"KG-GB\",\"Kyrgyzstan/Bishkek\"\r\n\"KG-C\",\"Kyrgyzstan/Chuy\"\r\n\"KG-J\",\"Kyrgyzstan/Jalal-Abad\"\r\n\"KG-N\",\"Kyrgyzstan/Naryn\"\r\n\"KG-O\",\"Kyrgyzstan/Osh\"\r\n\"KG-T\",\"Kyrgyzstan/Talas\"\r\n\"KG-Y\",\"Kyrgyzstan/Ysyk-Kol\"\r\n\"LA-AT\",\"Lao People's Democratic Republic/Attapu\"\r\n\"LA-BK\",\"Lao People's Democratic Republic/Bokeo\"\r\n\"LA-BL\",\"Lao People's Democratic Republic/Bolikhamxai\"\r\n\"LA-CH\",\"Lao People's Democratic Republic/Champasak\"\r\n\"LA-HO\",\"Lao People's Democratic Republic/Houaphan\"\r\n\"LA-KH\",\"Lao People's Democratic Republic/Khoueng Khammouan\"\r\n\"LA-PH\",\"Lao People's Democratic Republic/Khoueng Phongsali\"\r\n\"LA-SL\",\"Lao People's Democratic Republic/Khoueng Salavan\"\r\n\"LA-SV\",\"Lao People's Democratic Republic/Khoueng Savannakhet\"\r\n\"LA-VI\",\"Lao People's Democratic Republic/Khoueng Viangchan\"\r\n\"LA-XE\",\"Lao People's Democratic Republic/Khoueng Xekong\"\r\n\"LA-LP\",\"Lao People's Democratic Republic/Louangphrabang\"\r\n\"LA-LM\",\"Lao People's Democratic Republic/Loungnamtha\"\r\n\"LA-OU\",\"Lao People's Democratic Republic/Oudomxai\"\r\n\"LA-XA\",\"Lao People's Democratic Republic/Xaignabouri\"\r\n\"LA-XI\",\"Lao People's Democratic Republic/Xiangkhoang\"\r\n\"LV-011\",\"Latvia/Adazu\"\r\n\"LV-001\",\"Latvia/Aglonas\"\r\n\"LV-002\",\"Latvia/Aizkraukles\"\r\n\"LV-003\",\"Latvia/Aizputes\"\r\n\"LV-005\",\"Latvia/Alojas\"\r\n\"LV-007\",\"Latvia/Aluksnes\"\r\n\"LV-012\",\"Latvia/Babites\"\r\n\"LV-014\",\"Latvia/Baltinavas\"\r\n\"LV-015\",\"Latvia/Balvu\"\r\n\"LV-016\",\"Latvia/Bauskas\"\r\n\"LV-017\",\"Latvia/Beverinas\"\r\n\"LV-018\",\"Latvia/Brocenu\"\r\n\"LV-020\",\"Latvia/Carnikavas\"\r\n\"LV-022\",\"Latvia/Cesu\"\r\n\"LV-021\",\"Latvia/Cesvaines\"\r\n\"LV-023\",\"Latvia/Ciblas\"\r\n\"LV-025\",\"Latvia/Daugavpils\"\r\n\"LV-026\",\"Latvia/Dobeles\"\r\n\"LV-027\",\"Latvia/Dundagas\"\r\n\"LV-033\",\"Latvia/Gulbenes\"\r\n\"LV-034\",\"Latvia/Iecavas\"\r\n\"LV-037\",\"Latvia/Incukalna\"\r\n\"LV-038\",\"Latvia/Jaunjelgavas\"\r\n\"LV-039\",\"Latvia/Jaunpiebalgas\"\r\n\"LV-040\",\"Latvia/Jaunpils\"\r\n\"LV-042\",\"Latvia/Jekabpils\"\r\n\"LV-JEL\",\"Latvia/Jelgava\"\r\n\"LV-041\",\"Latvia/Jelgavas\"\r\n\"LV-JUR\",\"Latvia/Jurmala\"\r\n\"LV-052\",\"Latvia/Kekavas\"\r\n\"LV-046\",\"Latvia/Kokneses\"\r\n\"LV-047\",\"Latvia/Kraslavas\"\r\n\"LV-050\",\"Latvia/Kuldigas\"\r\n\"LV-LPX\",\"Latvia/Liepaja\"\r\n\"LV-LE\",\"Latvia/Liepajas\"\r\n\"LV-LM\",\"Latvia/Limbazu\"\r\n\"LV-057\",\"Latvia/Lubanas\"\r\n\"LV-058\",\"Latvia/Ludzas\"\r\n\"LV-059\",\"Latvia/Madonas\"\r\n\"LV-061\",\"Latvia/Malpils\"\r\n\"LV-067\",\"Latvia/Ogres\"\r\n\"LV-068\",\"Latvia/Olaines\"\r\n\"LV-069\",\"Latvia/Ozolnieku\"\r\n\"LV-073\",\"Latvia/Preilu\"\r\n\"LV-077\",\"Latvia/Rezeknes\"\r\n\"LV-RIX\",\"Latvia/Riga\"\r\n\"LV-RI\",\"Latvia/Rigas\"\r\n\"LV-079\",\"Latvia/Rojas\"\r\n\"LV-080\",\"Latvia/Ropazu\"\r\n\"LV-082\",\"Latvia/Rugaju\"\r\n\"LV-083\",\"Latvia/Rundales\"\r\n\"LV-086\",\"Latvia/Salacgrivas\"\r\n\"LV-088\",\"Latvia/Saldus\"\r\n\"LV-090\",\"Latvia/Sejas\"\r\n\"LV-091\",\"Latvia/Siguldas\"\r\n\"LV-093\",\"Latvia/Skrundas\"\r\n\"LV-095\",\"Latvia/Stopinu\"\r\n\"LV-096\",\"Latvia/Strencu\"\r\n\"LV-097\",\"Latvia/Talsu\"\r\n\"LV-099\",\"Latvia/Tukuma\"\r\n\"LV-100\",\"Latvia/Vainodes\"\r\n\"LV-101\",\"Latvia/Valkas\"\r\n\"LV-VM\",\"Latvia/Valmieras\"\r\n\"LV-103\",\"Latvia/Varkavas\"\r\n\"LV-105\",\"Latvia/Vecumnieku\"\r\n\"LV-106\",\"Latvia/Ventspils\"\r\n\"LB-AK\",\"Lebanon/Aakk\"\r\n\"LB-BH\",\"Lebanon/Baalbek-Hermel\"\r\n\"LB-BI\",\"Lebanon/Beqaa\"\r\n\"LB-BA\",\"Lebanon/Beyrouth\"\r\n\"LB-AS\",\"Lebanon/Liban-Nord\"\r\n\"LB-JA\",\"Lebanon/Liban-Sud\"\r\n\"LB-JL\",\"Lebanon/Mont-Liban\"\r\n\"LB-NA\",\"Lebanon/Nabatiye\"\r\n\"LS-D\",\"Lesotho/Berea\"\r\n\"LS-B\",\"Lesotho/Butha-Buthe\"\r\n\"LS-C\",\"Lesotho/Leribe\"\r\n\"LS-E\",\"Lesotho/Mafeteng\"\r\n\"LS-A\",\"Lesotho/Maseru\"\r\n\"LS-F\",\"Lesotho/Mohales Hoek\"\r\n\"LS-J\",\"Lesotho/Mokhotlong\"\r\n\"LS-H\",\"Lesotho/Qachas Nek\"\r\n\"LS-G\",\"Lesotho/Quthing\"\r\n\"LS-K\",\"Lesotho/Thaba-Tseka\"\r\n\"LR-BM\",\"Liberia/Bomi\"\r\n\"LR-BG\",\"Liberia/Bong\"\r\n\"LR-GP\",\"Liberia/Gbarpolu\"\r\n\"LR-GB\",\"Liberia/Grand Bassa\"\r\n\"LR-CM\",\"Liberia/Grand Cape Mount\"\r\n\"LR-GG\",\"Liberia/Grand Gedeh\"\r\n\"LR-GK\",\"Liberia/Grand Kru\"\r\n\"LR-LO\",\"Liberia/Lofa\"\r\n\"LR-MG\",\"Liberia/Margibi\"\r\n\"LR-MY\",\"Liberia/Maryland\"\r\n\"LR-MO\",\"Liberia/Montserrado\"\r\n\"LR-NI\",\"Liberia/Nimba\"\r\n\"LR-RI\",\"Liberia/River Cess\"\r\n\"LR-RG\",\"Liberia/River Gee\"\r\n\"LR-SI\",\"Liberia/Sino\"\r\n\"LY-BU\",\"Libya/Al Butnan\"\r\n\"LY-JA\",\"Libya/Al Jabal al Akhdar\"\r\n\"LY-JG\",\"Libya/Al Jabal al Gharbi\"\r\n\"LY-JI\",\"Libya/Al Jifarah\"\r\n\"LY-JU\",\"Libya/Al Jufrah\"\r\n\"LY-KF\",\"Libya/Al Kufrah\"\r\n\"LY-MJ\",\"Libya/Al Marj\"\r\n\"LY-MB\",\"Libya/Al Marqab\"\r\n\"LY-WA\",\"Libya/Al Wahat\"\r\n\"LY-NQ\",\"Libya/An Nuqat al Khams\"\r\n\"LY-ZA\",\"Libya/Az Zawiyah\"\r\n\"LY-BA\",\"Libya/Benghazi\"\r\n\"LY-DR\",\"Libya/Darnah\"\r\n\"LY-GT\",\"Libya/Ghat\"\r\n\"LY-MI\",\"Libya/Misratah\"\r\n\"LY-MQ\",\"Libya/Murzuq\"\r\n\"LY-NL\",\"Libya/Nalut\"\r\n\"LY-SB\",\"Libya/Sabha\"\r\n\"LY-SR\",\"Libya/Surt\"\r\n\"LY-TB\",\"Libya/Tripoli\"\r\n\"LY-WD\",\"Libya/Wadi al Hayat\"\r\n\"LY-WS\",\"Libya/Wadi ash Shati'\"\r\n\"LI-01\",\"Liechtenstein/Balzers\"\r\n\"LI-02\",\"Liechtenstein/Eschen\"\r\n\"LI-03\",\"Liechtenstein/Gamprin\"\r\n\"LI-04\",\"Liechtenstein/Mauren\"\r\n\"LI-05\",\"Liechtenstein/Planken\"\r\n\"LI-06\",\"Liechtenstein/Ruggell\"\r\n\"LI-07\",\"Liechtenstein/Schaan\"\r\n\"LI-08\",\"Liechtenstein/Schellenberg\"\r\n\"LI-09\",\"Liechtenstein/Triesen\"\r\n\"LI-10\",\"Liechtenstein/Triesenberg\"\r\n\"LI-11\",\"Liechtenstein/Vaduz\"\r\n\"LT-AL\",\"Lithuania/Alytaus Apskritis\"\r\n\"LT-KU\",\"Lithuania/Kauno Apskritis\"\r\n\"LT-KL\",\"Lithuania/Klaipedos Apskritis\"\r\n\"LT-MR\",\"Lithuania/Marijampoles Apskritis\"\r\n\"LT-PN\",\"Lithuania/Panevezio Apskritis\"\r\n\"LT-SA\",\"Lithuania/Siauliu Apskritis\"\r\n\"LT-TA\",\"Lithuania/Taurages Apskritis\"\r\n\"LT-TE\",\"Lithuania/Telsiu Apskritis\"\r\n\"LT-UT\",\"Lithuania/Utenos Apskritis\"\r\n\"LT-VL\",\"Lithuania/Vilniaus Apskritis\"\r\n\"LU-D\",\"Luxembourg/Diekirch\"\r\n\"LU-G\",\"Luxembourg/Grevenmacher\"\r\n\"LU-L\",\"Luxembourg/Luxembourg\"\r\n\"MK-02\",\"Macedonia, the Former Yugoslav Republic of/Aracinovo\"\r\n\"MK-03\",\"Macedonia, the Former Yugoslav Republic of/Berovo\"\r\n\"MK-04\",\"Macedonia, the Former Yugoslav Republic of/Bitola\"\r\n\"MK-05\",\"Macedonia, the Former Yugoslav Republic of/Bogdanci\"\r\n\"MK-06\",\"Macedonia, the Former Yugoslav Republic of/Bogovinje\"\r\n\"MK-07\",\"Macedonia, the Former Yugoslav Republic of/Bosilovo\"\r\n\"MK-08\",\"Macedonia, the Former Yugoslav Republic of/Brvenica\"\r\n\"MK-80\",\"Macedonia, the Former Yugoslav Republic of/Caska\"\r\n\"MK-77\",\"Macedonia, the Former Yugoslav Republic of/Centar\"\r\n\"MK-78\",\"Macedonia, the Former Yugoslav Republic of/Centar Zupa\"\r\n\"MK-81\",\"Macedonia, the Former Yugoslav Republic of/Cesinovo\"\r\n\"MK-82\",\"Macedonia, the Former Yugoslav Republic of/Cucer-Sandevo\"\r\n\"MK-21\",\"Macedonia, the Former Yugoslav Republic of/Debar\"\r\n\"MK-23\",\"Macedonia, the Former Yugoslav Republic of/Delcevo\"\r\n\"MK-25\",\"Macedonia, the Former Yugoslav Republic of/Demir Hisar\"\r\n\"MK-24\",\"Macedonia, the Former Yugoslav Republic of/Demir Kapija\"\r\n\"MK-27\",\"Macedonia, the Former Yugoslav Republic of/Dolneni\"\r\n\"MK-28\",\"Macedonia, the Former Yugoslav Republic of/Drugovo\"\r\n\"MK-17\",\"Macedonia, the Former Yugoslav Republic of/Gazi Baba\"\r\n\"MK-18\",\"Macedonia, the Former Yugoslav Republic of/Gevgelija\"\r\n\"MK-19\",\"Macedonia, the Former Yugoslav Republic of/Gostivar\"\r\n\"MK-20\",\"Macedonia, the Former Yugoslav Republic of/Gradsko\"\r\n\"MK-34\",\"Macedonia, the Former Yugoslav Republic of/Ilinden\"\r\n\"MK-35\",\"Macedonia, the Former Yugoslav Republic of/Jegunovce\"\r\n\"MK-37\",\"Macedonia, the Former Yugoslav Republic of/Karbinci\"\r\n\"MK-38\",\"Macedonia, the Former Yugoslav Republic of/Karpos\"\r\n\"MK-36\",\"Macedonia, the Former Yugoslav Republic of/Kavadarci\"\r\n\"MK-40\",\"Macedonia, the Former Yugoslav Republic of/Kicevo\"\r\n\"MK-39\",\"Macedonia, the Former Yugoslav Republic of/Kisela Voda\"\r\n\"MK-42\",\"Macedonia, the Former Yugoslav Republic of/Kocani\"\r\n\"MK-41\",\"Macedonia, the Former Yugoslav Republic of/Konce\"\r\n\"MK-43\",\"Macedonia, the Former Yugoslav Republic of/Kratovo\"\r\n\"MK-44\",\"Macedonia, the Former Yugoslav Republic of/Kriva Palanka\"\r\n\"MK-45\",\"Macedonia, the Former Yugoslav Republic of/Krivogastani\"\r\n\"MK-46\",\"Macedonia, the Former Yugoslav Republic of/Krusevo\"\r\n\"MK-47\",\"Macedonia, the Former Yugoslav Republic of/Kumanovo\"\r\n\"MK-48\",\"Macedonia, the Former Yugoslav Republic of/Lipkovo\"\r\n\"MK-49\",\"Macedonia, the Former Yugoslav Republic of/Lozovo\"\r\n\"MK-51\",\"Macedonia, the Former Yugoslav Republic of/Makedonska Kamenica\"\r\n\"MK-52\",\"Macedonia, the Former Yugoslav Republic of/Makedonski Brod\"\r\n\"MK-53\",\"Macedonia, the Former Yugoslav Republic of/Mogila\"\r\n\"MK-54\",\"Macedonia, the Former Yugoslav Republic of/Negotino\"\r\n\"MK-55\",\"Macedonia, the Former Yugoslav Republic of/Novaci\"\r\n\"MK-56\",\"Macedonia, the Former Yugoslav Republic of/Novo Selo\"\r\n\"MK-58\",\"Macedonia, the Former Yugoslav Republic of/Ohrid\"\r\n\"MK-57\",\"Macedonia, the Former Yugoslav Republic of/Oslomej\"\r\n\"MK-60\",\"Macedonia, the Former Yugoslav Republic of/Pehcevo\"\r\n\"MK-59\",\"Macedonia, the Former Yugoslav Republic of/Petrovec\"\r\n\"MK-61\",\"Macedonia, the Former Yugoslav Republic of/Plasnica\"\r\n\"MK-62\",\"Macedonia, the Former Yugoslav Republic of/Prilep\"\r\n\"MK-63\",\"Macedonia, the Former Yugoslav Republic of/Probistip\"\r\n\"MK-64\",\"Macedonia, the Former Yugoslav Republic of/Radovis\"\r\n\"MK-65\",\"Macedonia, the Former Yugoslav Republic of/Rankovce\"\r\n\"MK-66\",\"Macedonia, the Former Yugoslav Republic of/Resen\"\r\n\"MK-67\",\"Macedonia, the Former Yugoslav Republic of/Rosoman\"\r\n\"MK-68\",\"Macedonia, the Former Yugoslav Republic of/Saraj\"\r\n\"MK-70\",\"Macedonia, the Former Yugoslav Republic of/Sopiste\"\r\n\"MK-71\",\"Macedonia, the Former Yugoslav Republic of/Staro Nagoricane\"\r\n\"MK-83\",\"Macedonia, the Former Yugoslav Republic of/Stip\"\r\n\"MK-72\",\"Macedonia, the Former Yugoslav Republic of/Struga\"\r\n\"MK-73\",\"Macedonia, the Former Yugoslav Republic of/Strumica\"\r\n\"MK-74\",\"Macedonia, the Former Yugoslav Republic of/Studenicani\"\r\n\"MK-84\",\"Macedonia, the Former Yugoslav Republic of/Suto Orizari\"\r\n\"MK-69\",\"Macedonia, the Former Yugoslav Republic of/Sveti Nikole\"\r\n\"MK-75\",\"Macedonia, the Former Yugoslav Republic of/Tearce\"\r\n\"MK-76\",\"Macedonia, the Former Yugoslav Republic of/Tetovo\"\r\n\"MK-10\",\"Macedonia, the Former Yugoslav Republic of/Valandovo\"\r\n\"MK-11\",\"Macedonia, the Former Yugoslav Republic of/Vasilevo\"\r\n\"MK-13\",\"Macedonia, the Former Yugoslav Republic of/Veles\"\r\n\"MK-12\",\"Macedonia, the Former Yugoslav Republic of/Vevcani\"\r\n\"MK-14\",\"Macedonia, the Former Yugoslav Republic of/Vinica\"\r\n\"MK-15\",\"Macedonia, the Former Yugoslav Republic of/Vranestica\"\r\n\"MK-16\",\"Macedonia, the Former Yugoslav Republic of/Vrapciste\"\r\n\"MK-31\",\"Macedonia, the Former Yugoslav Republic of/Zajas\"\r\n\"MK-32\",\"Macedonia, the Former Yugoslav Republic of/Zelenikovo\"\r\n\"MK-30\",\"Macedonia, the Former Yugoslav Republic of/Zelino\"\r\n\"MK-33\",\"Macedonia, the Former Yugoslav Republic of/Zrnovci\"\r\n\"MG-T\",\"Madagascar/Antananarivo\"\r\n\"MG-D\",\"Madagascar/Antsiranana\"\r\n\"MG-F\",\"Madagascar/Fianarantsoa\"\r\n\"MG-M\",\"Madagascar/Mahajanga\"\r\n\"MG-A\",\"Madagascar/Toamasina\"\r\n\"MG-U\",\"Madagascar/Toliara\"\r\n\"MW-BA\",\"Malawi/Balaka\"\r\n\"MW-BL\",\"Malawi/Blantyre\"\r\n\"MW-CK\",\"Malawi/Chikwawa\"\r\n\"MW-CR\",\"Malawi/Chiradzulu\"\r\n\"MW-CT\",\"Malawi/Chitipa\"\r\n\"MW-DE\",\"Malawi/Dedza\"\r\n\"MW-DO\",\"Malawi/Dowa\"\r\n\"MW-KR\",\"Malawi/Karonga\"\r\n\"MW-KS\",\"Malawi/Kasungu\"\r\n\"MW-LK\",\"Malawi/Likoma\"\r\n\"MW-LI\",\"Malawi/Lilongwe\"\r\n\"MW-MH\",\"Malawi/Machinga\"\r\n\"MW-MG\",\"Malawi/Mangochi\"\r\n\"MW-MC\",\"Malawi/Mchinji\"\r\n\"MW-MU\",\"Malawi/Mulanje\"\r\n\"MW-MW\",\"Malawi/Mwanza\"\r\n\"MW-MZ\",\"Malawi/Mzimba\"\r\n\"MW-NE\",\"Malawi/Neno\"\r\n\"MW-NB\",\"Malawi/Nkhata Bay\"\r\n\"MW-NK\",\"Malawi/Nkhotakota\"\r\n\"MW-NS\",\"Malawi/Nsanje\"\r\n\"MW-NU\",\"Malawi/Ntcheu\"\r\n\"MW-NI\",\"Malawi/Ntchisi\"\r\n\"MW-PH\",\"Malawi/Phalombe\"\r\n\"MW-RU\",\"Malawi/Rumphi\"\r\n\"MW-SA\",\"Malawi/Salima\"\r\n\"MW-TH\",\"Malawi/Thyolo\"\r\n\"MW-ZO\",\"Malawi/Zomba\"\r\n\"MY-01\",\"Malaysia/Johor\"\r\n\"MY-02\",\"Malaysia/Kedah\"\r\n\"MY-03\",\"Malaysia/Kelantan\"\r\n\"MY-14\",\"Malaysia/Kuala Lumpur\"\r\n\"MY-15\",\"Malaysia/Labuan\"\r\n\"MY-04\",\"Malaysia/Melaka\"\r\n\"MY-05\",\"Malaysia/Negeri Sembilan\"\r\n\"MY-06\",\"Malaysia/Pahang\"\r\n\"MY-08\",\"Malaysia/Perak\"\r\n\"MY-09\",\"Malaysia/Perlis\"\r\n\"MY-07\",\"Malaysia/Pulau Pinang\"\r\n\"MY-16\",\"Malaysia/Putrajaya\"\r\n\"MY-12\",\"Malaysia/Sabah\"\r\n\"MY-13\",\"Malaysia/Sarawak\"\r\n\"MY-10\",\"Malaysia/Selangor\"\r\n\"MY-11\",\"Malaysia/Terengganu\"\r\n\"MV-02\",\"Maldives/Alifu\"\r\n\"MV-20\",\"Maldives/Baa\"\r\n\"MV-17\",\"Maldives/Dhaalu\"\r\n\"MV-28\",\"Maldives/Gaafu Dhaalu\"\r\n\"MV-07\",\"Maldives/Haa Alifu\"\r\n\"MV-23\",\"Maldives/Haa Dhaalu\"\r\n\"MV-26\",\"Maldives/Kaafu\"\r\n\"MV-05\",\"Maldives/Laamu\"\r\n\"MV-MLE\",\"Maldives/Maale\"\r\n\"MV-12\",\"Maldives/Meemu\"\r\n\"MV-25\",\"Maldives/Noonu\"\r\n\"MV-13\",\"Maldives/Raa\"\r\n\"MV-01\",\"Maldives/Seenu\"\r\n\"MV-24\",\"Maldives/Shaviyani\"\r\n\"MV-08\",\"Maldives/Thaa\"\r\n\"ML-BKO\",\"Mali/Bamako\"\r\n\"ML-7\",\"Mali/Gao\"\r\n\"ML-1\",\"Mali/Kayes\"\r\n\"ML-8\",\"Mali/Kidal\"\r\n\"ML-2\",\"Mali/Koulikoro\"\r\n\"ML-5\",\"Mali/Mopti\"\r\n\"ML-4\",\"Mali/Segou\"\r\n\"ML-3\",\"Mali/Sikasso\"\r\n\"ML-6\",\"Mali/Tombouctou\"\r\n\"MH-ALL\",\"Marshall Islands/Ailinglaplap Atoll\"\r\n\"MH-ALK\",\"Marshall Islands/Ailuk Atoll\"\r\n\"MH-ARN\",\"Marshall Islands/Arno Atoll\"\r\n\"MH-AUR\",\"Marshall Islands/Aur Atoll\"\r\n\"MH-EBO\",\"Marshall Islands/Ebon Atoll\"\r\n\"MH-ENI\",\"Marshall Islands/Enewetak Atoll\"\r\n\"MH-JAB\",\"Marshall Islands/Jabat Island\"\r\n\"MH-JAL\",\"Marshall Islands/Jaluit Atoll\"\r\n\"MH-KIL\",\"Marshall Islands/Kili Island\"\r\n\"MH-KWA\",\"Marshall Islands/Kwajalein Atoll\"\r\n\"MH-LAE\",\"Marshall Islands/Lae Atoll\"\r\n\"MH-LIB\",\"Marshall Islands/Lib Island\"\r\n\"MH-LIK\",\"Marshall Islands/Likiep Atoll\"\r\n\"MH-MAJ\",\"Marshall Islands/Majuro Atoll\"\r\n\"MH-MAL\",\"Marshall Islands/Maloelap Atoll\"\r\n\"MH-MEJ\",\"Marshall Islands/Mejit Island\"\r\n\"MH-MIL\",\"Marshall Islands/Mili Atoll\"\r\n\"MH-NMK\",\"Marshall Islands/Namdrik Atoll\"\r\n\"MH-NMU\",\"Marshall Islands/Namu Atoll\"\r\n\"MH-RON\",\"Marshall Islands/Rongelap Atoll\"\r\n\"MH-UJA\",\"Marshall Islands/Ujae Atoll\"\r\n\"MH-UTI\",\"Marshall Islands/Utrik Atoll\"\r\n\"MH-WTH\",\"Marshall Islands/Wotho Atoll\"\r\n\"MH-WTJ\",\"Marshall Islands/Wotje Atoll\"\r\n\"MR-07\",\"Mauritania/Adrar\"\r\n\"MR-03\",\"Mauritania/Assaba\"\r\n\"MR-05\",\"Mauritania/Brakna\"\r\n\"MR-08\",\"Mauritania/Dakhlet Nouadhibou\"\r\n\"MR-04\",\"Mauritania/Gorgol\"\r\n\"MR-10\",\"Mauritania/Guidimaka\"\r\n\"MR-01\",\"Mauritania/Hodh Ech Chargui\"\r\n\"MR-02\",\"Mauritania/Hodh El Gharbi\"\r\n\"MR-12\",\"Mauritania/Inchiri\"\r\n\"MR-NKC\",\"Mauritania/Nouakchott\"\r\n\"MR-09\",\"Mauritania/Tagant\"\r\n\"MR-11\",\"Mauritania/Tiris Zemmour\"\r\n\"MR-06\",\"Mauritania/Trarza\"\r\n\"MU-BL\",\"Mauritius/Black River\"\r\n\"MU-FL\",\"Mauritius/Flacq\"\r\n\"MU-GP\",\"Mauritius/Grand Port\"\r\n\"MU-MO\",\"Mauritius/Moka\"\r\n\"MU-PA\",\"Mauritius/Pamplemousses\"\r\n\"MU-PW\",\"Mauritius/Plaines Wilhems\"\r\n\"MU-PL\",\"Mauritius/Port Louis\"\r\n\"MU-RR\",\"Mauritius/Riviere du Rempart\"\r\n\"MU-SA\",\"Mauritius/Savanne\"\r\n\"MX-AGU\",\"Mexico/Aguascalientes\"\r\n\"MX-BCN\",\"Mexico/Baja California\"\r\n\"MX-BCS\",\"Mexico/Baja California Sur\"\r\n\"MX-CAM\",\"Mexico/Campeche\"\r\n\"MX-CHP\",\"Mexico/Chiapas\"\r\n\"MX-CHH\",\"Mexico/Chihuahua\"\r\n\"MX-COA\",\"Mexico/Coahuila de Zaragoza\"\r\n\"MX-COL\",\"Mexico/Colima\"\r\n\"MX-DIF\",\"Mexico/Distrito Federal\"\r\n\"MX-DUR\",\"Mexico/Durango\"\r\n\"MX-GUA\",\"Mexico/Guanajuato\"\r\n\"MX-GRO\",\"Mexico/Guerrero\"\r\n\"MX-HID\",\"Mexico/Hidalgo\"\r\n\"MX-JAL\",\"Mexico/Jalisco\"\r\n\"MX-MEX\",\"Mexico/Mexico\"\r\n\"MX-MIC\",\"Mexico/Michoacan de Ocampo\"\r\n\"MX-MOR\",\"Mexico/Morelos\"\r\n\"MX-NAY\",\"Mexico/Nayarit\"\r\n\"MX-NLE\",\"Mexico/Nuevo Leon\"\r\n\"MX-OAX\",\"Mexico/Oaxaca\"\r\n\"MX-PUE\",\"Mexico/Puebla\"\r\n\"MX-QUE\",\"Mexico/Queretaro de Arteaga\"\r\n\"MX-ROO\",\"Mexico/Quintana Roo\"\r\n\"MX-SLP\",\"Mexico/San Luis Potosi\"\r\n\"MX-SIN\",\"Mexico/Sinaloa\"\r\n\"MX-SON\",\"Mexico/Sonora\"\r\n\"MX-TAB\",\"Mexico/Tabasco\"\r\n\"MX-TAM\",\"Mexico/Tamaulipas\"\r\n\"MX-TLA\",\"Mexico/Tlaxcala\"\r\n\"MX-VER\",\"Mexico/Veracruz-Llave\"\r\n\"MX-YUC\",\"Mexico/Yucatan\"\r\n\"MX-ZAC\",\"Mexico/Zacatecas\"\r\n\"FM-TRK\",\"Micronesia, Federated States of/Chuuk\"\r\n\"FM-KSA\",\"Micronesia, Federated States of/Kosrae\"\r\n\"FM-PNI\",\"Micronesia, Federated States of/Pohnpei\"\r\n\"FM-YAP\",\"Micronesia, Federated States of/Yap\"\r\n\"MD-AN\",\"Moldova, Republic of/Anenii Noi\"\r\n\"MD-BA\",\"Moldova, Republic of/Balti\"\r\n\"MD-BS\",\"Moldova, Republic of/Basarabeasca\"\r\n\"MD-TI\",\"Moldova, Republic of/Bender\"\r\n\"MD-BR\",\"Moldova, Republic of/Briceni\"\r\n\"MD-CA\",\"Moldova, Republic of/Cahul\"\r\n\"MD-CL\",\"Moldova, Republic of/Calarasi\"\r\n\"MD-CT\",\"Moldova, Republic of/Cantemir\"\r\n\"MD-CS\",\"Moldova, Republic of/Causeni\"\r\n\"MD-CU\",\"Moldova, Republic of/Chisinau\"\r\n\"MD-CM\",\"Moldova, Republic of/Cimislia\"\r\n\"MD-CR\",\"Moldova, Republic of/Criuleni\"\r\n\"MD-DO\",\"Moldova, Republic of/Donduseni\"\r\n\"MD-DR\",\"Moldova, Republic of/Drochia\"\r\n\"MD-DU\",\"Moldova, Republic of/Dubasari\"\r\n\"MD-ED\",\"Moldova, Republic of/Edinet\"\r\n\"MD-FA\",\"Moldova, Republic of/Falesti\"\r\n\"MD-FL\",\"Moldova, Republic of/Floresti\"\r\n\"MD-GA\",\"Moldova, Republic of/Gagauzia\"\r\n\"MD-GL\",\"Moldova, Republic of/Glodeni\"\r\n\"MD-HI\",\"Moldova, Republic of/Hincesti\"\r\n\"MD-IA\",\"Moldova, Republic of/Ialoveni\"\r\n\"MD-LE\",\"Moldova, Republic of/Leova\"\r\n\"MD-NI\",\"Moldova, Republic of/Nisporeni\"\r\n\"MD-OC\",\"Moldova, Republic of/Ocnita\"\r\n\"MD-OR\",\"Moldova, Republic of/Orhei\"\r\n\"MD-RE\",\"Moldova, Republic of/Rezina\"\r\n\"MD-RI\",\"Moldova, Republic of/Riscani\"\r\n\"MD-SI\",\"Moldova, Republic of/Singerei\"\r\n\"MD-SD\",\"Moldova, Republic of/Soldanesti\"\r\n\"MD-SO\",\"Moldova, Republic of/Soroca\"\r\n\"MD-SV\",\"Moldova, Republic of/Stefan-Voda\"\r\n\"MD-SN\",\"Moldova, Republic of/Stinga Nistrului\"\r\n\"MD-ST\",\"Moldova, Republic of/Straseni\"\r\n\"MD-TA\",\"Moldova, Republic of/Taraclia\"\r\n\"MD-TE\",\"Moldova, Republic of/Telenesti\"\r\n\"MD-UN\",\"Moldova, Republic of/Ungheni\"\r\n\"MC-MO\",\"Monaco/Monaco\"\r\n\"MN-073\",\"Mongolia/Arhangay\"\r\n\"MN-069\",\"Mongolia/Bayanhongor\"\r\n\"MN-071\",\"Mongolia/Bayan-Olgiy\"\r\n\"MN-067\",\"Mongolia/Bulgan\"\r\n\"MN-037\",\"Mongolia/Darhan-Uul\"\r\n\"MN-061\",\"Mongolia/Dornod\"\r\n\"MN-063\",\"Mongolia/Dornogovi\"\r\n\"MN-059\",\"Mongolia/Dundgovi\"\r\n\"MN-057\",\"Mongolia/Dzavhan\"\r\n\"MN-065\",\"Mongolia/Govi-Altay\"\r\n\"MN-064\",\"Mongolia/Govisumber\"\r\n\"MN-039\",\"Mongolia/Hentiy\"\r\n\"MN-043\",\"Mongolia/Hovd\"\r\n\"MN-041\",\"Mongolia/Hovsgol\"\r\n\"MN-053\",\"Mongolia/Omnogovi\"\r\n\"MN-035\",\"Mongolia/Orhon\"\r\n\"MN-055\",\"Mongolia/Ovorhangay\"\r\n\"MN-049\",\"Mongolia/Selenge\"\r\n\"MN-051\",\"Mongolia/Suhbaatar\"\r\n\"MN-047\",\"Mongolia/Tov\"\r\n\"MN-1\",\"Mongolia/Ulaanbaatar\"\r\n\"MN-046\",\"Mongolia/Uvs\"\r\n\"ME-02\",\"Montenegro/Opstina Bar\"\r\n\"ME-05\",\"Montenegro/Opstina Budva\"\r\n\"ME-06\",\"Montenegro/Opstina Cetinje\"\r\n\"ME-07\",\"Montenegro/Opstina Danilovgrad\"\r\n\"ME-08\",\"Montenegro/Opstina Herceg Novi\"\r\n\"ME-09\",\"Montenegro/Opstina Kolasin\"\r\n\"ME-10\",\"Montenegro/Opstina Kotor\"\r\n\"ME-11\",\"Montenegro/Opstina Mojkovac\"\r\n\"ME-12\",\"Montenegro/Opstina Niksic\"\r\n\"ME-16\",\"Montenegro/Opstina Podgorica\"\r\n\"ME-19\",\"Montenegro/Opstina Tivat\"\r\n\"ME-20\",\"Montenegro/Opstina Ulcinj\"\r\n\"ME-21\",\"Montenegro/Opstina Zabljak\"\r\n\"MA-09\",\"Morocco/Chaouia-Ouardigha\"\r\n\"MA-10\",\"Morocco/Doukkala-Abda\"\r\n\"MA-05\",\"Morocco/Fes-Boulemane\"\r\n\"MA-02\",\"Morocco/Gharb-Chrarda-Beni Hssen\"\r\n\"MA-08\",\"Morocco/Grand Casablanca\"\r\n\"MA-14\",\"Morocco/Guelmim-Es Smara\"\r\n\"MA-11\",\"Morocco/Marrakech-Tensift-Al Haouz\"\r\n\"MA-06\",\"Morocco/Meknes-Tafilalet\"\r\n\"MA-04\",\"Morocco/Oriental\"\r\n\"MA-07\",\"Morocco/Rabat-Sale-Zemmour-Zaer\"\r\n\"MA-13\",\"Morocco/Souss-Massa-Dr\"\r\n\"MA-12\",\"Morocco/Tadla-Azilal\"\r\n\"MA-01\",\"Morocco/Tanger-Tetouan\"\r\n\"MA-03\",\"Morocco/Taza-Al Hoceima-Taounate\"\r\n\"MZ-P\",\"Mozambique/Cabo Delgado\"\r\n\"MZ-G\",\"Mozambique/Gaza\"\r\n\"MZ-I\",\"Mozambique/Inhambane\"\r\n\"MZ-B\",\"Mozambique/Manica\"\r\n\"MZ-L\",\"Mozambique/Maputo\"\r\n\"MZ-N\",\"Mozambique/Nampula\"\r\n\"MZ-A\",\"Mozambique/Niassa\"\r\n\"MZ-S\",\"Mozambique/Sofala\"\r\n\"MZ-T\",\"Mozambique/Tete\"\r\n\"MZ-Q\",\"Mozambique/Zambezia\"\r\n\"MM-14\",\"Myanmar/Chin State\"\r\n\"MM-07\",\"Myanmar/Irrawaddy\"\r\n\"MM-11\",\"Myanmar/Kachin State\"\r\n\"MM-12\",\"Myanmar/Kayah State\"\r\n\"MM-03\",\"Myanmar/Magwe\"\r\n\"MM-04\",\"Myanmar/Mandalay\"\r\n\"MM-15\",\"Myanmar/Mon State\"\r\n\"MM-02\",\"Myanmar/Pegu\"\r\n\"MM-16\",\"Myanmar/Rakhine State\"\r\n\"MM-01\",\"Myanmar/Sagaing\"\r\n\"MM-17\",\"Myanmar/Shan State\"\r\n\"MM-05\",\"Myanmar/Tenasserim\"\r\n\"MM-06\",\"Myanmar/Yangon\"\r\n\"NA-CA\",\"Namibia/Caprivi\"\r\n\"NA-ER\",\"Namibia/Erongo\"\r\n\"NA-HA\",\"Namibia/Hardap\"\r\n\"NA-KA\",\"Namibia/Karas\"\r\n\"NA-KU\",\"Namibia/Kunene\"\r\n\"NA-OW\",\"Namibia/Ohangwena\"\r\n\"NA-OK\",\"Namibia/Okavango\"\r\n\"NA-OH\",\"Namibia/Omaheke\"\r\n\"NA-OS\",\"Namibia/Omusati\"\r\n\"NA-ON\",\"Namibia/Oshana\"\r\n\"NA-OT\",\"Namibia/Oshikoto\"\r\n\"NA-OD\",\"Namibia/Otjozondjupa\"\r\n\"NR-14\",\"Nauru/Yaren\"\r\n\"NP-BA\",\"Nepal/Bagmati\"\r\n\"NP-BH\",\"Nepal/Bheri\"\r\n\"NP-DH\",\"Nepal/Dhawalagiri\"\r\n\"NP-GA\",\"Nepal/Gandaki\"\r\n\"NP-JA\",\"Nepal/Janakpur\"\r\n\"NP-KA\",\"Nepal/Karnali\"\r\n\"NP-KO\",\"Nepal/Kosi\"\r\n\"NP-LU\",\"Nepal/Lumbini\"\r\n\"NP-MA\",\"Nepal/Mahakali\"\r\n\"NP-ME\",\"Nepal/Mechi\"\r\n\"NP-NA\",\"Nepal/Narayani\"\r\n\"NP-RA\",\"Nepal/Rapti\"\r\n\"NP-SA\",\"Nepal/Sagarmatha\"\r\n\"NP-SE\",\"Nepal/Seti\"\r\n\"NL-DR\",\"Netherlands/Drenthe\"\r\n\"NL-FL\",\"Netherlands/Flevoland\"\r\n\"NL-FR\",\"Netherlands/Friesland\"\r\n\"NL-GE\",\"Netherlands/Gelderland\"\r\n\"NL-GR\",\"Netherlands/Groningen\"\r\n\"NL-LI\",\"Netherlands/Limburg\"\r\n\"NL-NB\",\"Netherlands/Noord-Brabant\"\r\n\"NL-NH\",\"Netherlands/Noord-Holland\"\r\n\"NL-OV\",\"Netherlands/Overijssel\"\r\n\"NL-UT\",\"Netherlands/Utrecht\"\r\n\"NL-ZE\",\"Netherlands/Zeeland\"\r\n\"NL-ZH\",\"Netherlands/Zuid-Holland\"\r\n\"NZ-AUK\",\"New Zealand/Auckland\"\r\n\"NZ-BOP\",\"New Zealand/Bay of Plenty\"\r\n\"NZ-CAN\",\"New Zealand/Canterbury\"\r\n\"NZ-CIT\",\"New Zealand/Chatham Islands\"\r\n\"NZ-GIS\",\"New Zealand/Gisborne\"\r\n\"NZ-HKB\",\"New Zealand/Hawke's Bay\"\r\n\"NZ-MWT\",\"New Zealand/Manawatu-Wanganui\"\r\n\"NZ-MBH\",\"New Zealand/Marlborough\"\r\n\"NZ-NSN\",\"New Zealand/Nelson\"\r\n\"NZ-NTL\",\"New Zealand/Northland\"\r\n\"NZ-OTA\",\"New Zealand/Otago\"\r\n\"NZ-STL\",\"New Zealand/Southland\"\r\n\"NZ-TKI\",\"New Zealand/Taranaki\"\r\n\"NZ-TAS\",\"New Zealand/Tasman\"\r\n\"NZ-WKO\",\"New Zealand/Waikato\"\r\n\"NZ-WGN\",\"New Zealand/Wellington\"\r\n\"NZ-WTC\",\"New Zealand/West Coast\"\r\n\"NI-AN\",\"Nicaragua/Autonoma Atlantico Norte\"\r\n\"NI-BO\",\"Nicaragua/Boaco\"\r\n\"NI-CA\",\"Nicaragua/Carazo\"\r\n\"NI-CI\",\"Nicaragua/Chinandega\"\r\n\"NI-CO\",\"Nicaragua/Chontales\"\r\n\"NI-ES\",\"Nicaragua/Esteli\"\r\n\"NI-GR\",\"Nicaragua/Granada\"\r\n\"NI-JI\",\"Nicaragua/Jinotega\"\r\n\"NI-LE\",\"Nicaragua/Leon\"\r\n\"NI-MD\",\"Nicaragua/Madriz\"\r\n\"NI-MN\",\"Nicaragua/Managua\"\r\n\"NI-MS\",\"Nicaragua/Masaya\"\r\n\"NI-MT\",\"Nicaragua/Matagalpa\"\r\n\"NI-NS\",\"Nicaragua/Nueva Segovia\"\r\n\"NI-AS\",\"Nicaragua/Region Autonoma Atlantico Sur\"\r\n\"NI-SJ\",\"Nicaragua/Rio San Juan\"\r\n\"NI-RI\",\"Nicaragua/Rivas\"\r\n\"NE-1\",\"Niger/Agadez\"\r\n\"NE-2\",\"Niger/Diffa\"\r\n\"NE-3\",\"Niger/Dosso\"\r\n\"NE-4\",\"Niger/Maradi\"\r\n\"NE-8\",\"Niger/Niamey\"\r\n\"NE-5\",\"Niger/Tahoua\"\r\n\"NE-6\",\"Niger/Tillaberi\"\r\n\"NE-7\",\"Niger/Zinder\"\r\n\"NG-AB\",\"Nigeria/Abia\"\r\n\"NG-AD\",\"Nigeria/Adamawa\"\r\n\"NG-AK\",\"Nigeria/Akwa Ibom\"\r\n\"NG-AN\",\"Nigeria/Anambra\"\r\n\"NG-BA\",\"Nigeria/Bauchi\"\r\n\"NG-BY\",\"Nigeria/Bayelsa\"\r\n\"NG-BE\",\"Nigeria/Benue\"\r\n\"NG-BO\",\"Nigeria/Borno\"\r\n\"NG-CR\",\"Nigeria/Cross River\"\r\n\"NG-DE\",\"Nigeria/Delta\"\r\n\"NG-EB\",\"Nigeria/Ebonyi\"\r\n\"NG-ED\",\"Nigeria/Edo\"\r\n\"NG-EK\",\"Nigeria/Ekiti\"\r\n\"NG-EN\",\"Nigeria/Enugu\"\r\n\"NG-FC\",\"Nigeria/Federal Capital Territory\"\r\n\"NG-GO\",\"Nigeria/Gombe\"\r\n\"NG-IM\",\"Nigeria/Imo\"\r\n\"NG-JI\",\"Nigeria/Jigawa\"\r\n\"NG-KD\",\"Nigeria/Kaduna\"\r\n\"NG-KN\",\"Nigeria/Kano\"\r\n\"NG-KT\",\"Nigeria/Katsina\"\r\n\"NG-KE\",\"Nigeria/Kebbi\"\r\n\"NG-KO\",\"Nigeria/Kogi\"\r\n\"NG-KW\",\"Nigeria/Kwara\"\r\n\"NG-LA\",\"Nigeria/Lagos\"\r\n\"NG-NA\",\"Nigeria/Nassarawa\"\r\n\"NG-NI\",\"Nigeria/Niger\"\r\n\"NG-OG\",\"Nigeria/Ogun\"\r\n\"NG-ON\",\"Nigeria/Ondo\"\r\n\"NG-OS\",\"Nigeria/Osun\"\r\n\"NG-OY\",\"Nigeria/Oyo\"\r\n\"NG-PL\",\"Nigeria/Plateau\"\r\n\"NG-RI\",\"Nigeria/Rivers\"\r\n\"NG-SO\",\"Nigeria/Sokoto\"\r\n\"NG-TA\",\"Nigeria/Taraba\"\r\n\"NG-YO\",\"Nigeria/Yobe\"\r\n\"NG-ZA\",\"Nigeria/Zamfara\"\r\n\"NO-02\",\"Norway/Akershus\"\r\n\"NO-09\",\"Norway/Aust-Agder\"\r\n\"NO-06\",\"Norway/Buskerud\"\r\n\"NO-20\",\"Norway/Finnmark\"\r\n\"NO-04\",\"Norway/Hedmark\"\r\n\"NO-12\",\"Norway/Hordaland\"\r\n\"NO-15\",\"Norway/More og Romsdal\"\r\n\"NO-18\",\"Norway/Nordland\"\r\n\"NO-17\",\"Norway/Nord-Trondelag\"\r\n\"NO-05\",\"Norway/Oppland\"\r\n\"NO-03\",\"Norway/Oslo\"\r\n\"NO-01\",\"Norway/Ostfold\"\r\n\"NO-11\",\"Norway/Rogaland\"\r\n\"NO-14\",\"Norway/Sogn og Fjordane\"\r\n\"NO-16\",\"Norway/Sor-Trondelag\"\r\n\"NO-08\",\"Norway/Telemark\"\r\n\"NO-19\",\"Norway/Troms\"\r\n\"NO-10\",\"Norway/Vest-Agder\"\r\n\"NO-07\",\"Norway/Vestfold\"\r\n\"OM-DA\",\"Oman/Ad Dakhiliyah\"\r\n\"OM-BA\",\"Oman/Al Batinah\"\r\n\"OM-BU\",\"Oman/Al Buraymi\"\r\n\"OM-WU\",\"Oman/Al Wusta\"\r\n\"OM-SH\",\"Oman/Ash Sharqiyah\"\r\n\"OM-ZA\",\"Oman/Az Zahirah\"\r\n\"OM-MA\",\"Oman/Masqat\"\r\n\"OM-MU\",\"Oman/Musandam\"\r\n\"OM-ZU\",\"Oman/Zufar\"\r\n\"PK-JK\",\"Pakistan/Azad Kashmir\"\r\n\"PK-BA\",\"Pakistan/Balochistan\"\r\n\"PK-TA\",\"Pakistan/Federally Administered Tribal Areas\"\r\n\"PK-IS\",\"Pakistan/Islamabad\"\r\n\"PK-NA\",\"Pakistan/Northern Areas\"\r\n\"PK-NW\",\"Pakistan/North-West Frontier\"\r\n\"PK-PB\",\"Pakistan/Punjab\"\r\n\"PK-SD\",\"Pakistan/Sindh\"\r\n\"PW-002\",\"Palau/Aimeliik\"\r\n\"PW-004\",\"Palau/Airai\"\r\n\"PW-010\",\"Palau/Angaur\"\r\n\"PW-100\",\"Palau/Kayangel\"\r\n\"PW-150\",\"Palau/Koror\"\r\n\"PW-212\",\"Palau/Melekeok\"\r\n\"PW-214\",\"Palau/Ngaraard\"\r\n\"PW-218\",\"Palau/Ngarchelong\"\r\n\"PW-222\",\"Palau/Ngardmau\"\r\n\"PW-224\",\"Palau/Ngatpang\"\r\n\"PW-228\",\"Palau/Ngiwal\"\r\n\"PW-350\",\"Palau/Peleliu\"\r\n\"PS-GZA\",\"Palestine, State of/Gaza\"\r\n\"PA-1\",\"Panama/Bocas del Toro\"\r\n\"PA-4\",\"Panama/Chiriqui\"\r\n\"PA-2\",\"Panama/Cocle\"\r\n\"PA-3\",\"Panama/Colon\"\r\n\"PA-5\",\"Panama/Darien\"\r\n\"PA-6\",\"Panama/Herrera\"\r\n\"PA-7\",\"Panama/Los Santos\"\r\n\"PA-8\",\"Panama/Panama\"\r\n\"PA-0\",\"Panama/San Blas\"\r\n\"PA-9\",\"Panama/Veraguas\"\r\n\"PG-CPK\",\"Papua New Guinea/Chimbu\"\r\n\"PG-EBR\",\"Papua New Guinea/East New Britain\"\r\n\"PG-ESW\",\"Papua New Guinea/East Sepik\"\r\n\"PG-EHG\",\"Papua New Guinea/Eastern Highlands\"\r\n\"PG-EPW\",\"Papua New Guinea/Enga\"\r\n\"PG-GPK\",\"Papua New Guinea/Gulf\"\r\n\"PG-MPM\",\"Papua New Guinea/Madang\"\r\n\"PG-MRL\",\"Papua New Guinea/Manus\"\r\n\"PG-MBA\",\"Papua New Guinea/Milne Bay\"\r\n\"PG-MPL\",\"Papua New Guinea/Morobe\"\r\n\"PG-NCD\",\"Papua New Guinea/National Capital\"\r\n\"PG-NIK\",\"Papua New Guinea/New Ireland\"\r\n\"PG-NSA\",\"Papua New Guinea/North Solomons\"\r\n\"PG-NPP\",\"Papua New Guinea/Northern\"\r\n\"PG-SAN\",\"Papua New Guinea/Sandaun\"\r\n\"PG-SHM\",\"Papua New Guinea/Southern Highlands\"\r\n\"PG-WBK\",\"Papua New Guinea/West New Britain\"\r\n\"PG-WPD\",\"Papua New Guinea/Western\"\r\n\"PG-WHM\",\"Papua New Guinea/Western Highlands\"\r\n\"PY-16\",\"Paraguay/Alto Paraguay\"\r\n\"PY-10\",\"Paraguay/Alto Parana\"\r\n\"PY-13\",\"Paraguay/Amambay\"\r\n\"PY-ASU\",\"Paraguay/Asuncion\"\r\n\"PY-19\",\"Paraguay/Boqueron\"\r\n\"PY-5\",\"Paraguay/Caaguazu\"\r\n\"PY-6\",\"Paraguay/Caazapa\"\r\n\"PY-14\",\"Paraguay/Canindeyu\"\r\n\"PY-11\",\"Paraguay/Central\"\r\n\"PY-1\",\"Paraguay/Concepcion\"\r\n\"PY-3\",\"Paraguay/Cordillera\"\r\n\"PY-4\",\"Paraguay/Guaira\"\r\n\"PY-7\",\"Paraguay/Itapua\"\r\n\"PY-8\",\"Paraguay/Misiones\"\r\n\"PY-12\",\"Paraguay/Neembucu\"\r\n\"PY-9\",\"Paraguay/Paraguari\"\r\n\"PY-15\",\"Paraguay/Presidente Hayes\"\r\n\"PY-2\",\"Paraguay/San Pedro\"\r\n\"PE-AMA\",\"Peru/Amazonas\"\r\n\"PE-ANC\",\"Peru/Ancash\"\r\n\"PE-APU\",\"Peru/Apurimac\"\r\n\"PE-ARE\",\"Peru/Arequipa\"\r\n\"PE-AYA\",\"Peru/Ayacucho\"\r\n\"PE-CAJ\",\"Peru/Cajamarca\"\r\n\"PE-CAL\",\"Peru/Callao\"\r\n\"PE-CUS\",\"Peru/Cusco\"\r\n\"PE-HUV\",\"Peru/Huancavelica\"\r\n\"PE-HUC\",\"Peru/Huanuco\"\r\n\"PE-ICA\",\"Peru/Ica\"\r\n\"PE-JUN\",\"Peru/Junin\"\r\n\"PE-LAL\",\"Peru/La Libertad\"\r\n\"PE-LAM\",\"Peru/Lambayeque\"\r\n\"PE-LIM\",\"Peru/Lima\"\r\n\"PE-LOR\",\"Peru/Loreto\"\r\n\"PE-MDD\",\"Peru/Madre de Dios\"\r\n\"PE-MOQ\",\"Peru/Moquegua\"\r\n\"PE-PAS\",\"Peru/Pasco\"\r\n\"PE-PIU\",\"Peru/Piura\"\r\n\"PE-PUN\",\"Peru/Puno\"\r\n\"PE-SAM\",\"Peru/San Martin\"\r\n\"PE-TAC\",\"Peru/Tacna\"\r\n\"PE-TUM\",\"Peru/Tumbes\"\r\n\"PE-UCA\",\"Peru/Ucayali\"\r\n\"PH-ABR\",\"Philippines/Abra\"\r\n\"PH-AGN\",\"Philippines/Agusan del Norte\"\r\n\"PH-AGS\",\"Philippines/Agusan del Sur\"\r\n\"PH-AKL\",\"Philippines/Aklan\"\r\n\"PH-ALB\",\"Philippines/Albay\"\r\n\"PH-ANT\",\"Philippines/Antique\"\r\n\"PH-AUR\",\"Philippines/Aurora\"\r\n\"PH-BAS\",\"Philippines/Basilan\"\r\n\"PH-BAN\",\"Philippines/Bataan\"\r\n\"PH-BTN\",\"Philippines/Batanes\"\r\n\"PH-BTG\",\"Philippines/Batangas\"\r\n\"PH-BEN\",\"Philippines/Benguet\"\r\n\"PH-BOH\",\"Philippines/Bohol\"\r\n\"PH-BUK\",\"Philippines/Bukidnon\"\r\n\"PH-BUL\",\"Philippines/Bulacan\"\r\n\"PH-CAG\",\"Philippines/Cagayan\"\r\n\"PH-CAN\",\"Philippines/Camarines Norte\"\r\n\"PH-CAS\",\"Philippines/Camarines Sur\"\r\n\"PH-CAM\",\"Philippines/Camiguin\"\r\n\"PH-CAP\",\"Philippines/Capiz\"\r\n\"PH-CAT\",\"Philippines/Catanduanes\"\r\n\"PH-CAV\",\"Philippines/Cavite\"\r\n\"PH-CEB\",\"Philippines/Cebu\"\r\n\"PH-NCO\",\"Philippines/Cotabato\"\r\n\"PH-11\",\"Philippines/Davao\"\r\n\"PH-DAS\",\"Philippines/Davao del Sur\"\r\n\"PH-DAO\",\"Philippines/Davao Oriental\"\r\n\"PH-EAS\",\"Philippines/Eastern Samar\"\r\n\"PH-IFU\",\"Philippines/Ifugao\"\r\n\"PH-ILN\",\"Philippines/Ilocos Norte\"\r\n\"PH-ILS\",\"Philippines/Ilocos Sur\"\r\n\"PH-ILI\",\"Philippines/Iloilo\"\r\n\"PH-ISA\",\"Philippines/Isabela\"\r\n\"PH-KAL\",\"Philippines/Kalinga-Apayao\"\r\n\"PH-LUN\",\"Philippines/La Union\"\r\n\"PH-LAG\",\"Philippines/Laguna\"\r\n\"PH-LAN\",\"Philippines/Lanao del Norte\"\r\n\"PH-LAS\",\"Philippines/Lanao del Sur\"\r\n\"PH-LEY\",\"Philippines/Leyte\"\r\n\"PH-MAG\",\"Philippines/Maguindanao\"\r\n\"PH-MAD\",\"Philippines/Marinduque\"\r\n\"PH-MAS\",\"Philippines/Masbate\"\r\n\"PH-MDC\",\"Philippines/Mindoro Occidental\"\r\n\"PH-MDR\",\"Philippines/Mindoro Oriental\"\r\n\"PH-MSC\",\"Philippines/Misamis Occidental\"\r\n\"PH-MSR\",\"Philippines/Misamis Oriental\"\r\n\"PH-MOU\",\"Philippines/Mountain\"\r\n\"PH-NEC\",\"Philippines/Negros Occidental\"\r\n\"PH-NER\",\"Philippines/Negros Oriental\"\r\n\"PH-NSA\",\"Philippines/Northern Samar\"\r\n\"PH-NUE\",\"Philippines/Nueva Ecija\"\r\n\"PH-NUV\",\"Philippines/Nueva Vizcaya\"\r\n\"PH-PLW\",\"Philippines/Palawan\"\r\n\"PH-PAM\",\"Philippines/Pampanga\"\r\n\"PH-PAN\",\"Philippines/Pangasinan\"\r\n\"PH-QUE\",\"Philippines/Quezon\"\r\n\"PH-QUI\",\"Philippines/Quirino\"\r\n\"PH-RIZ\",\"Philippines/Rizal\"\r\n\"PH-ROM\",\"Philippines/Romblon\"\r\n\"PH-WSA\",\"Philippines/Samar\"\r\n\"PH-SIG\",\"Philippines/Siquijor\"\r\n\"PH-SOR\",\"Philippines/Sorsogon\"\r\n\"PH-SCO\",\"Philippines/South Cotabato\"\r\n\"PH-SLE\",\"Philippines/Southern Leyte\"\r\n\"PH-SUK\",\"Philippines/Sultan Kudarat\"\r\n\"PH-SLU\",\"Philippines/Sulu\"\r\n\"PH-SUN\",\"Philippines/Surigao del Norte\"\r\n\"PH-SUR\",\"Philippines/Surigao del Sur\"\r\n\"PH-TAR\",\"Philippines/Tarlac\"\r\n\"PH-TAW\",\"Philippines/Tawitawi\"\r\n\"PH-ZMB\",\"Philippines/Zambales\"\r\n\"PH-ZAN\",\"Philippines/Zamboanga del Norte\"\r\n\"PH-ZAS\",\"Philippines/Zamboanga del Sur\"\r\n\"PL-DS\",\"Poland/Dolnoslaskie\"\r\n\"PL-KP\",\"Poland/Kujawsko-Pomorskie\"\r\n\"PL-LD\",\"Poland/Lodzkie\"\r\n\"PL-LU\",\"Poland/Lubelskie\"\r\n\"PL-LB\",\"Poland/Lubuskie\"\r\n\"PL-MA\",\"Poland/Malopolskie\"\r\n\"PL-MZ\",\"Poland/Mazowieckie\"\r\n\"PL-OP\",\"Poland/Opolskie\"\r\n\"PL-PK\",\"Poland/Podkarpackie\"\r\n\"PL-PD\",\"Poland/Podlaskie\"\r\n\"PL-PM\",\"Poland/Pomorskie\"\r\n\"PL-SL\",\"Poland/Slaskie\"\r\n\"PL-SK\",\"Poland/Swietokrzyskie\"\r\n\"PL-WN\",\"Poland/Warminsko-Mazurskie\"\r\n\"PL-WP\",\"Poland/Wielkopolskie\"\r\n\"PL-ZP\",\"Poland/Zachodniopomorskie\"\r\n\"PT-01\",\"Portugal/Aveiro\"\r\n\"PT-20\",\"Portugal/Azores\"\r\n\"PT-02\",\"Portugal/Beja\"\r\n\"PT-03\",\"Portugal/Braga\"\r\n\"PT-04\",\"Portugal/Braganca\"\r\n\"PT-05\",\"Portugal/Castelo Branco\"\r\n\"PT-06\",\"Portugal/Coimbra\"\r\n\"PT-07\",\"Portugal/Evora\"\r\n\"PT-08\",\"Portugal/Faro\"\r\n\"PT-09\",\"Portugal/Guarda\"\r\n\"PT-10\",\"Portugal/Leiria\"\r\n\"PT-11\",\"Portugal/Lisboa\"\r\n\"PT-30\",\"Portugal/Madeira\"\r\n\"PT-12\",\"Portugal/Portalegre\"\r\n\"PT-13\",\"Portugal/Porto\"\r\n\"PT-14\",\"Portugal/Santarem\"\r\n\"PT-15\",\"Portugal/Setubal\"\r\n\"PT-16\",\"Portugal/Viana do Castelo\"\r\n\"PT-17\",\"Portugal/Vila Real\"\r\n\"PT-18\",\"Portugal/Viseu\"\r\n\"QA-DA\",\"Qatar/Ad Dawhah\"\r\n\"QA-KH\",\"Qatar/Al Khawr\"\r\n\"QA-WA\",\"Qatar/Al Wakrah\"\r\n\"QA-RA\",\"Qatar/Ar Rayyan\"\r\n\"QA-ZA\",\"Qatar/Az Za'ayin\"\r\n\"QA-MS\",\"Qatar/Madinat ach Shamal\"\r\n\"QA-US\",\"Qatar/Umm Salal\"\r\n\"RO-AB\",\"Romania/Alba\"\r\n\"RO-AR\",\"Romania/Arad\"\r\n\"RO-AG\",\"Romania/Arges\"\r\n\"RO-BC\",\"Romania/Bacau\"\r\n\"RO-BH\",\"Romania/Bihor\"\r\n\"RO-BN\",\"Romania/Bistrita-Nasaud\"\r\n\"RO-BT\",\"Romania/Botosani\"\r\n\"RO-BR\",\"Romania/Braila\"\r\n\"RO-BV\",\"Romania/Brasov\"\r\n\"RO-B\",\"Romania/Bucuresti\"\r\n\"RO-BZ\",\"Romania/Buzau\"\r\n\"RO-CL\",\"Romania/Calarasi\"\r\n\"RO-CS\",\"Romania/Caras-Severin\"\r\n\"RO-CJ\",\"Romania/Cluj\"\r\n\"RO-CT\",\"Romania/Constanta\"\r\n\"RO-CV\",\"Romania/Covasna\"\r\n\"RO-DB\",\"Romania/Dambovita\"\r\n\"RO-DJ\",\"Romania/Dolj\"\r\n\"RO-GL\",\"Romania/Galati\"\r\n\"RO-GR\",\"Romania/Giurgiu\"\r\n\"RO-GJ\",\"Romania/Gorj\"\r\n\"RO-HR\",\"Romania/Harghita\"\r\n\"RO-HD\",\"Romania/Hunedoara\"\r\n\"RO-IL\",\"Romania/Ialomita\"\r\n\"RO-IS\",\"Romania/Iasi\"\r\n\"RO-IF\",\"Romania/Ilfov\"\r\n\"RO-MM\",\"Romania/Maramures\"\r\n\"RO-MH\",\"Romania/Mehedinti\"\r\n\"RO-MS\",\"Romania/Mures\"\r\n\"RO-NT\",\"Romania/Neamt\"\r\n\"RO-OT\",\"Romania/Olt\"\r\n\"RO-PH\",\"Romania/Prahova\"\r\n\"RO-SJ\",\"Romania/Salaj\"\r\n\"RO-SM\",\"Romania/Satu Mare\"\r\n\"RO-SB\",\"Romania/Sibiu\"\r\n\"RO-SV\",\"Romania/Suceava\"\r\n\"RO-TR\",\"Romania/Teleorman\"\r\n\"RO-TM\",\"Romania/Timis\"\r\n\"RO-TL\",\"Romania/Tulcea\"\r\n\"RO-VL\",\"Romania/Valcea\"\r\n\"RO-VS\",\"Romania/Vaslui\"\r\n\"RO-VN\",\"Romania/Vrancea\"\r\n\"RU-AD\",\"Russian Federation/Adygeya\"\r\n\"RU-ALT\",\"Russian Federation/Altaisky krai\"\r\n\"RU-AMU\",\"Russian Federation/Amur\"\r\n\"RU-ARK\",\"Russian Federation/Arkhangelsk\"\r\n\"RU-AST\",\"Russian Federation/Astrakhan'\"\r\n\"RU-BA\",\"Russian Federation/Bashkortostan\"\r\n\"RU-BEL\",\"Russian Federation/Belgorod\"\r\n\"RU-BRY\",\"Russian Federation/Bryansk\"\r\n\"RU-BU\",\"Russian Federation/Buryat\"\r\n\"RU-CHU\",\"Russian Federation/Chukot\"\r\n\"RU-CU\",\"Russian Federation/Chuvashia\"\r\n\"RU-DA\",\"Russian Federation/Dagestan\"\r\n\"RU-AL\",\"Russian Federation/Gorno-Altay\"\r\n\"RU-IN\",\"Russian Federation/Ingush\"\r\n\"RU-IRK\",\"Russian Federation/Irkutsk\"\r\n\"RU-IVA\",\"Russian Federation/Ivanovo\"\r\n\"RU-KB\",\"Russian Federation/Kabardin-Balkar\"\r\n\"RU-KGD\",\"Russian Federation/Kaliningrad\"\r\n\"RU-KL\",\"Russian Federation/Kalmyk\"\r\n\"RU-KLU\",\"Russian Federation/Kaluga\"\r\n\"RU-DVD\",\"Russian Federation/Kamchatka\"\r\n\"RU-KC\",\"Russian Federation/Karachay-Cherkess\"\r\n\"RU-KR\",\"Russian Federation/Karelia\"\r\n\"RU-KEM\",\"Russian Federation/Kemerovo\"\r\n\"RU-KHA\",\"Russian Federation/Khabarovsk\"\r\n\"RU-KK\",\"Russian Federation/Khakass\"\r\n\"RU-KHM\",\"Russian Federation/Khanty-Mansiy\"\r\n\"RU-KIR\",\"Russian Federation/Kirov\"\r\n\"RU-KO\",\"Russian Federation/Komi\"\r\n\"RU-KOS\",\"Russian Federation/Kostroma\"\r\n\"RU-KDA\",\"Russian Federation/Krasnoyarskiy Kray\"\r\n\"RU-KGN\",\"Russian Federation/Kurgan\"\r\n\"RU-KRS\",\"Russian Federation/Kursk\"\r\n\"RU-LEN\",\"Russian Federation/Leningrad\"\r\n\"RU-LIP\",\"Russian Federation/Lipetsk\"\r\n\"RU-MAG\",\"Russian Federation/Magadan\"\r\n\"RU-ME\",\"Russian Federation/Mariy-El\"\r\n\"RU-MO\",\"Russian Federation/Mordovia\"\r\n\"RU-MOW\",\"Russian Federation/Moskva\"\r\n\"RU-MUR\",\"Russian Federation/Murmansk\"\r\n\"RU-NEN\",\"Russian Federation/Nenets\"\r\n\"RU-NIZ\",\"Russian Federation/Nizhegorod\"\r\n\"RU-NGR\",\"Russian Federation/Novgorod\"\r\n\"RU-NVS\",\"Russian Federation/Novosibirsk\"\r\n\"RU-OMS\",\"Russian Federation/Omsk\"\r\n\"RU-ORL\",\"Russian Federation/Orel\"\r\n\"RU-ORE\",\"Russian Federation/Orenburg\"\r\n\"RU-PNZ\",\"Russian Federation/Penza\"\r\n\"RU-PER\",\"Russian Federation/Permskiy Kray\"\r\n\"RU-PRI\",\"Russian Federation/Primor'ye\"\r\n\"RU-PSK\",\"Russian Federation/Pskov\"\r\n\"RU-ROS\",\"Russian Federation/Rostov\"\r\n\"RU-RYA\",\"Russian Federation/Ryazan'\"\r\n\"RU-SPE\",\"Russian Federation/Saint Petersburg City\"\r\n\"RU-SA\",\"Russian Federation/Sakha\"\r\n\"RU-SAK\",\"Russian Federation/Sakhalin\"\r\n\"RU-SAM\",\"Russian Federation/Samara\"\r\n\"RU-SAR\",\"Russian Federation/Saratov\"\r\n\"RU-SMO\",\"Russian Federation/Smolensk\"\r\n\"RU-STA\",\"Russian Federation/Stavropol'\"\r\n\"RU-SVE\",\"Russian Federation/Sverdlovsk\"\r\n\"RU-TAM\",\"Russian Federation/Tambovskaya oblast\"\r\n\"RU-TA\",\"Russian Federation/Tatarstan\"\r\n\"RU-TOM\",\"Russian Federation/Tomsk\"\r\n\"RU-TUL\",\"Russian Federation/Tula\"\r\n\"RU-TY\",\"Russian Federation/Tuva\"\r\n\"RU-TVE\",\"Russian Federation/Tver'\"\r\n\"RU-TYU\",\"Russian Federation/Tyumen'\"\r\n\"RU-UD\",\"Russian Federation/Udmurt\"\r\n\"RU-ULY\",\"Russian Federation/Ul'yanovsk\"\r\n\"RU-VLA\",\"Russian Federation/Vladimir\"\r\n\"RU-VGG\",\"Russian Federation/Volgograd\"\r\n\"RU-VLG\",\"Russian Federation/Vologda\"\r\n\"RU-VOR\",\"Russian Federation/Voronezh\"\r\n\"RU-YAN\",\"Russian Federation/Yamal-Nenets\"\r\n\"RU-YAR\",\"Russian Federation/Yaroslavl'\"\r\n\"RU-YEV\",\"Russian Federation/Yevrey\"\r\n\"RU-ZAB\",\"Russian Federation/Zabaykalsky\"\r\n\"RW-02\",\"Rwanda/Est\"\r\n\"RW-01\",\"Rwanda/Kigali\"\r\n\"RW-03\",\"Rwanda/Nord\"\r\n\"RW-04\",\"Rwanda/Ouest\"\r\n\"RW-05\",\"Rwanda/Sud\"\r\n\"SH-AC\",\"Saint Helena, Ascension and Tristan da Cunha/Ascension\"\r\n\"SH-HL\",\"Saint Helena, Ascension and Tristan da Cunha/Saint Helena\"\r\n\"SH-TA\",\"Saint Helena, Ascension and Tristan da Cunha/Tristan da Cunha\"\r\n\"KN-03\",\"Saint Kitts and Nevis/Saint George Basseterre\"\r\n\"KN-09\",\"Saint Kitts and Nevis/Saint Paul Charlestown\"\r\n\"LC-01\",\"Saint Lucia/Anse-la-Raye\"\r\n\"LC-02\",\"Saint Lucia/Castries\"\r\n\"LC-05\",\"Saint Lucia/Dennery\"\r\n\"LC-06\",\"Saint Lucia/Gros-Islet\"\r\n\"LC-07\",\"Saint Lucia/Laborie\"\r\n\"LC-08\",\"Saint Lucia/Micoud\"\r\n\"LC-10\",\"Saint Lucia/Soufriere\"\r\n\"LC-11\",\"Saint Lucia/Vieux-Fort\"\r\n\"VC-01\",\"Saint Vincent and the Grenadines/Charlotte\"\r\n\"VC-04\",\"Saint Vincent and the Grenadines/Saint George\"\r\n\"WS-AA\",\"Samoa/A'ana\"\r\n\"WS-AT\",\"Samoa/Atua\"\r\n\"WS-GI\",\"Samoa/Gagaifomauga\"\r\n\"WS-PA\",\"Samoa/Palauli\"\r\n\"WS-TU\",\"Samoa/Tuamasaga\"\r\n\"SM-01\",\"San Marino/Acquaviva\"\r\n\"SM-02\",\"San Marino/Chiesanuova\"\r\n\"SM-07\",\"San Marino/San Marino\"\r\n\"SM-09\",\"San Marino/Serravalle\"\r\n\"ST-P\",\"Sao Tome and Principe/Principe\"\r\n\"ST-S\",\"Sao Tome and Principe/Sao Tome\"\r\n\"SA-11\",\"Saudi Arabia/Al Bahah\"\r\n\"SA-08\",\"Saudi Arabia/Al Hudud ash Shamaliyah\"\r\n\"SA-12\",\"Saudi Arabia/Al Jawf\"\r\n\"SA-03\",\"Saudi Arabia/Al Madinah\"\r\n\"SA-05\",\"Saudi Arabia/Al Qasim\"\r\n\"SA-01\",\"Saudi Arabia/Ar Riyad\"\r\n\"SA-04\",\"Saudi Arabia/Ash Sharqiyah\"\r\n\"SA-14\",\"Saudi Arabia/Asir\"\r\n\"SA-06\",\"Saudi Arabia/Ha'il\"\r\n\"SA-09\",\"Saudi Arabia/Jizan\"\r\n\"SA-02\",\"Saudi Arabia/Makkah\"\r\n\"SA-10\",\"Saudi Arabia/Najran\"\r\n\"SA-07\",\"Saudi Arabia/Tabuk\"\r\n\"SN-DK\",\"Senegal/Dakar\"\r\n\"SN-DB\",\"Senegal/Diourbel\"\r\n\"SN-FK\",\"Senegal/Fatick\"\r\n\"SN-KA\",\"Senegal/Kaffrine\"\r\n\"SN-KL\",\"Senegal/Kaolack\"\r\n\"SN-KE\",\"Senegal/Kedougou\"\r\n\"SN-KD\",\"Senegal/Kolda\"\r\n\"SN-LG\",\"Senegal/Louga\"\r\n\"SN-MT\",\"Senegal/Matam\"\r\n\"SN-SL\",\"Senegal/Saint-Louis\"\r\n\"SN-SE\",\"Senegal/Sedhiou\"\r\n\"SN-TC\",\"Senegal/Tambacounda\"\r\n\"SN-TH\",\"Senegal/Thies\"\r\n\"SN-ZG\",\"Senegal/Ziguinchor\"\r\n\"RS-KM\",\"Serbia/Kosovo\"\r\n\"RS-VO\",\"Serbia/Vojvodina\"\r\n\"SC-16\",\"Seychelles/English River\"\r\n\"SL-E\",\"Sierra Leone/Eastern\"\r\n\"SL-N\",\"Sierra Leone/Northern\"\r\n\"SL-S\",\"Sierra Leone/Southern\"\r\n\"SL-W\",\"Sierra Leone/Western Area\"\r\n\"SG-01\",\"Singapore/Singapore\"\r\n\"SK-BC\",\"Slovakia/Banska Bystrica\"\r\n\"SK-BL\",\"Slovakia/Bratislava\"\r\n\"SK-KI\",\"Slovakia/Kosice\"\r\n\"SK-NI\",\"Slovakia/Nitra\"\r\n\"SK-PV\",\"Slovakia/Presov\"\r\n\"SK-TC\",\"Slovakia/Trencin\"\r\n\"SK-TA\",\"Slovakia/Trnava\"\r\n\"SK-ZI\",\"Slovakia/Zilina\"\r\n\"SI-001\",\"Slovenia/Ajdovscina\"\r\n\"SI-003\",\"Slovenia/Bled\"\r\n\"SI-004\",\"Slovenia/Bohinj\"\r\n\"SI-005\",\"Slovenia/Borovnica\"\r\n\"SI-006\",\"Slovenia/Bovec\"\r\n\"SI-009\",\"Slovenia/Brezice\"\r\n\"SI-008\",\"Slovenia/Brezovica\"\r\n\"SI-011\",\"Slovenia/Celje\"\r\n\"SI-013\",\"Slovenia/Cerknica\"\r\n\"SI-014\",\"Slovenia/Cerkno\"\r\n\"SI-015\",\"Slovenia/Crensovci\"\r\n\"SI-017\",\"Slovenia/Crnomelj\"\r\n\"SI-018\",\"Slovenia/Destrnik\"\r\n\"SI-019\",\"Slovenia/Divaca\"\r\n\"SI-023\",\"Slovenia/Domzale\"\r\n\"SI-025\",\"Slovenia/Dravograd\"\r\n\"SI-029\",\"Slovenia/Gornja Radgona\"\r\n\"SI-032\",\"Slovenia/Grosuplje\"\r\n\"SI-160\",\"Slovenia/Hoce-Slivnica\"\r\n\"SI-162\",\"Slovenia/Horjul\"\r\n\"SI-034\",\"Slovenia/Hrastnik\"\r\n\"SI-036\",\"Slovenia/Idrija\"\r\n\"SI-037\",\"Slovenia/Ig\"\r\n\"SI-038\",\"Slovenia/Ilirska Bistrica\"\r\n\"SI-039\",\"Slovenia/Ivancna Gorica\"\r\n\"SI-040\",\"Slovenia/Izola-Isola\"\r\n\"SI-041\",\"Slovenia/Jesenice\"\r\n\"SI-043\",\"Slovenia/Kamnik\"\r\n\"SI-044\",\"Slovenia/Kanal\"\r\n\"SI-045\",\"Slovenia/Kidricevo\"\r\n\"SI-046\",\"Slovenia/Kobarid\"\r\n\"SI-048\",\"Slovenia/Kocevje\"\r\n\"SI-050\",\"Slovenia/Koper-Capodistria\"\r\n\"SI-052\",\"Slovenia/Kranj\"\r\n\"SI-053\",\"Slovenia/Kranjska Gora\"\r\n\"SI-054\",\"Slovenia/Krsko\"\r\n\"SI-057\",\"Slovenia/Lasko\"\r\n\"SI-058\",\"Slovenia/Lenart\"\r\n\"SI-059\",\"Slovenia/Lendava\"\r\n\"SI-060\",\"Slovenia/Litija\"\r\n\"SI-061\",\"Slovenia/Ljubljana\"\r\n\"SI-063\",\"Slovenia/Ljutomer\"\r\n\"SI-064\",\"Slovenia/Logatec\"\r\n\"SI-208\",\"Slovenia/Log-Dragomer\"\r\n\"SI-167\",\"Slovenia/Lovrenc na Pohorju\"\r\n\"SI-070\",\"Slovenia/Maribor\"\r\n\"SI-071\",\"Slovenia/Medvode\"\r\n\"SI-072\",\"Slovenia/Menges\"\r\n\"SI-073\",\"Slovenia/Metlika\"\r\n\"SI-074\",\"Slovenia/Mezica\"\r\n\"SI-169\",\"Slovenia/Miklavz na Dravskem Polju\"\r\n\"SI-075\",\"Slovenia/Miren-Kostanjevica\"\r\n\"SI-076\",\"Slovenia/Mislinja\"\r\n\"SI-079\",\"Slovenia/Mozirje\"\r\n\"SI-080\",\"Slovenia/Murska Sobota\"\r\n\"SI-081\",\"Slovenia/Muta\"\r\n\"SI-084\",\"Slovenia/Nova Gorica\"\r\n\"SI-085\",\"Slovenia/Novo Mesto\"\r\n\"SI-086\",\"Slovenia/Odranci\"\r\n\"SI-171\",\"Slovenia/Oplotnica\"\r\n\"SI-087\",\"Slovenia/Ormoz\"\r\n\"SI-090\",\"Slovenia/Piran\"\r\n\"SI-091\",\"Slovenia/Pivka\"\r\n\"SI-200\",\"Slovenia/Poljcane\"\r\n\"SI-173\",\"Slovenia/Polzela\"\r\n\"SI-094\",\"Slovenia/Postojna\"\r\n\"SI-174\",\"Slovenia/Prebold\"\r\n\"SI-175\",\"Slovenia/Prevalje\"\r\n\"SI-096\",\"Slovenia/Ptuj\"\r\n\"SI-098\",\"Slovenia/Racam\"\r\n\"SI-099\",\"Slovenia/Radece\"\r\n\"SI-100\",\"Slovenia/Radenci\"\r\n\"SI-101\",\"Slovenia/Radlje ob Dravi\"\r\n\"SI-102\",\"Slovenia/Radovljica\"\r\n\"SI-103\",\"Slovenia/Ravne na Koroskem\"\r\n\"SI-104\",\"Slovenia/Ribnica\"\r\n\"SI-106\",\"Slovenia/Rogaska Slatina\"\r\n\"SI-108\",\"Slovenia/Ruse\"\r\n\"SI-183\",\"Slovenia/Sempeter-Vrtojba\"\r\n\"SI-117\",\"Slovenia/Sencur\"\r\n\"SI-118\",\"Slovenia/Sentilj\"\r\n\"SI-120\",\"Slovenia/Sentjur pri Celju\"\r\n\"SI-110\",\"Slovenia/Sevnica\"\r\n\"SI-111\",\"Slovenia/Sezana\"\r\n\"SI-122\",\"Slovenia/Skofja Loka\"\r\n\"SI-123\",\"Slovenia/Skofljica\"\r\n\"SI-112\",\"Slovenia/Slovenj Gradec\"\r\n\"SI-113\",\"Slovenia/Slovenska Bistrica\"\r\n\"SI-114\",\"Slovenia/Slovenske Konjice\"\r\n\"SI-126\",\"Slovenia/Sostanj\"\r\n\"SI-127\",\"Slovenia/Store\"\r\n\"SI-203\",\"Slovenia/Straza\"\r\n\"SI-128\",\"Slovenia/Tolmin\"\r\n\"SI-129\",\"Slovenia/Trbovlje\"\r\n\"SI-130\",\"Slovenia/Trebnje\"\r\n\"SI-131\",\"Slovenia/Trzic\"\r\n\"SI-186\",\"Slovenia/Trzin\"\r\n\"SI-132\",\"Slovenia/Turnisce\"\r\n\"SI-133\",\"Slovenia/Velenje\"\r\n\"SI-136\",\"Slovenia/Vipava\"\r\n\"SI-138\",\"Slovenia/Vodice\"\r\n\"SI-139\",\"Slovenia/Vojnik\"\r\n\"SI-140\",\"Slovenia/Vrhnika\"\r\n\"SI-141\",\"Slovenia/Vuzenica\"\r\n\"SI-142\",\"Slovenia/Zagorje ob Savi\"\r\n\"SI-190\",\"Slovenia/Zalec\"\r\n\"SI-146\",\"Slovenia/Zelezniki\"\r\n\"SI-147\",\"Slovenia/Ziri\"\r\n\"SI-144\",\"Slovenia/Zrece\"\r\n\"SI-193\",\"Slovenia/Zuzemberk\"\r\n\"SB-CE\",\"Solomon Islands/Central\"\r\n\"SB-GU\",\"Solomon Islands/Guadalcanal\"\r\n\"SB-IS\",\"Solomon Islands/Isabel\"\r\n\"SB-MK\",\"Solomon Islands/Makira\"\r\n\"SB-ML\",\"Solomon Islands/Malaita\"\r\n\"SB-WE\",\"Solomon Islands/Western\"\r\n\"SO-AW\",\"Somalia/Awdal\"\r\n\"SO-BK\",\"Somalia/Bakool\"\r\n\"SO-BN\",\"Somalia/Banaadir\"\r\n\"SO-BR\",\"Somalia/Bari\"\r\n\"SO-BY\",\"Somalia/Bay\"\r\n\"SO-GA\",\"Somalia/Galguduud\"\r\n\"SO-GE\",\"Somalia/Gedo\"\r\n\"SO-HI\",\"Somalia/Hiiraan\"\r\n\"SO-JD\",\"Somalia/Jubbada Dhexe\"\r\n\"SO-JH\",\"Somalia/Jubbada Hoose\"\r\n\"SO-MU\",\"Somalia/Mudug\"\r\n\"SO-NU\",\"Somalia/Nugaal\"\r\n\"SO-SA\",\"Somalia/Sanaag\"\r\n\"SO-SD\",\"Somalia/Shabeellaha Dhexe\"\r\n\"SO-SH\",\"Somalia/Shabeellaha Hoose\"\r\n\"SO-SO\",\"Somalia/Sool\"\r\n\"SO-TO\",\"Somalia/Togdheer\"\r\n\"SO-WO\",\"Somalia/Woqooyi Galbeed\"\r\n\"ZA-EC\",\"South Africa/Eastern Cape\"\r\n\"ZA-FS\",\"South Africa/Free State\"\r\n\"ZA-GT\",\"South Africa/Gauteng\"\r\n\"ZA-NL\",\"South Africa/KwaZulu-Natal\"\r\n\"ZA-LP\",\"South Africa/Limpopo\"\r\n\"ZA-MP\",\"South Africa/Mpumalanga\"\r\n\"ZA-NC\",\"South Africa/Northern Cape\"\r\n\"ZA-NW\",\"South Africa/North-West\"\r\n\"ZA-WC\",\"South Africa/Western Cape\"\r\n\"SS-EC\",\"South Sudan/Central Equatoria\"\r\n\"SS-EE\",\"South Sudan/Eastern Equatoria\"\r\n\"SS-JG\",\"South Sudan/Jonglei\"\r\n\"SS-LK\",\"South Sudan/Lakes\"\r\n\"SS-BN\",\"South Sudan/Northern Bahr el Ghazal\"\r\n\"SS-UY\",\"South Sudan/Unity\"\r\n\"SS-NU\",\"South Sudan/Upper Nile\"\r\n\"SS-WR\",\"South Sudan/Warrap\"\r\n\"SS-BW\",\"South Sudan/Western Bahr el Ghazal\"\r\n\"SS-EW\",\"South Sudan/Western Equatoria\"\r\n\"ES-AN\",\"Spain/Andalucia\"\r\n\"ES-AR\",\"Spain/Aragon\"\r\n\"ES-AS\",\"Spain/Asturias\"\r\n\"ES-CN\",\"Spain/Canarias\"\r\n\"ES-CB\",\"Spain/Cantabria\"\r\n\"ES-CL\",\"Spain/Castilla y Leon\"\r\n\"ES-CM\",\"Spain/Castilla-La Mancha\"\r\n\"ES-CT\",\"Spain/Catalonia\"\r\n\"ES-CE\",\"Spain/Ceuta\"\r\n\"ES-VC\",\"Spain/Comunidad Valenciana\"\r\n\"ES-EX\",\"Spain/Extremadura\"\r\n\"ES-GA\",\"Spain/Galicia\"\r\n\"ES-IB\",\"Spain/Islas Baleares\"\r\n\"ES-RI\",\"Spain/La Rioja\"\r\n\"ES-MD\",\"Spain/Madrid\"\r\n\"ES-ML\",\"Spain/Melilla\"\r\n\"ES-MC\",\"Spain/Murcia\"\r\n\"ES-NC\",\"Spain/Navarra\"\r\n\"ES-PV\",\"Spain/Pais Vasco\"\r\n\"LK-9\",\"Sri Lanka/Sabaragamuwa\"\r\n\"LK-8\",\"Sri Lanka/Uva\"\r\n\"SD-NB\",\"Sudan/Blue Nile\"\r\n\"SD-GD\",\"Sudan/Gedarif\"\r\n\"SD-GZ\",\"Sudan/Gezira\"\r\n\"SD-KA\",\"Sudan/Kassala\"\r\n\"SD-KH\",\"Sudan/Khartoum\"\r\n\"SD-DN\",\"Sudan/North Darfur\"\r\n\"SD-KN\",\"Sudan/North Kordufan\"\r\n\"SD-NO\",\"Sudan/Northern\"\r\n\"SD-RS\",\"Sudan/Red Sea\"\r\n\"SD-NR\",\"Sudan/River Nile\"\r\n\"SD-SI\",\"Sudan/Sennar\"\r\n\"SD-DS\",\"Sudan/South Darfur\"\r\n\"SD-KS\",\"Sudan/South Kordufan\"\r\n\"SD-DW\",\"Sudan/West Darfur\"\r\n\"SD-NW\",\"Sudan/White Nile\"\r\n\"SR-BR\",\"Suriname/Brokopondo\"\r\n\"SR-CM\",\"Suriname/Commewijne\"\r\n\"SR-CR\",\"Suriname/Coronie\"\r\n\"SR-MA\",\"Suriname/Marowijne\"\r\n\"SR-NI\",\"Suriname/Nickerie\"\r\n\"SR-PR\",\"Suriname/Para\"\r\n\"SR-PM\",\"Suriname/Paramaribo\"\r\n\"SR-SA\",\"Suriname/Saramacca\"\r\n\"SR-WA\",\"Suriname/Wanica\"\r\n\"SZ-HH\",\"Swaziland/Hhohho\"\r\n\"SZ-LU\",\"Swaziland/Lubombo\"\r\n\"SZ-MA\",\"Swaziland/Manzini\"\r\n\"SZ-SH\",\"Swaziland/Shiselweni\"\r\n\"SE-K\",\"Sweden/Blekinge Lan\"\r\n\"SE-W\",\"Sweden/Dalarnas Lan\"\r\n\"SE-X\",\"Sweden/Gavleborgs Lan\"\r\n\"SE-I\",\"Sweden/Gotlands Lan\"\r\n\"SE-N\",\"Sweden/Hallands Lan\"\r\n\"SE-Z\",\"Sweden/Jamtlands Lan\"\r\n\"SE-F\",\"Sweden/Jonkopings Lan\"\r\n\"SE-H\",\"Sweden/Kalmar Lan\"\r\n\"SE-G\",\"Sweden/Kronobergs Lan\"\r\n\"SE-BD\",\"Sweden/Norrbottens Lan\"\r\n\"SE-T\",\"Sweden/Orebro Lan\"\r\n\"SE-E\",\"Sweden/Ostergotlands Lan\"\r\n\"SE-M\",\"Sweden/Skane Lan\"\r\n\"SE-D\",\"Sweden/Sodermanlands Lan\"\r\n\"SE-AB\",\"Sweden/Stockholms Lan\"\r\n\"SE-C\",\"Sweden/Uppsala Lan\"\r\n\"SE-S\",\"Sweden/Varmlands Lan\"\r\n\"SE-AC\",\"Sweden/Vasterbottens Lan\"\r\n\"SE-Y\",\"Sweden/Vasternorrlands Lan\"\r\n\"SE-U\",\"Sweden/Vastmanlands Lan\"\r\n\"SE-O\",\"Sweden/Vastra Gotaland\"\r\n\"CH-AG\",\"Switzerland/Aargau\"\r\n\"CH-AR\",\"Switzerland/Ausser-Rhoden\"\r\n\"CH-BL\",\"Switzerland/Basel-Landschaft\"\r\n\"CH-BS\",\"Switzerland/Basel-Stadt\"\r\n\"CH-BE\",\"Switzerland/Bern\"\r\n\"CH-FR\",\"Switzerland/Fribourg\"\r\n\"CH-GE\",\"Switzerland/Geneve\"\r\n\"CH-GL\",\"Switzerland/Glarus\"\r\n\"CH-GR\",\"Switzerland/Graubunden\"\r\n\"CH-AI\",\"Switzerland/Inner-Rhoden\"\r\n\"CH-JU\",\"Switzerland/Jura\"\r\n\"CH-LU\",\"Switzerland/Luzern\"\r\n\"CH-NE\",\"Switzerland/Neuchatel\"\r\n\"CH-NW\",\"Switzerland/Nidwalden\"\r\n\"CH-OW\",\"Switzerland/Obwalden\"\r\n\"CH-SG\",\"Switzerland/Sankt Gallen\"\r\n\"CH-SH\",\"Switzerland/Schaffhausen\"\r\n\"CH-SZ\",\"Switzerland/Schwyz\"\r\n\"CH-SO\",\"Switzerland/Solothurn\"\r\n\"CH-TG\",\"Switzerland/Thurgau\"\r\n\"CH-TI\",\"Switzerland/Ticino\"\r\n\"CH-UR\",\"Switzerland/Uri\"\r\n\"CH-VS\",\"Switzerland/Valais\"\r\n\"CH-VD\",\"Switzerland/Vaud\"\r\n\"CH-ZG\",\"Switzerland/Zug\"\r\n\"CH-ZH\",\"Switzerland/Zurich\"\r\n\"SY-HA\",\"Syrian Arab Republic/Al Hasakah\"\r\n\"SY-LA\",\"Syrian Arab Republic/Al Ladhiqiyah\"\r\n\"SY-QU\",\"Syrian Arab Republic/Al Qunaytirah\"\r\n\"SY-RA\",\"Syrian Arab Republic/Ar Raqqah\"\r\n\"SY-SU\",\"Syrian Arab Republic/As Suwayda'\"\r\n\"SY-DR\",\"Syrian Arab Republic/Dar\"\r\n\"SY-DY\",\"Syrian Arab Republic/Dayr az Zawr\"\r\n\"SY-DI\",\"Syrian Arab Republic/Dimashq\"\r\n\"SY-HL\",\"Syrian Arab Republic/Halab\"\r\n\"SY-HM\",\"Syrian Arab Republic/Hamah\"\r\n\"SY-HI\",\"Syrian Arab Republic/Hims\"\r\n\"SY-ID\",\"Syrian Arab Republic/Idlib\"\r\n\"SY-RD\",\"Syrian Arab Republic/Rif Dimashq\"\r\n\"SY-TA\",\"Syrian Arab Republic/Tartus\"\r\n\"TW-KHH\",\"Taiwan, Province of China/Kao-hsiung\"\r\n\"TW-TPE\",\"Taiwan, Province of China/T'ai-pei\"\r\n\"TJ-KT\",\"Tajikistan/Khatlon\"\r\n\"TJ-GB\",\"Tajikistan/Kuhistoni Badakhshon\"\r\n\"TJ-SU\",\"Tajikistan/Sughd\"\r\n\"TZ-01\",\"Tanzania, United Republic of/Arusha\"\r\n\"TZ-02\",\"Tanzania, United Republic of/Dar es Salaam\"\r\n\"TZ-03\",\"Tanzania, United Republic of/Dodoma\"\r\n\"TZ-04\",\"Tanzania, United Republic of/Iringa\"\r\n\"TZ-05\",\"Tanzania, United Republic of/Kagera\"\r\n\"TZ-08\",\"Tanzania, United Republic of/Kigoma\"\r\n\"TZ-09\",\"Tanzania, United Republic of/Kilimanjaro\"\r\n\"TZ-12\",\"Tanzania, United Republic of/Lindi\"\r\n\"TZ-26\",\"Tanzania, United Republic of/Manyara\"\r\n\"TZ-13\",\"Tanzania, United Republic of/Mara\"\r\n\"TZ-14\",\"Tanzania, United Republic of/Mbeya\"\r\n\"TZ-16\",\"Tanzania, United Republic of/Morogoro\"\r\n\"TZ-17\",\"Tanzania, United Republic of/Mtwara\"\r\n\"TZ-18\",\"Tanzania, United Republic of/Mwanza\"\r\n\"TZ-06\",\"Tanzania, United Republic of/Pemba North\"\r\n\"TZ-10\",\"Tanzania, United Republic of/Pemba South\"\r\n\"TZ-19\",\"Tanzania, United Republic of/Pwani\"\r\n\"TZ-20\",\"Tanzania, United Republic of/Rukwa\"\r\n\"TZ-21\",\"Tanzania, United Republic of/Ruvuma\"\r\n\"TZ-22\",\"Tanzania, United Republic of/Shinyanga\"\r\n\"TZ-23\",\"Tanzania, United Republic of/Singida\"\r\n\"TZ-24\",\"Tanzania, United Republic of/Tabora\"\r\n\"TZ-25\",\"Tanzania, United Republic of/Tanga\"\r\n\"TZ-07\",\"Tanzania, United Republic of/Zanzibar North\"\r\n\"TH-37\",\"Thailand/Amnat Charoen\"\r\n\"TH-15\",\"Thailand/Ang Thong\"\r\n\"TH-31\",\"Thailand/Buriram\"\r\n\"TH-24\",\"Thailand/Chachoengsao\"\r\n\"TH-18\",\"Thailand/Chai Nat\"\r\n\"TH-36\",\"Thailand/Chaiyaphum\"\r\n\"TH-22\",\"Thailand/Chanthaburi\"\r\n\"TH-50\",\"Thailand/Chiang Mai\"\r\n\"TH-57\",\"Thailand/Chiang Rai\"\r\n\"TH-20\",\"Thailand/Chon Buri\"\r\n\"TH-86\",\"Thailand/Chumphon\"\r\n\"TH-46\",\"Thailand/Kalasin\"\r\n\"TH-62\",\"Thailand/Kamphaeng Phet\"\r\n\"TH-71\",\"Thailand/Kanchanaburi\"\r\n\"TH-40\",\"Thailand/Khon Kaen\"\r\n\"TH-81\",\"Thailand/Krabi\"\r\n\"TH-10\",\"Thailand/Krung Thep\"\r\n\"TH-52\",\"Thailand/Lampang\"\r\n\"TH-51\",\"Thailand/Lamphun\"\r\n\"TH-42\",\"Thailand/Loei\"\r\n\"TH-16\",\"Thailand/Lop Buri\"\r\n\"TH-58\",\"Thailand/Mae Hong Son\"\r\n\"TH-44\",\"Thailand/Maha Sarakham\"\r\n\"TH-49\",\"Thailand/Mukdahan\"\r\n\"TH-26\",\"Thailand/Nakhon Nayok\"\r\n\"TH-73\",\"Thailand/Nakhon Pathom\"\r\n\"TH-48\",\"Thailand/Nakhon Phanom\"\r\n\"TH-30\",\"Thailand/Nakhon Ratchasima\"\r\n\"TH-60\",\"Thailand/Nakhon Sawan\"\r\n\"TH-80\",\"Thailand/Nakhon Si Thammarat\"\r\n\"TH-55\",\"Thailand/Nan\"\r\n\"TH-96\",\"Thailand/Narathiwat\"\r\n\"TH-39\",\"Thailand/Nong Bua Lamphu\"\r\n\"TH-43\",\"Thailand/Nong Khai\"\r\n\"TH-12\",\"Thailand/Nonthaburi\"\r\n\"TH-13\",\"Thailand/Pathum Thani\"\r\n\"TH-94\",\"Thailand/Pattani\"\r\n\"TH-82\",\"Thailand/Phangnga\"\r\n\"TH-93\",\"Thailand/Phatthalung\"\r\n\"TH-56\",\"Thailand/Phayao\"\r\n\"TH-67\",\"Thailand/Phetchabun\"\r\n\"TH-76\",\"Thailand/Phetchaburi\"\r\n\"TH-66\",\"Thailand/Phichit\"\r\n\"TH-65\",\"Thailand/Phitsanulok\"\r\n\"TH-14\",\"Thailand/Phra Nakhon Si Ayutthaya\"\r\n\"TH-54\",\"Thailand/Phrae\"\r\n\"TH-83\",\"Thailand/Phuket\"\r\n\"TH-25\",\"Thailand/Prachin Buri\"\r\n\"TH-77\",\"Thailand/Prachuap Khiri Khan\"\r\n\"TH-85\",\"Thailand/Ranong\"\r\n\"TH-70\",\"Thailand/Ratchaburi\"\r\n\"TH-21\",\"Thailand/Rayong\"\r\n\"TH-45\",\"Thailand/Roi Et\"\r\n\"TH-27\",\"Thailand/Sa Kaeo\"\r\n\"TH-47\",\"Thailand/Sakon Nakhon\"\r\n\"TH-11\",\"Thailand/Samut Prakan\"\r\n\"TH-74\",\"Thailand/Samut Sakhon\"\r\n\"TH-75\",\"Thailand/Samut Songkhram\"\r\n\"TH-19\",\"Thailand/Saraburi\"\r\n\"TH-91\",\"Thailand/Satun\"\r\n\"TH-17\",\"Thailand/Sing Buri\"\r\n\"TH-33\",\"Thailand/Sisaket\"\r\n\"TH-90\",\"Thailand/Songkhla\"\r\n\"TH-64\",\"Thailand/Sukhothai\"\r\n\"TH-72\",\"Thailand/Suphan Buri\"\r\n\"TH-84\",\"Thailand/Surat Thani\"\r\n\"TH-32\",\"Thailand/Surin\"\r\n\"TH-63\",\"Thailand/Tak\"\r\n\"TH-92\",\"Thailand/Trang\"\r\n\"TH-23\",\"Thailand/Trat\"\r\n\"TH-34\",\"Thailand/Ubon Ratchathani\"\r\n\"TH-41\",\"Thailand/Udon Thani\"\r\n\"TH-61\",\"Thailand/Uthai Thani\"\r\n\"TH-53\",\"Thailand/Uttaradit\"\r\n\"TH-95\",\"Thailand/Yala\"\r\n\"TH-35\",\"Thailand/Yasothon\"\r\n\"TG-C\",\"Togo/Centrale\"\r\n\"TG-K\",\"Togo/Kara\"\r\n\"TG-M\",\"Togo/Maritime\"\r\n\"TG-P\",\"Togo/Plateaux\"\r\n\"TG-S\",\"Togo/Savanes\"\r\n\"TO-02\",\"Tonga/Ha\"\r\n\"TO-04\",\"Tonga/Tongatapu\"\r\n\"TO-05\",\"Tonga/Vava\"\r\n\"TT-ARI\",\"Trinidad and Tobago/Arima\"\r\n\"TT-RCM\",\"Trinidad and Tobago/Mayaro\"\r\n\"TT-POS\",\"Trinidad and Tobago/Port-of-Spain\"\r\n\"TT-SFO\",\"Trinidad and Tobago/San Fernando\"\r\n\"TT-WTO\",\"Trinidad and Tobago/Tobago\"\r\n\"TN-12\",\"Tunisia/Aiana\"\r\n\"TN-53\",\"Tunisia/Al Mahdia\"\r\n\"TN-52\",\"Tunisia/Al Munastir\"\r\n\"TN-31\",\"Tunisia/Bajah\"\r\n\"TN-13\",\"Tunisia/Ben Arous\"\r\n\"TN-23\",\"Tunisia/Bizerte\"\r\n\"TN-33\",\"Tunisia/El Kef\"\r\n\"TN-81\",\"Tunisia/Gabes\"\r\n\"TN-71\",\"Tunisia/Gafsa\"\r\n\"TN-32\",\"Tunisia/Jendouba\"\r\n\"TN-41\",\"Tunisia/Kairouan\"\r\n\"TN-42\",\"Tunisia/Kasserine\"\r\n\"TN-73\",\"Tunisia/Kebili\"\r\n\"TN-82\",\"Tunisia/Madanin\"\r\n\"TN-14\",\"Tunisia/Manouba\"\r\n\"TN-21\",\"Tunisia/Nabeul\"\r\n\"TN-61\",\"Tunisia/Sfax\"\r\n\"TN-43\",\"Tunisia/Sidi Bou Zid\"\r\n\"TN-34\",\"Tunisia/Siliana\"\r\n\"TN-51\",\"Tunisia/Sousse\"\r\n\"TN-83\",\"Tunisia/Tataouine\"\r\n\"TN-72\",\"Tunisia/Tozeur\"\r\n\"TN-11\",\"Tunisia/Tunis\"\r\n\"TN-22\",\"Tunisia/Zaghouan\"\r\n\"TR-01\",\"Turkey/Adana\"\r\n\"TR-02\",\"Turkey/Adiyaman\"\r\n\"TR-03\",\"Turkey/Afyonkarahisar\"\r\n\"TR-04\",\"Turkey/Agri\"\r\n\"TR-68\",\"Turkey/Aksaray\"\r\n\"TR-05\",\"Turkey/Amasya\"\r\n\"TR-06\",\"Turkey/Ankara\"\r\n\"TR-07\",\"Turkey/Antalya\"\r\n\"TR-75\",\"Turkey/Ardahan\"\r\n\"TR-08\",\"Turkey/Artvin\"\r\n\"TR-09\",\"Turkey/Aydin\"\r\n\"TR-10\",\"Turkey/Balikesir\"\r\n\"TR-74\",\"Turkey/Bartin\"\r\n\"TR-72\",\"Turkey/Batman\"\r\n\"TR-69\",\"Turkey/Bayburt\"\r\n\"TR-11\",\"Turkey/Bilecik\"\r\n\"TR-12\",\"Turkey/Bingol\"\r\n\"TR-13\",\"Turkey/Bitlis\"\r\n\"TR-14\",\"Turkey/Bolu\"\r\n\"TR-15\",\"Turkey/Burdur\"\r\n\"TR-16\",\"Turkey/Bursa\"\r\n\"TR-17\",\"Turkey/Canakkale\"\r\n\"TR-18\",\"Turkey/Cankiri\"\r\n\"TR-19\",\"Turkey/Corum\"\r\n\"TR-20\",\"Turkey/Denizli\"\r\n\"TR-21\",\"Turkey/Diyarbakir\"\r\n\"TR-81\",\"Turkey/Duzce\"\r\n\"TR-22\",\"Turkey/Edirne\"\r\n\"TR-23\",\"Turkey/Elazig\"\r\n\"TR-24\",\"Turkey/Erzincan\"\r\n\"TR-25\",\"Turkey/Erzurum\"\r\n\"TR-26\",\"Turkey/Eskisehir\"\r\n\"TR-27\",\"Turkey/Gaziantep\"\r\n\"TR-28\",\"Turkey/Giresun\"\r\n\"TR-29\",\"Turkey/Gumushane\"\r\n\"TR-30\",\"Turkey/Hakkari\"\r\n\"TR-31\",\"Turkey/Hatay\"\r\n\"TR-76\",\"Turkey/Igdir\"\r\n\"TR-32\",\"Turkey/Isparta\"\r\n\"TR-34\",\"Turkey/Istanbul\"\r\n\"TR-35\",\"Turkey/Izmir\"\r\n\"TR-46\",\"Turkey/Kahramanmaras\"\r\n\"TR-78\",\"Turkey/Karabuk\"\r\n\"TR-70\",\"Turkey/Karaman\"\r\n\"TR-36\",\"Turkey/Kars\"\r\n\"TR-37\",\"Turkey/Kastamonu\"\r\n\"TR-38\",\"Turkey/Kayseri\"\r\n\"TR-79\",\"Turkey/Kilis\"\r\n\"TR-71\",\"Turkey/Kirikkale\"\r\n\"TR-39\",\"Turkey/Kirklareli\"\r\n\"TR-40\",\"Turkey/Kirsehir\"\r\n\"TR-41\",\"Turkey/Kocaeli\"\r\n\"TR-42\",\"Turkey/Konya\"\r\n\"TR-43\",\"Turkey/Kutahya\"\r\n\"TR-44\",\"Turkey/Malatya\"\r\n\"TR-45\",\"Turkey/Manisa\"\r\n\"TR-47\",\"Turkey/Mardin\"\r\n\"TR-33\",\"Turkey/Mersin\"\r\n\"TR-48\",\"Turkey/Mugla\"\r\n\"TR-49\",\"Turkey/Mus\"\r\n\"TR-50\",\"Turkey/Nevsehir\"\r\n\"TR-51\",\"Turkey/Nigde\"\r\n\"TR-52\",\"Turkey/Ordu\"\r\n\"TR-80\",\"Turkey/Osmaniye\"\r\n\"TR-53\",\"Turkey/Rize\"\r\n\"TR-54\",\"Turkey/Sakarya\"\r\n\"TR-55\",\"Turkey/Samsun\"\r\n\"TR-63\",\"Turkey/Sanliurfa\"\r\n\"TR-56\",\"Turkey/Siirt\"\r\n\"TR-57\",\"Turkey/Sinop\"\r\n\"TR-73\",\"Turkey/Sirnak\"\r\n\"TR-58\",\"Turkey/Sivas\"\r\n\"TR-59\",\"Turkey/Tekirdag\"\r\n\"TR-60\",\"Turkey/Tokat\"\r\n\"TR-61\",\"Turkey/Trabzon\"\r\n\"TR-62\",\"Turkey/Tunceli\"\r\n\"TR-64\",\"Turkey/Usak\"\r\n\"TR-65\",\"Turkey/Van\"\r\n\"TR-77\",\"Turkey/Yalova\"\r\n\"TR-66\",\"Turkey/Yozgat\"\r\n\"TR-67\",\"Turkey/Zonguldak\"\r\n\"TM-A\",\"Turkmenistan/Ahal\"\r\n\"TM-B\",\"Turkmenistan/Balkan\"\r\n\"TM-D\",\"Turkmenistan/Dashoguz\"\r\n\"TM-L\",\"Turkmenistan/Lebap\"\r\n\"TM-M\",\"Turkmenistan/Mary\"\r\n\"UG-317\",\"Uganda/Abim\"\r\n\"UG-301\",\"Uganda/Adjumani\"\r\n\"UG-314\",\"Uganda/Amolatar\"\r\n\"UG-216\",\"Uganda/Amuria\"\r\n\"UG-319\",\"Uganda/Amuru\"\r\n\"UG-302\",\"Uganda/Apac\"\r\n\"UG-303\",\"Uganda/Arua\"\r\n\"UG-217\",\"Uganda/Budaka\"\r\n\"UG-223\",\"Uganda/Bududa\"\r\n\"UG-201\",\"Uganda/Bugiri\"\r\n\"UG-224\",\"Uganda/Bukedea\"\r\n\"UG-218\",\"Uganda/Bukwa\"\r\n\"UG-419\",\"Uganda/Bulisa\"\r\n\"UG-401\",\"Uganda/Bundibugyo\"\r\n\"UG-402\",\"Uganda/Bushenyi\"\r\n\"UG-202\",\"Uganda/Busia\"\r\n\"UG-219\",\"Uganda/Butaleja\"\r\n\"UG-318\",\"Uganda/Dokolo\"\r\n\"UG-304\",\"Uganda/Gulu\"\r\n\"UG-403\",\"Uganda/Hoima\"\r\n\"UG-203\",\"Uganda/Iganga\"\r\n\"UG-417\",\"Uganda/Isingiro\"\r\n\"UG-204\",\"Uganda/Jinja\"\r\n\"UG-315\",\"Uganda/Kaabong\"\r\n\"UG-404\",\"Uganda/Kabale\"\r\n\"UG-405\",\"Uganda/Kabarole\"\r\n\"UG-213\",\"Uganda/Kaberamaido\"\r\n\"UG-101\",\"Uganda/Kalangala\"\r\n\"UG-220\",\"Uganda/Kaliro\"\r\n\"UG-102\",\"Uganda/Kampala\"\r\n\"UG-205\",\"Uganda/Kamuli\"\r\n\"UG-413\",\"Uganda/Kamwenge\"\r\n\"UG-414\",\"Uganda/Kanungu\"\r\n\"UG-206\",\"Uganda/Kapchorwa\"\r\n\"UG-406\",\"Uganda/Kasese\"\r\n\"UG-207\",\"Uganda/Katakwi\"\r\n\"UG-112\",\"Uganda/Kayunga\"\r\n\"UG-407\",\"Uganda/Kibale\"\r\n\"UG-103\",\"Uganda/Kiboga\"\r\n\"UG-408\",\"Uganda/Kisoro\"\r\n\"UG-305\",\"Uganda/Kitgum\"\r\n\"UG-316\",\"Uganda/Koboko\"\r\n\"UG-306\",\"Uganda/Kotido\"\r\n\"UG-208\",\"Uganda/Kumi\"\r\n\"UG-415\",\"Uganda/Kyenjojo\"\r\n\"UG-307\",\"Uganda/Lira\"\r\n\"UG-104\",\"Uganda/Luwero\"\r\n\"UG-116\",\"Uganda/Lyantonde\"\r\n\"UG-221\",\"Uganda/Manafwa\"\r\n\"UG-320\",\"Uganda/Maracha\"\r\n\"UG-105\",\"Uganda/Masaka\"\r\n\"UG-409\",\"Uganda/Masindi\"\r\n\"UG-214\",\"Uganda/Mayuge\"\r\n\"UG-209\",\"Uganda/Mbale\"\r\n\"UG-410\",\"Uganda/Mbarara\"\r\n\"UG-114\",\"Uganda/Mityana\"\r\n\"UG-308\",\"Uganda/Moroto\"\r\n\"UG-309\",\"Uganda/Moyo\"\r\n\"UG-106\",\"Uganda/Mpigi\"\r\n\"UG-107\",\"Uganda/Mubende\"\r\n\"UG-108\",\"Uganda/Mukono\"\r\n\"UG-311\",\"Uganda/Nakapiripirit\"\r\n\"UG-115\",\"Uganda/Nakaseke\"\r\n\"UG-109\",\"Uganda/Nakasongola\"\r\n\"UG-222\",\"Uganda/Namutumba\"\r\n\"UG-310\",\"Uganda/Nebbi\"\r\n\"UG-411\",\"Uganda/Ntungamo\"\r\n\"UG-321\",\"Uganda/Oyam\"\r\n\"UG-312\",\"Uganda/Pader\"\r\n\"UG-210\",\"Uganda/Pallisa\"\r\n\"UG-110\",\"Uganda/Rakai\"\r\n\"UG-412\",\"Uganda/Rukungiri\"\r\n\"UG-111\",\"Uganda/Sembabule\"\r\n\"UG-215\",\"Uganda/Sironko\"\r\n\"UG-211\",\"Uganda/Soroti\"\r\n\"UG-212\",\"Uganda/Tororo\"\r\n\"UG-113\",\"Uganda/Wakiso\"\r\n\"UG-313\",\"Uganda/Yumbe\"\r\n\"UA-71\",\"Ukraine/Cherkas'ka Oblast'\"\r\n\"UA-74\",\"Ukraine/Chernihivs'ka Oblast'\"\r\n\"UA-77\",\"Ukraine/Chernivets'ka Oblast'\"\r\n\"UA-12\",\"Ukraine/Dnipropetrovs'ka Oblast'\"\r\n\"UA-14\",\"Ukraine/Donets'ka Oblast'\"\r\n\"UA-26\",\"Ukraine/Ivano-Frankivs'ka Oblast'\"\r\n\"UA-63\",\"Ukraine/Kharkivs'ka Oblast'\"\r\n\"UA-65\",\"Ukraine/Khersons'ka Oblast'\"\r\n\"UA-68\",\"Ukraine/Khmel'nyts'ka Oblast'\"\r\n\"UA-35\",\"Ukraine/Kirovohrads'ka Oblast'\"\r\n\"UA-43\",\"Ukraine/Krym\"\r\n\"UA-30\",\"Ukraine/Kyyiv\"\r\n\"UA-32\",\"Ukraine/Kyyivs'ka Oblast'\"\r\n\"UA-09\",\"Ukraine/Luhans'ka Oblast'\"\r\n\"UA-46\",\"Ukraine/L'vivs'ka Oblast'\"\r\n\"UA-48\",\"Ukraine/Mykolayivs'ka Oblast'\"\r\n\"UA-51\",\"Ukraine/Odes'ka Oblast'\"\r\n\"UA-53\",\"Ukraine/Poltavs'ka Oblast'\"\r\n\"UA-56\",\"Ukraine/Rivnens'ka Oblast'\"\r\n\"UA-40\",\"Ukraine/Sevastopol'\"\r\n\"UA-59\",\"Ukraine/Sums'ka Oblast'\"\r\n\"UA-61\",\"Ukraine/Ternopil's'ka Oblast'\"\r\n\"UA-05\",\"Ukraine/Vinnyts'ka Oblast'\"\r\n\"UA-07\",\"Ukraine/Volyns'ka Oblast'\"\r\n\"UA-21\",\"Ukraine/Zakarpats'ka Oblast'\"\r\n\"UA-23\",\"Ukraine/Zaporiz'ka Oblast'\"\r\n\"UA-18\",\"Ukraine/Zhytomyrs'ka Oblast'\"\r\n\"AE-AZ\",\"United Arab Emirates/Abu Dhabi\"\r\n\"AE-AJ\",\"United Arab Emirates/Ajman\"\r\n\"AE-DU\",\"United Arab Emirates/Dubai\"\r\n\"AE-FU\",\"United Arab Emirates/Fujairah\"\r\n\"AE-RK\",\"United Arab Emirates/Ras Al Khaimah\"\r\n\"AE-SH\",\"United Arab Emirates/Sharjah\"\r\n\"AE-UQ\",\"United Arab Emirates/Umm Al Quwain\"\r\n\"ENG\",\"United Kingdom/England\"\r\n\"NIR\",\"United Kingdom/Northern Ireland\"\r\n\"SCT\",\"United Kingdom/Scotland\"\r\n\"WLS\",\"United Kingdom/Wales\"\r\n\"UM-95\",\"United States Minor Outlying Islands/Palmyra Atoll\"\r\n\"US-AL\",\"United States/Alabama\"\r\n\"US-AK\",\"United States/Alaska\"\r\n\"US-AZ\",\"United States/Arizona\"\r\n\"US-AR\",\"United States/Arkansas\"\r\n\"US-CA\",\"United States/California\"\r\n\"US-CO\",\"United States/Colorado\"\r\n\"US-CT\",\"United States/Connecticut\"\r\n\"US-DE\",\"United States/Delaware\"\r\n\"US-DC\",\"United States/District Of Columbia\"\r\n\"US-FL\",\"United States/Florida\"\r\n\"US-GA\",\"United States/Georgia\"\r\n\"US-HI\",\"United States/Hawaii\"\r\n\"US-ID\",\"United States/Idaho\"\r\n\"US-IL\",\"United States/Illinois\"\r\n\"US-IN\",\"United States/Indiana\"\r\n\"US-IA\",\"United States/Iowa\"\r\n\"US-KS\",\"United States/Kansas\"\r\n\"US-KY\",\"United States/Kentucky\"\r\n\"US-LA\",\"United States/Louisiana\"\r\n\"US-ME\",\"United States/Maine\"\r\n\"US-MD\",\"United States/Maryland\"\r\n\"US-MA\",\"United States/Massachusetts\"\r\n\"US-MI\",\"United States/Michigan\"\r\n\"US-MN\",\"United States/Minnesota\"\r\n\"US-MS\",\"United States/Mississippi\"\r\n\"US-MO\",\"United States/Missouri\"\r\n\"US-MT\",\"United States/Montana\"\r\n\"US-NE\",\"United States/Nebraska\"\r\n\"US-NV\",\"United States/Nevada\"\r\n\"US-NH\",\"United States/New Hampshire\"\r\n\"US-NJ\",\"United States/New Jersey\"\r\n\"US-NM\",\"United States/New Mexico\"\r\n\"US-NY\",\"United States/New York\"\r\n\"US-NC\",\"United States/North Carolina\"\r\n\"US-ND\",\"United States/North Dakota\"\r\n\"US-OH\",\"United States/Ohio\"\r\n\"US-OK\",\"United States/Oklahoma\"\r\n\"US-OR\",\"United States/Oregon\"\r\n\"US-PA\",\"United States/Pennsylvania\"\r\n\"US-RI\",\"United States/Rhode Island\"\r\n\"US-SC\",\"United States/South Carolina\"\r\n\"US-SD\",\"United States/South Dakota\"\r\n\"US-TN\",\"United States/Tennessee\"\r\n\"US-TX\",\"United States/Texas\"\r\n\"US-UT\",\"United States/Utah\"\r\n\"US-VT\",\"United States/Vermont\"\r\n\"US-VA\",\"United States/Virginia\"\r\n\"US-WA\",\"United States/Washington\"\r\n\"US-WV\",\"United States/West Virginia\"\r\n\"US-WI\",\"United States/Wisconsin\"\r\n\"US-WY\",\"United States/Wyoming\"\r\n\"UY-AR\",\"Uruguay/Artigas\"\r\n\"UY-CA\",\"Uruguay/Canelones\"\r\n\"UY-CL\",\"Uruguay/Cerro Largo\"\r\n\"UY-CO\",\"Uruguay/Colonia\"\r\n\"UY-DU\",\"Uruguay/Durazno\"\r\n\"UY-FS\",\"Uruguay/Flores\"\r\n\"UY-FD\",\"Uruguay/Florida\"\r\n\"UY-LA\",\"Uruguay/Lavalleja\"\r\n\"UY-MA\",\"Uruguay/Maldonado\"\r\n\"UY-MO\",\"Uruguay/Montevideo\"\r\n\"UY-PA\",\"Uruguay/Paysandu\"\r\n\"UY-RN\",\"Uruguay/Rio Negro\"\r\n\"UY-RV\",\"Uruguay/Rivera\"\r\n\"UY-RO\",\"Uruguay/Rocha\"\r\n\"UY-SA\",\"Uruguay/Salto\"\r\n\"UY-SJ\",\"Uruguay/San Jose\"\r\n\"UY-SO\",\"Uruguay/Soriano\"\r\n\"UY-TA\",\"Uruguay/Tacuarembo\"\r\n\"UY-TT\",\"Uruguay/Treinta y Tres\"\r\n\"UZ-AN\",\"Uzbekistan/Andijon\"\r\n\"UZ-BU\",\"Uzbekistan/Bukhoro\"\r\n\"UZ-FA\",\"Uzbekistan/Farghona\"\r\n\"UZ-JI\",\"Uzbekistan/Jizzax\"\r\n\"UZ-KH\",\"Uzbekistan/Khorazm\"\r\n\"UZ-NG\",\"Uzbekistan/Namangan\"\r\n\"UZ-NW\",\"Uzbekistan/Nawoiy\"\r\n\"UZ-QA\",\"Uzbekistan/Qashqadaryo\"\r\n\"UZ-QR\",\"Uzbekistan/Qoraqalpoghiston\"\r\n\"UZ-SA\",\"Uzbekistan/Samarqand\"\r\n\"UZ-SI\",\"Uzbekistan/Sirdaryo\"\r\n\"UZ-SU\",\"Uzbekistan/Surkhondaryo\"\r\n\"UZ-TO\",\"Uzbekistan/Toshkent\"\r\n\"UZ-TK\",\"Uzbekistan/Toshkent Shahri\"\r\n\"VU-MAP\",\"Vanuatu/Malampa\"\r\n\"VU-SAM\",\"Vanuatu/Sanma\"\r\n\"VU-SEE\",\"Vanuatu/Shefa\"\r\n\"VU-TAE\",\"Vanuatu/Tafea\"\r\n\"VU-TOB\",\"Vanuatu/Torba\"\r\n\"VE-Z\",\"Venezuela, Bolivarian Republic of/Amazonas\"\r\n\"VE-B\",\"Venezuela, Bolivarian Republic of/Anzoategui\"\r\n\"VE-C\",\"Venezuela, Bolivarian Republic of/Apure\"\r\n\"VE-D\",\"Venezuela, Bolivarian Republic of/Aragua\"\r\n\"VE-E\",\"Venezuela, Bolivarian Republic of/Barinas\"\r\n\"VE-F\",\"Venezuela, Bolivarian Republic of/Bolivar\"\r\n\"VE-G\",\"Venezuela, Bolivarian Republic of/Carabobo\"\r\n\"VE-H\",\"Venezuela, Bolivarian Republic of/Cojedes\"\r\n\"VE-Y\",\"Venezuela, Bolivarian Republic of/Delta Amacuro\"\r\n\"VE-A\",\"Venezuela, Bolivarian Republic of/Distrito Federal\"\r\n\"VE-I\",\"Venezuela, Bolivarian Republic of/Falcon\"\r\n\"VE-J\",\"Venezuela, Bolivarian Republic of/Guarico\"\r\n\"VE-K\",\"Venezuela, Bolivarian Republic of/Lara\"\r\n\"VE-L\",\"Venezuela, Bolivarian Republic of/Merida\"\r\n\"VE-M\",\"Venezuela, Bolivarian Republic of/Miranda\"\r\n\"VE-N\",\"Venezuela, Bolivarian Republic of/Monagas\"\r\n\"VE-O\",\"Venezuela, Bolivarian Republic of/Nueva Esparta\"\r\n\"VE-P\",\"Venezuela, Bolivarian Republic of/Portuguesa\"\r\n\"VE-R\",\"Venezuela, Bolivarian Republic of/Sucre\"\r\n\"VE-S\",\"Venezuela, Bolivarian Republic of/Tachira\"\r\n\"VE-T\",\"Venezuela, Bolivarian Republic of/Trujillo\"\r\n\"VE-X\",\"Venezuela, Bolivarian Republic of/Vargas\"\r\n\"VE-U\",\"Venezuela, Bolivarian Republic of/Yaracuy\"\r\n\"VE-V\",\"Venezuela, Bolivarian Republic of/Zulia\"\r\n\"VN-44\",\"Viet Nam/An Giang\"\r\n\"VN-43\",\"Viet Nam/Ba Ria-Vung Tau\"\r\n\"VN-50\",\"Viet Nam/Ben Tre\"\r\n\"VN-31\",\"Viet Nam/Binh Dinh\"\r\n\"VN-57\",\"Viet Nam/Binh Thuan\"\r\n\"VN-CT\",\"Viet Nam/Can Tho\"\r\n\"VN-04\",\"Viet Nam/Cao Bang\"\r\n\"VN-DN\",\"Viet Nam/Da Nang\"\r\n\"VN-33\",\"Viet Nam/Dak Lak\"\r\n\"VN-71\",\"Viet Nam/Dien Bien\"\r\n\"VN-39\",\"Viet Nam/Dong Nai\"\r\n\"VN-45\",\"Viet Nam/Dong Thap\"\r\n\"VN-03\",\"Viet Nam/Ha Giang\"\r\n\"VN-63\",\"Viet Nam/Ha Nam\"\r\n\"VN-HN\",\"Viet Nam/Ha Noi\"\r\n\"VN-15\",\"Viet Nam/Ha Tay\"\r\n\"VN-23\",\"Viet Nam/Ha Tinh\"\r\n\"VN-61\",\"Viet Nam/Hai Duong\"\r\n\"VN-HP\",\"Viet Nam/Hai Phong\"\r\n\"VN-SG\",\"Viet Nam/Ho Chi Minh\"\r\n\"VN-14\",\"Viet Nam/Hoa Binh\"\r\n\"VN-66\",\"Viet Nam/Hung Yen\"\r\n\"VN-34\",\"Viet Nam/Khanh Hoa\"\r\n\"VN-47\",\"Viet Nam/Kien Giang\"\r\n\"VN-28\",\"Viet Nam/Kon Tum\"\r\n\"VN-01\",\"Viet Nam/Lai Chau\"\r\n\"VN-35\",\"Viet Nam/Lam Dong\"\r\n\"VN-09\",\"Viet Nam/Lang Son\"\r\n\"VN-02\",\"Viet Nam/Lao Cai\"\r\n\"VN-41\",\"Viet Nam/Long An\"\r\n\"VN-67\",\"Viet Nam/Nam Dinh\"\r\n\"VN-22\",\"Viet Nam/Nghe An\"\r\n\"VN-18\",\"Viet Nam/Ninh Binh\"\r\n\"VN-36\",\"Viet Nam/Ninh Thuan\"\r\n\"VN-68\",\"Viet Nam/Phu Tho\"\r\n\"VN-32\",\"Viet Nam/Phu Yen\"\r\n\"VN-24\",\"Viet Nam/Quang Binh\"\r\n\"VN-27\",\"Viet Nam/Quang Nam\"\r\n\"VN-29\",\"Viet Nam/Quang Ngai\"\r\n\"VN-13\",\"Viet Nam/Quang Ninh\"\r\n\"VN-25\",\"Viet Nam/Quang Tri\"\r\n\"VN-52\",\"Viet Nam/Soc Trang\"\r\n\"VN-05\",\"Viet Nam/Son La\"\r\n\"VN-37\",\"Viet Nam/Tay Ninh\"\r\n\"VN-20\",\"Viet Nam/Thai Binh\"\r\n\"VN-69\",\"Viet Nam/Thai Nguyen\"\r\n\"VN-21\",\"Viet Nam/Thanh Hoa\"\r\n\"VN-26\",\"Viet Nam/Thua Thien\"\r\n\"VN-46\",\"Viet Nam/Tien Giang\"\r\n\"VN-51\",\"Viet Nam/Tra Vinh\"\r\n\"VN-07\",\"Viet Nam/Tuyen Quang\"\r\n\"VN-49\",\"Viet Nam/Vinh Long\"\r\n\"VN-70\",\"Viet Nam/Vinh Phu\"\r\n\"MA-16\",\"Western Sahara/Oued Ed-Dahab-Lagouira\"\r\n\"YE-AB\",\"Yemen/Abyan\"\r\n\"YE-DA\",\"Yemen/Ad Dali\"\r\n\"YE-AD\",\"Yemen/Adan\"\r\n\"YE-BA\",\"Yemen/Al Bayda'\"\r\n\"YE-HU\",\"Yemen/Al Hudaydah\"\r\n\"YE-JA\",\"Yemen/Al Jawf\"\r\n\"YE-MR\",\"Yemen/Al Mahrah\"\r\n\"YE-MW\",\"Yemen/Al Mahwit\"\r\n\"YE-AM\",\"Yemen/Amran\"\r\n\"YE-DH\",\"Yemen/Dhamar\"\r\n\"YE-HD\",\"Yemen/Hadramawt\"\r\n\"YE-HJ\",\"Yemen/Hajjah\"\r\n\"YE-IB\",\"Yemen/Ibb\"\r\n\"YE-LA\",\"Yemen/Lahij\"\r\n\"YE-MA\",\"Yemen/Ma'rib\"\r\n\"YE-RA\",\"Yemen/Muhafazat Raymah\"\r\n\"YE-SD\",\"Yemen/Sa'dah\"\r\n\"YE-SN\",\"Yemen/San'a'\"\r\n\"YE-SH\",\"Yemen/Shabwah\"\r\n\"YE-TA\",\"Yemen/Taizz\"\r\n\"ZM-02\",\"Zambia/Central\"\r\n\"ZM-08\",\"Zambia/Copperbelt\"\r\n\"ZM-03\",\"Zambia/Eastern\"\r\n\"ZM-04\",\"Zambia/Luapula\"\r\n\"ZM-09\",\"Zambia/Lusaka\"\r\n\"ZM-05\",\"Zambia/Northern\"\r\n\"ZM-06\",\"Zambia/North-Western\"\r\n\"ZM-07\",\"Zambia/Southern\"\r\n\"ZM-01\",\"Zambia/Western\"\r\n\"ZW-BU\",\"Zimbabwe/Bulawayo\"\r\n\"ZW-HA\",\"Zimbabwe/Harare\"\r\n\"ZW-MA\",\"Zimbabwe/Manicaland\"\r\n\"ZW-MC\",\"Zimbabwe/Mashonaland Central\"\r\n\"ZW-ME\",\"Zimbabwe/Mashonaland East\"\r\n\"ZW-MW\",\"Zimbabwe/Mashonaland West\"\r\n\"ZW-MV\",\"Zimbabwe/Masvingo\"\r\n\"ZW-MN\",\"Zimbabwe/Matabeleland North\"\r\n\"ZW-MS\",\"Zimbabwe/Matabeleland South\"\r\n\"ZW-MI\",\"Zimbabwe/Midlands\"";
                },
                ctor: function () {
                    var lines = System.String.split(CM.ISO31662.Data, [10].map(function(i) {{ return String.fromCharCode(i); }}));
                    CM.ISO31662.Values = System.Array.init(lines.length, function (){
                        return new CM.ISO31662.Region();
                    }, CM.ISO31662.Region);
                    CM.ISO31662._Lookup = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();

                    var rx = new RegExp("\"[^\"]+\"", "gi");
                    for (var i = 0; i < lines.length; i = (i + 1) | 0) {
                        var bits = lines[System.Array.index(i, lines)].match(rx);
                        CM.ISO31662.Values[System.Array.index(i, CM.ISO31662.Values)].ID = System.String.replaceAll(bits[System.Array.index(0, bits)], "\"", "");
                        CM.ISO31662.Values[System.Array.index(i, CM.ISO31662.Values)].Name = System.String.replaceAll(bits[System.Array.index(1, bits)], "\"", "");
                        CM.ISO31662._Lookup.set(CM.ISO31662.Values[System.Array.index(i, CM.ISO31662.Values)].ID, CM.ISO31662.Values[System.Array.index(i, CM.ISO31662.Values)].Name);
                    }
                }
            },
            methods: {
                GetName: function (code) {
                    if (code == null) {
                        return null;
                    }
                    var name = { };
                    CM.ISO31662._Lookup.tryGetValue(code.toUpperCase(), name);
                    return name.v;
                }
            }
        }
    });

    Bridge.define("CM.ISO31662.Region", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.ISO31662.Region(); }
            }
        },
        fields: {
            ID: null,
            Name: null
        },
        ctors: {
            $ctor1: function (id, name) {
                this.$initialize();
                this.ID = id;
                this.Name = name;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1768412097, this.ID, this.Name]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.ISO31662.Region)) {
                    return false;
                }
                return Bridge.equals(this.ID, o.ID) && Bridge.equals(this.Name, o.Name);
            },
            $clone: function (to) {
                var s = to || new CM.ISO31662.Region();
                s.ID = this.ID;
                s.Name = this.Name;
                return s;
            }
        }
    });

    /**
     * API objects such as Account, Transaction and Vote implement this
     for a unified consensus algorithm
     *
     * @abstract
     * @public
     * @class CM.IStorable
     */
    Bridge.define("CM.IStorable", {
        $kind: "interface"
    });

    /** @namespace CM.Javascript */

    /**
     * All pages inherit this. Provides a basic container for a root Element and
     any special CSS that the page might want.
     *
     * @abstract
     * @class CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.Page", {
        statics: {
            fields: {
                _Encoder: null
            },
            ctors: {
                init: function () {
                    this._Encoder = document.createElement('div');
                }
            },
            methods: {
                EncodeAmount: function (num, prefix) {
                    if (prefix === void 0) { prefix = ""; }
                    var amount = num.abs();
                    var neg = num.lt(System.Decimal(0)) ? " - " : "";
                    return System.String.concat("<span class=\"amount\"><span>", prefix, "</span><span>", neg, System.String.replaceAll(Bridge.Int.format((amount.sub((amount.mod(System.Decimal(1))))), "N0"), ",", CM.Javascript.SR.CHAR_THOUSAND_SEPERATOR), "</span><span>", Bridge.Int.format((amount.mod(System.Decimal(1))), System.String.concat(CM.Javascript.SR.CHAR_DECIMAL, "00")), "</span></span>");
                },
                /**
                 * Helper utility for HTML for safety. 100% of non-hard-coded text must use this.
                 *
                 * @static
                 * @public
                 * @this CM.Javascript.Page
                 * @memberof CM.Javascript.Page
                 * @param   {string}    s
                 * @return  {string}
                 */
                HtmlEncode: function (s) {
                    if (s == null) {
                        return "";
                    }
                    // Javascript is a single threaded environment, so this shared element is fine.
                    CM.Javascript.Page._Encoder.textContent = s;
                    return System.String.replaceAll(CM.Javascript.Page._Encoder.innerHTML, "\"", "&quot;");
                }
            }
        },
        fields: {
            /**
             * The main root element for the page.
             *
             * @instance
             * @public
             * @memberof CM.Javascript.Page
             * @type HTMLDivElement
             */
            Element: null,
            IsBuilt: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Element = document.createElement('div');
            }
        },
        methods: {
            /**
             * Called when the page has been added to the DOM
             *
             * @instance
             * @public
             * @this CM.Javascript.Page
             * @memberof CM.Javascript.Page
             * @return  {void}
             */
            OnAdded: function () { },
            /**
             * Called when the page is being removed (useful for cancelling tasks etc.)
             *
             * @instance
             * @public
             * @this CM.Javascript.Page
             * @memberof CM.Javascript.Page
             * @return  {void}
             */
            OnRemoved: function () { }
        }
    });

    Bridge.define("CM.Javascript.AccountEditPage.NotifyEditor", {
        fields: {
            Value: null
        },
        ctors: {
            ctor: function (parent, value) {
                this.$initialize();
                this.Value = value;
                var row = CM.BridgeHacks.Div(parent, "push row");
                var label = CM.BridgeHacks.TextBox(row, value.Label);
                label.placeholder = CM.Javascript.SR.LABEL_LABEL;
                label.onchange = function (e) {
                    value.Label = label.value;
                };
                var url = CM.BridgeHacks.TextBox(row, value.HttpUrl);
                url.placeholder = "http(s)://domain.com/sink";
                url.onchange = function (e) {
                    value.HttpUrl = url.value;
                };
            }
        }
    });

    Bridge.define("CM.Javascript.AccountEditPage.SkillEditor", {
        fields: {
            Value: null
        },
        ctors: {
            ctor: function (parent, value) {
                this.$initialize();                var $t;

                this.Value = value;
                var row = CM.BridgeHacks.Div(parent, "skill row");
                var sel = CM.BridgeHacks.Select(row);
                sel.appendChild(($t = document.createElement('option'), $t.value = (CM.Schema.AccountAttributes.SkillLevel.Amateur).toString(), $t.innerHTML = CM.Javascript.SR.LABEL_SKILL_LEVEL_AMATEUR, $t));
                sel.appendChild(($t = document.createElement('option'), $t.value = (CM.Schema.AccountAttributes.SkillLevel.Qualified).toString(), $t.innerHTML = CM.Javascript.SR.LABEL_SKILL_LEVEL_QUALIFIED, $t));
                sel.appendChild(($t = document.createElement('option'), $t.value = (CM.Schema.AccountAttributes.SkillLevel.Experienced).toString(), $t.innerHTML = CM.Javascript.SR.LABEL_SKILL_LEVEL_EXPERIENCED, $t));
                sel.appendChild(($t = document.createElement('option'), $t.value = (CM.Schema.AccountAttributes.SkillLevel.Certified).toString(), $t.innerHTML = CM.Javascript.SR.LABEL_SKILL_LEVEL_CERTIFIED, $t));
                sel.value = value.Level.toString();
                sel.onchange = Bridge.fn.bind(this, function (e) {
                    this.Value.Level = System.Int32.parse(sel.value);
                });
                var tb = CM.BridgeHacks.TextBox(row, value.Value);
                tb.placeholder = CM.Javascript.SR.LABEL_ENTER_SKILL_OR_SERVICE;
                tb.onchange = function (e) {
                    value.Value = tb.value;
                };
        }
    }
    });

    Bridge.define("CM.Javascript.AccountInputBox", {
        fields: {
            _El: null,
            _Input: null,
            _Rep: null,
            _Attributes: null,
            _Bal: null,
            _Feedback: null,
            Account: null,
            OnAccountChanged: null,
            _ShowGlyph: false,
            _Search: null
        },
        props: {
            Element: {
                get: function () {
                    return this._El;
                }
            },
            Input: {
                get: function () {
                    return this._Input;
                }
            }
        },
        ctors: {
            ctor: function (parent, id, goGlyph, watermark) {
                if (id === void 0) { id = null; }
                if (goGlyph === void 0) { goGlyph = false; }
                if (watermark === void 0) { watermark = null; }

                this.$initialize();                var $t;

                this._El = CM.BridgeHacks.Div(parent, "accountinputbox");

                this._ShowGlyph = goGlyph;
                if (id != null) {
                    // readonly when set
                    CM.BridgeHacks.AddClass(this._El, "readonly");
                    CM.BridgeHacks.Span(CM.BridgeHacks.Div(this._El, "val"), CM.Javascript.Page.HtmlEncode(id));
                    System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                        this.FindAccount(id);
                    }));
                } else {
                    CM.BridgeHacks.AddClass(this._El, "focusable");
                    var accountName = (this._Input = CM.BridgeHacks.TextBox(CM.BridgeHacks.Div(this._El, "val"), ""));
                    accountName.placeholder = ($t = watermark, $t != null ? $t : CM.Javascript.SR.LABEL_ACCOUNT_NAME);
                    accountName.addEventListener("keypress", Bridge.fn.bind(this, function (e) {
                        var $t1;
                        var ev = Bridge.cast(e, KeyboardEvent);
                        if ((ev.keyCode !== 45 && !($t1 = (ev.keyCode & 65535), (System.Char.isDigit($t1) || System.Char.isLetter($t1))))) {
                            e.preventDefault();
                            e.stopPropagation();
                            if (ev.keyCode === 13) {
                                if (this.Account != null && goGlyph) {
                                    CM.Javascript.App.Identity.Navigate(System.String.concat("/", this.Account.ID));
                                }
                            }
                        }
                    }));
                    accountName.onfocus = Bridge.fn.combine(accountName.onfocus, Bridge.fn.bind(this, $asm.$.CM.Javascript.AccountInputBox.f1));
                    accountName.onblur = Bridge.fn.combine(accountName.onblur, Bridge.fn.bind(this, $asm.$.CM.Javascript.AccountInputBox.f2));
                    accountName.onkeyup = Bridge.fn.combine(accountName.onkeyup, Bridge.fn.bind(this, function (e) {
                        System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                            this.FindAccount(accountName.value);
                        }));
                    }));


                }

                var rb = CM.BridgeHacks.Div(this._El, "repbal");
                this._Rep = CM.BridgeHacks.Div(rb, "rep");
                this._Bal = CM.BridgeHacks.A$1(rb, "", "#", "bal");
                if (!goGlyph) {
                    this._Bal.target = "_blank";
                }
                this._Attributes = CM.BridgeHacks.Div(parent, "accountinputboxatts");
                this.ResetInfo();

                this._Feedback = new CM.Javascript.Feedback(CM.BridgeHacks.Div(parent));
        }
    },
    methods: {
        SetFeedbackIfNoneAlready: function (glyph, type, msg) {
            if (!this._Feedback.IsShowing) {
                this._Feedback.Set(glyph, type, msg);
            }
        },
        ResetInfo: function () {

            CM.BridgeHacks.Clear(this._Rep);
            CM.BridgeHacks.Clear(this._Bal);
            CM.BridgeHacks.Clear(this._Attributes);
            this._Rep.style.display = "none";
            this._Bal.style.display = "none";
            this._Attributes.style.display = "none";
            this._Bal.href = "#";
            CM.BridgeHacks.Amount$1(this._Bal, "", "-", "");
        },
        FindAccount: function (id) {
            var $t;

            if (this._Search != null && Bridge.referenceEquals(this._Search.Item.ID, id)) {
                return;
            }

            if (this._Search != null) {
                this._Search.IsCancelled = true;
            }

            this.ResetInfo();

            this.Account = null;
            this._Search = null;

            if (!Bridge.staticEquals(this.OnAccountChanged, null)) {
                this.OnAccountChanged(null);
            }

            if (!CM.Helpers.IsIDValid(id)) {
                this._Feedback.Set(CM.Javascript.Assets.SVG.CircleUnknown, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_ACCOUNT_NAME_INSTRUCTIONS);
            } else {
                this._Search = ($t = new (CM.AsyncRequest$1(CM.Javascript.FindAccountRequest))(), $t.Item = new CM.Javascript.FindAccountRequest(id), $t);

                this._Search.OnComplete = Bridge.fn.bind(this, function (sender) {
                    var req = sender;
                    if (!Bridge.referenceEquals(req, this._Search) || req.IsCancelled) {
                        return;
                    } // stale search

                    if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.S_OK.$clone())) {

                        var a = req.Item.Output.Cast(CM.Schema.Account);
                        this.Account = a;
                        var calc = a.AccountCalculations;
                        if (calc != null && System.Nullable.liftne("ne", calc.RecentCredits, System.Decimal.lift(null)) && System.Nullable.liftne("ne", calc.RecentDebits, System.Decimal.lift(null)) && System.Nullable.liftne("ne", calc.RecentReputation, System.Decimal.lift(null))) {
                            var rr = { };
                            var rep = { v : new CM.RecentReputation() };
                            CM.Helpers.CalculateRecentReputation(System.Nullable.getValue(calc.RecentCredits), System.Nullable.getValue(calc.RecentDebits), rr, rep);
                            CM.BridgeHacks.Clear(this._Rep);
                            CM.BridgeHacks.Clear(this._Bal);
                            CM.BridgeHacks.Reputation(this._Rep, rep.v, true, false).className = "glyph";
                            CM.BridgeHacks.AmountReputation(this._Rep, rr.v);
                            CM.BridgeHacks.Reputation(this._Rep, rep.v, false, true).className = "lab";
                            CM.BridgeHacks.Amount(this._Bal, CM.Helpers.CalculateAccountBalance(System.Nullable.getValue(calc.RecentCredits), System.Nullable.getValue(calc.RecentDebits)), CM.Constants.Symbol, true);

                        }
                        if (this._ShowGlyph) {
                            CM.BridgeHacks.Span(this._Bal, CM.Javascript.Assets.SVG.CircleRight.ToString(16, 16, "#ffffff"), "glyph");
                        }

                        CM.BridgeHacks.Div(this._Bal, "label", CM.Javascript.SR.LABEL_BALANCE);
                        this._Bal.href = System.String.concat("/", a.ID);


                        this._Rep.style.display = "table-cell";
                        this._Bal.style.display = "table-cell";
                        this._Attributes.innerHTML = a.GetOneLineAttributeSummaryHtml();
                        this._Attributes.style.display = "block";
                        this._Feedback.Hide();
                        if (!Bridge.staticEquals(this.OnAccountChanged, null)) {
                            this.OnAccountChanged(a);
                        }

                        CM.Javascript.AccountPage.Prefetched = a;

                    } else if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.E_Item_Not_Found.$clone())) {
                        this._Feedback.Set$1(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, System.String.format(CM.Javascript.SR.LABEL_STATUS_ACCOUNT_NOT_FOUND, CM.Javascript.Page.HtmlEncode(id)), CM.Javascript.SR.LABEL_RETRY, Bridge.fn.bind(this, $asm.$.CM.Javascript.AccountInputBox.f3));
                    } else {
                        // Some other error, network probably
                        this._Feedback.Set$1(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_PROBLEM_REACHING_A_SERVER, " ", CM.BridgeHacks.GetLocalisedDescription(req.Result)), CM.Javascript.SR.LABEL_RETRY, Bridge.fn.bind(this, $asm.$.CM.Javascript.AccountInputBox.f3));
                    }
                });
                this._Feedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK, " ..."));
                CM.Javascript.App.Identity.Client.TryFindAccount(this._Search);
            }
        }
    }
    });

    Bridge.ns("CM.Javascript.AccountInputBox", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.AccountInputBox, {
        f1: function (e) {
            CM.BridgeHacks.AddClass(this._El, "focused-input");
        },
        f2: function (e) {
            CM.BridgeHacks.RemoveClass(this._El, "focused-input");
        },
        f3: function () {
            this._Feedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK, " ..."));
            CM.Javascript.App.Identity.Client.TryFindAccount(this._Search);
        }
    });

    Bridge.define("CM.Javascript.AccountPage.MultiSelect", {
        fields: {
            Element: null,
            _Title: null,
            _SelectedItems: null,
            _MyID: null
        },
        props: {
            Count: {
                get: function () {
                    return this._SelectedItems.Count;
                }
            }
        },
        ctors: {
            ctor: function (myID) {
                this.$initialize();                var $t;

                this._MyID = myID;
                this._SelectedItems = new (System.Collections.Generic.List$1(CM.Javascript.ListResult))();
                this.Element = ($t = document.createElement('div'), $t.className = "multiselect", $t);
                this._Title = CM.BridgeHacks.H2(this.Element, "");
                var row = CM.BridgeHacks.Div(this.Element, "button-row");
                CM.BridgeHacks.Button(row, CM.Javascript.SR.LABEL_PAYEE_STATUS_ACCEPT_VERB, Bridge.fn.bind(this, $asm.$.CM.Javascript.AccountPage.MultiSelect.f1), "green-button");
                CM.BridgeHacks.Button(row, CM.Javascript.SR.LABEL_PAYEE_STATUS_DECLINE_VERB, Bridge.fn.bind(this, $asm.$.CM.Javascript.AccountPage.MultiSelect.f2));
        }
    },
    methods: {
        Add: function (item) {
            if (!this._SelectedItems.contains(item)) {
                this._SelectedItems.add(item);
            }
            this.OnSelectedTransactionsChanged();
        },
        Remove$1: function (item) {
            this._SelectedItems.remove(item);
            this.OnSelectedTransactionsChanged();
        },
        Remove: function () {
            CM.BridgeHacks.RemoveEx(this.Element);
        },
        OpenAuthorisationDialog: function (status) {
            var ar = new (System.Collections.Generic.List$1(System.String))();
            for (var i = 0; i < this._SelectedItems.Count; i = (i + 1) | 0) {
                ar.add(this._SelectedItems.getItem(i).Data);
            }
            CM.Javascript.App.Identity.CurrentPage = new CM.Javascript.AuthorisePage.$ctor2(this._MyID, status, ar.toArray());
        },
        OnSelectedTransactionsChanged: function () {
            this._Title.innerHTML = this._SelectedItems.Count + " transaction(s) selected";

        }
    }
    });

    Bridge.ns("CM.Javascript.AccountPage.MultiSelect", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.AccountPage.MultiSelect, {
        f1: function (e) {
            this.OpenAuthorisationDialog(CM.Schema.PayeeStatus.Accept);
        },
        f2: function (e) {
            this.OpenAuthorisationDialog(CM.Schema.PayeeStatus.Decline);
        }
    });

    /**
     * Displays an alert at the top of the page when a push notification has been received.
     *
     * @class CM.Javascript.AlertUI
     */
    Bridge.define("CM.Javascript.AlertUI", {
        statics: {
            fields: {
                RecentNotifications: null
            },
            ctors: {
                init: function () {
                    this.RecentNotifications = new (System.Collections.Generic.List$1(CM.Javascript.PeerNotifyArgs))();
                }
            }
        },
        fields: {
            Element: null,
            _Count: null,
            _Dic: null,
            _Dismiss: null,
            _Glyph: null,
            _IsMinimised: false,
            _Items: null,
            _LastCount: 0,
            _Toggle: null
        },
        ctors: {
            ctor: function (client, parent) {
                this.$initialize();
                this._Dic = new (System.Collections.Generic.Dictionary$2(System.String,CM.Javascript.AlertUI.Info))();
                this.Element = CM.BridgeHacks.Div(parent, "alerts");
                client.addPeerNotifiesReceived(Bridge.fn.cacheBind(this, this.Client_PeerNotifiesReceived));

                this._Toggle = CM.BridgeHacks.Button(this.Element, "", Bridge.fn.cacheBind(this, this.OnToggle));
                this._Toggle.className = "toggle";
                this._Count = CM.BridgeHacks.Span(this._Toggle, "");
                CM.BridgeHacks.Span(this._Toggle, CM.Javascript.SR.LABEL_NOTIFICATIONS);
                this._Glyph = CM.BridgeHacks.Span(this._Toggle, "");

                this._Items = CM.BridgeHacks.Div(this.Element, "items");
                this._Dismiss = CM.BridgeHacks.Button(this.Element, CM.Javascript.SR.LABEL_DISMISS_ALL, Bridge.fn.bind(this, $asm.$.CM.Javascript.AlertUI.f1));
                this._IsMinimised = true;
                this.UpdateToggleButton();
            }
        },
        methods: {
            Minimise: function () {
                this._IsMinimised = true;
                this.UpdateToggleButton();
            },
            Client_PeerNotifiesReceived: function (arg) {
                var $t;
                var info = { };
                if (!this._Dic.tryGetValue(arg.Item.CM$IStorable$Path, info)) {
                    info.v = ($t = new CM.Javascript.AlertUI.Info(arg.Item.CM$IStorable$Path, this), $t.Element = CM.BridgeHacks.Div(this._Items, "item"), $t);
                    this._Dic.set(arg.Item.CM$IStorable$Path, info.v);
                }
                if (info.v.Copies.Count > 0 && System.DateTime.lt(info.v.Copies.getItem(0).CM$IStorable$UpdatedUtc, arg.Item.CM$IStorable$UpdatedUtc)) {
                    // Newer update incoming
                    info.v.Copies.clear();
                    info.v.Peers.clear();
                }
                info.v.Copies.add(arg.Item);
                for (var i = 0; i < arg.Peers.Count; i = (i + 1) | 0) {
                    if (!info.v.Peers.contains(arg.Peers.getItem(i))) {
                        info.v.Peers.add(arg.Peers.getItem(i));
                    }
                }

                info.v.Render();
                this.UpdateToggleButton();
                this.Element.style.display = "block";

                CM.Javascript.AlertUI.RecentNotifications.add(arg);
                while (CM.Javascript.AlertUI.RecentNotifications.Count > 50) {
                    CM.Javascript.AlertUI.RecentNotifications.removeAt(0);
                }
            },
            Dismiss: function (path) {
                var info = { };
                if (this._Dic.tryGetValue(path, info)) {
                    this._Dic.remove(path);
                    CM.BridgeHacks.RemoveEx(info.v.Element);
                }
                this.UpdateToggleButton();
                if (this._Dic.count === 0) {
                    this.Element.style.display = "none";
                }
            },
            OnToggle: function (arg) {
                this._IsMinimised = !this._IsMinimised;
                this.UpdateToggleButton();
            },
            UpdateToggleButton: function () {
                var s = new System.Text.StringBuilder();
                if (this._LastCount !== this._Dic.count) {
                    CM.BridgeHacks.Clear(this._Count);
                    CM.BridgeHacks.Span(this._Count, this._Dic.count.toString(), "count popin");
                    this._LastCount = this._Dic.count;
                }
                this._Glyph.innerHTML = (!this._IsMinimised ? CM.Javascript.Assets.SVG.ArrowUp : CM.Javascript.Assets.SVG.ArrowDown).ToString(16, 16, "#000000");

                if (this._IsMinimised) {
                    this._Items.style.display = "none";
                    this._Dismiss.style.display = "none";
                } else {
                    this._Items.style.display = "block";
                    this._Dismiss.style.display = "inline";
                }
            }
        }
    });

    Bridge.ns("CM.Javascript.AlertUI", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.AlertUI, {
        f1: function (e) {
            this._Dic.clear();
            CM.BridgeHacks.Clear(this._Items);
            this.Element.style.display = "none";
        }
    });

    Bridge.define("CM.Javascript.AlertUI.Info", {
        fields: {
            Copies: null,
            Element: null,
            Peers: null,
            _Owner: null,
            _Path: null,
            _Url: null
        },
        ctors: {
            init: function () {
                this.Copies = new (System.Collections.Generic.List$1(CM.IStorable))();
                this.Peers = new (System.Collections.Generic.List$1(CM.Javascript.Peer))();
            },
            ctor: function (path, owner) {
                this.$initialize();
                this._Path = path;
                this._Owner = owner;
            }
        },
        methods: {
            Render: function () {
                CM.BridgeHacks.Clear(this.Element);

                var div = document.createElement('div');
                var inner = CM.BridgeHacks.Div(div);
                CM.BridgeHacks.Button(CM.BridgeHacks.Div(inner, "close"), CM.Javascript.Assets.SVG.Close.ToString(16, 16, "#000000"), Bridge.fn.bind(this, $asm.$.CM.Javascript.AlertUI.Info.f1));
                var details = CM.BridgeHacks.Div(inner, "details");
                var numbers = CM.BridgeHacks.Div(inner, "numbers");
                if (Bridge.is(this.Copies.getItem(0), CM.Schema.Account)) {
                    var typedAr = new (System.Collections.Generic.List$1(CM.Schema.Account))();
                    for (var i = 0; i < this.Copies.Count; i = (i + 1) | 0) {
                        typedAr.add(Bridge.cast(this.Copies.getItem(i), CM.Schema.Account));
                    }
                    var item = { };

                    CM.Helpers.CheckConsensus(CM.Schema.Account, typedAr, item);
                    if (item.v != null) {
                        CM.BridgeHacks.H2(details, System.String.format(CM.Javascript.SR.LABEL_ALERT_ACCOUNT_BLANK_MODIFIED, CM.Javascript.Page.HtmlEncode(item.v.ID)));
                        CM.BridgeHacks.H3(details, System.String.concat((item.v.ConsensusCount >= CM.Constants.MinimumNumberOfCopies ? CM.Javascript.Assets.SVG.CircleTick.ToString(16, 16, CM.Javascript.Assets.SVG.STATUS_GREEN_COLOR) : CM.Javascript.Assets.SVG.Warning.ToString(16, 16, "#cccccc")), " ", item.v.ConsensusCount.toString(), " ", CM.Javascript.SR.LABEL_CONFIRMATIONS));
                        this._Url = System.String.concat("/", item.v.ID);
                    }
                } else if (Bridge.is(this.Copies.getItem(0), CM.Schema.Transaction)) {
                    var typedAr1 = new (System.Collections.Generic.List$1(CM.Schema.Transaction))();
                    for (var i1 = 0; i1 < this.Copies.Count; i1 = (i1 + 1) | 0) {
                        typedAr1.add(Bridge.cast(this.Copies.getItem(i1), CM.Schema.Transaction));
                    }
                    var item1 = { };
                    CM.Helpers.CheckConsensus(CM.Schema.Transaction, typedAr1, item1);
                    if (item1.v != null) {
                        var title = "";
                        if (System.DateTime.gt(item1.v.PayeeUpdatedUtc, item1.v.PayerUpdatedUtc)) {
                            title = System.String.concat(item1.v.PayeeID, " ");
                            switch (item1.v.PayeeStatus) {
                                case CM.Schema.PayeeStatus.Accept: 
                                    title = System.String.concat(title, (CM.Javascript.SR.LABEL_ALERT_ACCEPTED_TRANSACTION.toString().toLowerCase()));
                                    break;
                                case CM.Schema.PayeeStatus.NotSet: 
                                    break;
                                case CM.Schema.PayeeStatus.Decline: 
                                    title = System.String.concat(title, (CM.Javascript.SR.LABEL_ALERT_DECLINED_TRANSACTION.toLowerCase()));
                                    break;
                                case CM.Schema.PayeeStatus.Refund: 
                                    title = System.String.concat(title, (CM.Javascript.SR.LABEL_ALERT_REFUNDED_TRANSACTION.toLowerCase()));
                                    break;
                            }
                        } else {
                            title = System.String.concat(item1.v.PayerID, " ");
                            switch (item1.v.PayerStatus) {
                                case CM.Schema.PayerStatus.Accept: 
                                    title = System.String.concat(title, (CM.Javascript.SR.LABEL_ALERT_SENT_TRANSACTION.toString().toLowerCase()));
                                    break;
                                case CM.Schema.PayerStatus.NotSet: 
                                    title = System.String.concat(title, (CM.Javascript.SR.LABEL_ALERT_SENT_TRANSACTION.toString().toLowerCase()));
                                    break;
                                case CM.Schema.PayerStatus.Cancel: 
                                    title = System.String.concat(title, (CM.Javascript.SR.LABEL_ALERT_CANCELLED_TRANSACTION.toLowerCase()));
                                    break;
                                case CM.Schema.PayerStatus.Dispute: 
                                    title = System.String.concat(title, (CM.Javascript.SR.LABEL_ALERT_DISPUTED_TRANSACTION.toLowerCase()));
                                    break;
                            }
                        }
                        CM.BridgeHacks.H2(details, CM.Javascript.Page.HtmlEncode(title));
                        CM.BridgeHacks.H3(details, System.String.concat((item1.v.ConsensusCount >= CM.Constants.MinimumNumberOfCopies ? CM.Javascript.Assets.SVG.CircleTick.ToString(16, 16, CM.Javascript.Assets.SVG.STATUS_GREEN_COLOR) : CM.Javascript.Assets.SVG.Warning.ToString(16, 16, "#cccccc")), " ", item1.v.ConsensusCount.toString(), " ", CM.Javascript.SR.LABEL_CONFIRMATIONS));
                        CM.BridgeHacks.Amount(CM.BridgeHacks.H2(numbers, ""), item1.v.Amount, CM.Constants.Symbol, false);
                        var ti = new CM.Javascript.TransactionInfo(div, item1.v, false);
                        ti.OnButtonClick = Bridge.fn.cacheBind(this, this.Dismiss);
                    } else {
                    }
                } else {
                    throw new System.NotImplementedException();
                }

                if (this._Url != null) {
                    details.onclick = Bridge.fn.cacheBind(this, this.OnClick);
                    numbers.onclick = Bridge.fn.cacheBind(this, this.OnClick);
                    details.style.cursor = "pointer";
                    numbers.style.cursor = "pointer";
                }

                this.Element.appendChild(div);
            },
            Dismiss: function () {
                this._Owner.Dismiss(this._Path);
                CM.BridgeHacks.RemoveEx(this.Element);
            },
            OnClick: function (arg) {
                CM.Javascript.App.Identity.Navigate(this._Url);
                this._Owner.Minimise();
            }
        }
    });

    Bridge.ns("CM.Javascript.AlertUI.Info", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.AlertUI.Info, {
        f1: function (e) {
            this.Dismiss();
        }
    });

    /**
     * This is the main javascript entry point for the web client.
     *
     * @class CM.Javascript.App
     */
    Bridge.define("CM.Javascript.App", {
        statics: {
            fields: {
                Identity: null
            },
            ctors: {
                init: function () {
                    Bridge.ready(this.Main);
                }
            },
            methods: {
                Main: function () {
                    var $t;
                    document.head.appendChild(($t = document.createElement('meta'), $t.name = "viewport", $t.content = "width=device-width, initial-scale=1, maximum-scale=1.0, minimum-scale=1.0", $t));

                    CM.Javascript.App.Identity = new CM.Javascript.App();
                }
            }
        },
        $entryPoint: true,
        fields: {
            PopupBubble: null,
            Client: null,
            _Alerts: null,
            _CurrentHash: null,
            _CurrentPage: null,
            _Help: null,
            _History: null,
            _Holder: null,
            _Home: null,
            _Language: null,
            _Menu: null,
            _NumPeers: null,
            _Regions: null,
            _Root: null,
            _Status: null,
            _Voting: null,
            _IsInitialPageLoadOrBackButton: false
        },
        props: {
            CurrentPage: {
                get: function () {
                    return this._CurrentPage;
                },
                set: function (value) {
                    this.ChangePage(value);
                }
            },
            CurrentPath: {
                get: function () {
                    return this._CurrentHash;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();                var $t;

                this.Client = new CM.Javascript.Client();
                this.Client.addPeerStateChanged(Bridge.fn.cacheBind(this, this.Client_PeerStateChanged));
                //Window.OnHashChange = CheckLocation;
                window.onpopstate = Bridge.fn.cacheBind(this, this.CheckLocation);
                this._IsInitialPageLoadOrBackButton = true;

                var lang = null;
                if (window.localStorage != null) {
                    lang = Bridge.as(window.localStorage.getItem("language"), System.String);
                }

                if (lang == null && Bridge.global.navigator != null && Bridge.global.navigator.language != null && CM.Javascript.SR.Langauges.containsKey(Bridge.global.navigator.language.toUpperCase())) {
                    lang = Bridge.global.navigator.language.toUpperCase();
                }

                this.SetLanguage(($t = lang, $t != null ? $t : "EN-GB"));

                // var s = new System.Text.StringBuilder();
                // var dic = typeof(CMResult);
                // var keys = Type.GetOwnPropertyNames(dic);
                // foreach (string key in keys) {
                //     if (key.IndexOf("s_") == -1 && key.IndexOf("e_") == -1) continue;
                //     var v = ((CMResult)dic[key]);
                //     s.Append("|" + "0x" + ((uint)v.Code).ToString("X") + "|" + key + "|" + v.Description+"|\r\n");
                // }
                // Console.WriteLine(s.ToString());
        }
    },
    methods: {
        Navigate: function (path) {
            var start = System.String.concat(window.location.protocol, "//", window.location.host);
            if (System.String.startsWith(path, start)) {
                path = path.substr(start.length);
            }
            //if (!path.StartsWith(start)
            //    && start.IndexOf("://") > -1) {
            //    // Some off-site URL
            //    Window.Location.Assign(path);
            //    return;
            //}
            if (path.length <= 1) {
                this.ChangePage(new CM.Javascript.HomePage());
            } else {
                var parts = System.String.split(path.substr(1), [47].map(function(i) {{ return String.fromCharCode(i); }}));
                switch (parts[System.Array.index(0, parts)]) {
                    case "register": 
                        this.ChangePage(new CM.Javascript.RegisterPage());
                        break;
                    case "status": 
                        this.ChangePage(new CM.Javascript.StatusPage());
                        break;
                    case "language": 
                        this.ChangePage(new CM.Javascript.LanguagePage());
                        break;
                    case "history": 
                        this.ChangePage(new CM.Javascript.HistoryPage());
                        break;
                    case "help": 
                        this.ChangePage(new CM.Javascript.HelpPage());
                        break;
                    case "about": 
                        this.ChangePage(new CM.Javascript.AboutPage());
                        break;
                    case "api": 
                        this.ChangePage(new CM.Javascript.ApiPage());
                        break;
                    case "regions": 
                        this.ChangePage(new CM.Javascript.RegionsPage(parts.length === 2 ? parts[System.Array.index(1, parts)] : ""));
                        break;
                    case "vote": 
                        this.ChangePage(new CM.Javascript.VotesPage(parts.length === 2 ? parts[System.Array.index(1, parts)] : ""));
                        break;
                    default: 
                        CM.Javascript.RegisterPage.ReturnPath = null;
                        // does it look like a transaction ID?
                        // yyyy-MM-ddTHH:mm:ss payer payee
                        var id = System.String.replaceAll(System.String.replaceAll(parts[System.Array.index(0, parts)], "+", " "), "%20", " ");
                        var utc = { };
                        var payee = { }, payer = { };
                        if (parts.length === 1 && CM.Helpers.TryParseTransactionID(id, utc, payee, payer)) {
                            this.ChangePage(new CM.Javascript.TransactionPage(id));
                        } else if (CM.Helpers.IsIDValid(parts[System.Array.index(0, parts)])) {
                            if (parts.length === 2) {
                                switch (parts[System.Array.index(1, parts)]) {
                                    case "edit": 
                                        this.ChangePage(new CM.Javascript.AccountEditPage(parts[System.Array.index(0, parts)]));
                                        break;
                                    case "link": 
                                        this.ChangePage(new CM.Javascript.PaymentLinkPage(parts[System.Array.index(0, parts)]));
                                        break;
                                    default: 
                                    case "pay":  // modified base64 payment links
                                        this.ChangePage(new CM.Javascript.PaymentPage(parts[System.Array.index(0, parts)], parts[System.Array.index(1, parts)]));
                                        break;
                                }
                            } else {
                                this.ChangePage(new CM.Javascript.AccountPage(parts[System.Array.index(0, parts)]));
                            }
                        } else {
                            // Page not found
                            this.ChangePage(new CM.Javascript.InvalidPage(path));
                        }
                        break;
                }
            }
        },
        SetLanguage: function (lang) {
            if (window.localStorage != null) {
                window.localStorage.setItem("language", lang);
            }
            CM.Javascript.SR.Load(lang, Bridge.fn.cacheBind(this, this.ReBuildUI));
        },
        ChangePage: function (newPage) {
            var $t;
            if (this._CurrentPage != null) {
                this._CurrentPage.Element.parentElement.removeChild(this._CurrentPage.Element); //.Remove();
                this._CurrentPage.OnRemoved();
            }
            if (!newPage.IsBuilt) {
                newPage.Build();
                newPage.IsBuilt = true;
            }
            if (!this._IsInitialPageLoadOrBackButton) {
                window.history.pushState(null, newPage.Title, newPage.Url);
            }
            this._IsInitialPageLoadOrBackButton = false;
            window.document.title = newPage.Title;
            this._CurrentHash = window.location.pathname;
            this._CurrentPage = newPage;
            this._Holder.appendChild(newPage.Element);
            newPage.OnAdded();
            this.CloseAllDialogs();
            this.HideNav();
            window.scrollTo(0, 0);

            for (var i = 0; i < this._Menu.children.length; i = (i + 1) | 0) {
                CM.BridgeHacks.RemoveClass(($t = this._Menu.children)[System.Array.index(i, $t)], "current");
            }
            if (Bridge.is(newPage, CM.Javascript.HomePage)) {
                CM.BridgeHacks.AddClass(this._Home, "current");
            } else if (Bridge.is(newPage, CM.Javascript.StatusPage)) {
                CM.BridgeHacks.AddClass(this._Status, "current");
            } else if (Bridge.is(newPage, CM.Javascript.RegionsPage)) {
                CM.BridgeHacks.AddClass(this._Regions, "current");
            } else if (Bridge.is(newPage, CM.Javascript.LanguagePage)) {
                CM.BridgeHacks.AddClass(this._Language, "current");
            } else if (Bridge.is(newPage, CM.Javascript.HistoryPage)) {
                CM.BridgeHacks.AddClass(this._History, "current");
            } else if (Bridge.is(newPage, CM.Javascript.HelpPage)) {
                CM.BridgeHacks.AddClass(this._Help, "current");
            } else if (Bridge.is(newPage, CM.Javascript.VotesPage)) {
                CM.BridgeHacks.AddClass(this._Voting, "current");
            }
        },
        CheckLocation: function (ev) {
            if (Bridge.referenceEquals(this._CurrentHash, window.location.pathname)) {
                return;
            }
            this._IsInitialPageLoadOrBackButton = !!(this._IsInitialPageLoadOrBackButton | (ev != null));
            this.Navigate(window.location.pathname);
        },
        Client_PeerStateChanged: function (arg) {
            var connected = 0;
            for (var i = 0; i < this.Client.Peers.Count; i = (i + 1) | 0) {
                try {
                    if (this.Client.Peers.getItem(i).State === CM.Javascript.PeerState.Connected) {
                        connected = (connected + 1) | 0;
                    }
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    // ignore potential IndexOfOutOfRange on informative feature
                }
            }
            this._NumPeers.innerHTML = System.String.concat(connected.toString(), (connected > 1 ? CM.Javascript.Assets.SVG.CircleTick.ToString(10, 10, CM.Javascript.Assets.SVG.STATUS_GREEN_COLOR) : CM.Javascript.Assets.SVG.Warning.ToString(10, 10, "#cc0000")));
        },
        CloseAllDialogs: function () { },
        HideNav: function () { },
        OnMenu: function (e) {
            if (CM.BridgeHacks.ContainsClass(this._Menu, "shown")) {
                CM.BridgeHacks.RemoveClass(this._Menu, "shown");
                CM.BridgeHacks.RemoveClass(this._Holder, "menushown");
                CM.BridgeHacks.RemoveClass(this._Alerts.Element, "menushown");
                if (window.localStorage != null) {
                    window.localStorage.setItem("showmenu", "0");
                }
            } else {
                CM.BridgeHacks.AddClass(this._Menu, "shown");
                CM.BridgeHacks.AddClass(this._Holder, "menushown");
                CM.BridgeHacks.AddClass(this._Alerts.Element, "menushown");
                if (window.localStorage != null) {
                    window.localStorage.setItem("showmenu", "1");
                }
            }
        },
        ReBuildUI: function () {
            var $t;
            this._CurrentHash = null; // reset navigation

            CM.BridgeHacks.Clear(document.body);

            this._Root = ($t = document.createElement('div'), $t.className = "cm", $t);
            this.PopupBubble = new CM.Javascript.PopupBubble(this._Root);

            this._Alerts = new CM.Javascript.AlertUI(this.Client, this._Root);
            this._Menu = CM.BridgeHacks.Div(this._Root, "menu");
            this._Holder = CM.BridgeHacks.Div(this._Root, "main");

            var menuGlyphColour = "#222";
            CM.BridgeHacks.A(this._Menu, CM.Javascript.Assets.SVG.Hamburger.ToString(16, 16, menuGlyphColour), Bridge.fn.cacheBind(this, this.OnMenu), "expand");
            this._Home = CM.BridgeHacks.A$1(this._Menu, CM.Javascript.Assets.SVG.Home.ToString(24, 24, menuGlyphColour), "/");
            this._Home.title = CM.Javascript.SR.TITLE_HOMEPAGE;
            CM.BridgeHacks.Span(this._Home, CM.Javascript.SR.TITLE_HOMEPAGE, "label");
            this._History = CM.BridgeHacks.A$1(this._Menu, CM.Javascript.Assets.SVG.History.ToString(24, 24, menuGlyphColour), "/history");
            this._History.title = CM.Javascript.SR.TITLE_HISTORY;
            CM.BridgeHacks.Span(this._History, CM.Javascript.SR.TITLE_HISTORY, "label");
            this._Regions = CM.BridgeHacks.A$1(this._Menu, CM.Javascript.Assets.SVG.Regions.ToString(24, 24, menuGlyphColour), "/regions");
            this._Regions.title = CM.Javascript.SR.TITLE_REGIONS;
            CM.BridgeHacks.Span(this._Regions, CM.Javascript.SR.TITLE_REGIONS, "label");
            this._Voting = CM.BridgeHacks.A$1(this._Menu, CM.Javascript.Assets.SVG.Voting.ToString(24, 24, menuGlyphColour), "/vote");
            this._Voting.title = CM.Javascript.SR.TITLE_VOTING;
            CM.BridgeHacks.Span(this._Voting, CM.Javascript.SR.TITLE_VOTING, "label");

            this._Help = CM.BridgeHacks.A$1(this._Menu, CM.Javascript.Assets.SVG.Support.ToString(24, 24, menuGlyphColour), "/help");
            this._Help.title = CM.Javascript.SR.TITLE_HELP;
            CM.BridgeHacks.Span(this._Help, CM.Javascript.SR.TITLE_HELP, "label");

            CM.BridgeHacks.Div(this._Menu, "spacer");
            this._Language = CM.BridgeHacks.A$1(this._Menu, System.String.concat("<b>", System.String.replaceAll(CM.Javascript.SR.CurrentLanguage, "-", "<br/>"), "</b>"), "/language", "lang");
            this._Language.title = CM.Javascript.SR.TITLE_CHOOSE_YOUR_LANGUAGE;
            CM.BridgeHacks.Span(this._Language, CM.Javascript.SR.Langauges.get(CM.Javascript.SR.CurrentLanguage), "label");
            this._Status = CM.BridgeHacks.A$1(this._Menu, null, "/status", "status");
            this._Status.title = CM.Javascript.SR.TITLE_PEERS;
            this._NumPeers = CM.BridgeHacks.Span(this._Status, "0", "num-peers");
            CM.BridgeHacks.Span(this._Status, CM.Javascript.Assets.SVG.Peers.ToString(24, 24, menuGlyphColour));
            CM.BridgeHacks.Span(this._Status, CM.Javascript.SR.TITLE_PEERS, "label");

            document.title = CM.Javascript.SR.TITLE_CIVIL_MONEY;
            document.body.appendChild(this._Root);

            System.Threading.Tasks.Task.run(Bridge.fn.bind(this, $asm.$.CM.Javascript.App.f1));

            if (window.localStorage != null) {
                var showmenu = Bridge.as(window.localStorage.getItem("showmenu"), System.String);
                if ((showmenu == null && window.innerWidth > 1000) || Bridge.referenceEquals(showmenu, "1")) {
                    this.OnMenu(null);
                }
            }
        }
    }
    });

    Bridge.ns("CM.Javascript.App", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.App, {
        f1: function () {
            this.CheckLocation(null);
        }
    });

    /** @namespace CM.Javascript.Assets */

    /**
     * SVG glyphs/graphics
     *
     * @class CM.Javascript.Assets.SVG
     */
    Bridge.define("CM.Javascript.Assets.SVG", {
        statics: {
            fields: {
                STATUS_GREEN_COLOR: null,
                Logo: null,
                Home: null,
                History: null,
                Regions: null,
                Voting: null,
                Support: null,
                Wait: null,
                Computer: null,
                Search: null,
                Peers: null,
                Warning: null,
                Hamburger: null,
                QRCode: null,
                Speech: null,
                Person: null,
                CircleUnknown: null,
                CircleError: null,
                CircleTick: null,
                CircleRemove: null,
                CircleAdd: null,
                CircleRight: null,
                ArrowUp: null,
                ArrowDown: null,
                Tag: null,
                Close: null,
                ThreeDots: null
            },
            ctors: {
                init: function () {
                    this.STATUS_GREEN_COLOR = "#00B800";
                    this.Logo = new CM.Javascript.Assets.SVG("0 0 409 98", "M 266.355,61.2047C 265.957,61.2047 265.641,61.0869 265.434,60.9811C 263.883,60.1802 263.704,57.7241 263.544,53.7797L 263.42,51.4547C 263.277,49.674 262.119,48.6704 261.782,48.4139C 260.69,47.9769 258.088,46.9823 256.926,46.7289C 255.776,46.4799 254.969,45.5358 254.82,44.2697C 254.646,42.7887 255.411,40.7621 257.17,39.9165C 257.637,39.6914 258.059,39.5914 258.42,39.5527L 258.39,39.1649C 258.332,38.4999 258.159,38.312 258.107,38.2701C 257.85,38.0599 257.029,38.1598 256.484,38.2255L 255.505,38.3075C 255.299,38.7235 255.048,39.9105 254.781,41.1617L 254.649,41.7866C 254.312,43.3599 253.471,43.8087 252.823,43.9087C 251.334,44.1323 250.367,42.5815 250.188,42.2667L 250.011,41.8389C 249.487,42.3115 248.681,42.817 247.437,43.257C 245.866,43.8102 244.988,43.1989 244.605,42.7858C 244.41,42.5768 244.263,42.3348 244.157,42.0673C 242.85,44.9741 242.368,48.2618 242.953,51.5978C 243.802,56.4376 246.726,60.4176 250.689,62.8346C 250.497,62.4747 250.449,62.0392 250.592,61.6234C 252.224,56.8344 253.019,55.6307 254.175,54.5719L 253.636,54.3619C 252.612,53.9725 251.644,53.6035 251.03,52.9899C 250.565,52.5255 250.269,52.3475 249.82,52.0804L 249.628,51.9644C 249.439,52.7767 249.256,53.9312 249.159,55.0234C 249.086,55.8613 248.356,56.4845 247.505,56.4098C 246.666,56.3351 246.046,55.5942 246.119,54.7548C 246.607,49.2026 247.841,48.6715 248.367,48.4425C 249.005,48.1691 249.728,48.2725 250.299,48.724C 250.743,49.0753 251.078,49.274 251.387,49.4601C 251.911,49.7734 252.455,50.0977 253.188,50.8275C 253.387,51.0009 254.223,51.3188 254.725,51.5096C 256.241,52.0884 257.672,52.6338 257.928,54.0043C 258.006,54.4287 258.01,55.2523 257.155,56.0234L 256.63,56.4799C 255.668,57.297 255.139,57.7469 253.479,62.609C 253.277,63.2012 252.747,63.5884 252.161,63.6372C 255.347,65.1787 259.06,65.7711 262.847,65.1071C 272.219,63.4633 278.548,54.7295 276.953,45.6344L 276.509,43.7612C 275.983,44.7911 274.929,45.7373 273.357,46.5885L 272.786,46.9257C 272.85,47.2775 273.111,48.0172 273.326,48.6285C 274.569,52.1764 269.466,59.603 267.657,60.7842C 267.173,61.1002 266.728,61.2047 266.355,61.2047 Z M 247.712,37.5181C 247.273,38.5292 246.926,39.6984 246.824,40.4291C 247.807,40.0367 248.131,39.682 248.201,39.5924L 248.301,39.3793L 249.698,36.9351C 250.013,36.3833 250.647,36.1074 251.264,36.2505C 251.88,36.3922 252.329,36.9247 252.369,37.5553L 252.439,38.5397C 252.964,36.5278 253.617,35.4467 255.474,35.4467L 256.142,35.3856C 257.168,35.2617 258.714,35.0753 259.912,36.0492C 260.683,36.6769 261.132,37.6403 261.241,38.9185C 261.369,40.3813 261.412,41.3104 260.734,41.9711C 260.14,42.5468 259.42,42.4618 259.074,42.4199C 258.813,42.3901 258.671,42.3722 258.407,42.4976C 258.125,42.6348 257.878,42.9479 257.745,43.337C 257.65,43.6146 257.647,43.8383 257.665,43.9619C 259.42,44.375 262.856,45.7621 263.005,45.8217L 263.236,45.9409C 263.348,46.0126 265.99,47.726 266.272,51.2275L 266.403,53.6642C 266.448,54.8066 266.526,56.6857 266.726,57.8026C 268.4,55.9415 271.117,50.9889 270.622,49.5797C 269.716,46.9982 269.215,45.5756 271.993,44.0724C 273.535,43.2357 274.06,42.502 274.037,42.1261C 273.999,41.4009 274.505,40.7715 275.202,40.64C 271.815,34.452 264.582,30.811 257.062,32.13C 253.432,32.7667 250.259,34.4659 247.825,36.837C 247.843,37.063 247.808,37.2963 247.712,37.5181 Z M 263.767,69.3634C 251.405,71.5317 239.637,64.5409 237.533,52.5487C 235.431,40.5609 243.777,30.0425 256.14,27.874C 268.499,25.7062 280.267,32.6968 282.37,44.6846C 284.473,56.6769 276.127,67.1957 263.767,69.3634 Z M 72.0528,40.4146C 70.39,40.4146 69.0378,39.0656 69.0378,37.403L 69.0378,31.993C 69.0378,30.3273 70.39,28.9781 72.0528,28.9781C 73.722,28.9781 75.071,30.3273 75.071,31.993L 75.071,37.403C 75.071,39.0656 73.722,40.4146 72.0528,40.4146 Z M 87.3595,40.4144C 85.6934,40.4144 84.3445,39.0654 84.3445,37.4028L 84.3445,31.9928C 84.3445,30.3271 85.6934,28.978 87.3595,28.978C 89.0251,28.978 90.3741,30.3271 90.3741,31.9928L 90.3741,37.4028C 90.3741,39.0654 89.0251,40.4144 87.3595,40.4144 Z M 80.2869,76.3236C 66.3907,76.3236 55.0841,61.1888 55.0841,48.7406C 55.0841,47.0746 56.4331,45.7256 58.0984,45.7256C 59.7645,45.7256 61.1134,47.0746 61.1134,48.7406C 61.1134,57.8605 69.7156,68.2871 80.2869,68.2871C 90.8615,68.2871 99.4604,57.8605 99.4604,48.7406C 99.4604,47.0746 100.813,45.7256 102.479,45.7256C 104.141,45.7256 105.497,47.0746 105.497,48.7406C 105.497,61.1888 94.1831,76.3236 80.2869,76.3236 Z M 12.9544,73.5065C 8.78764,73.5065 5.58688,72.309 3.35214,69.9139C 1.1174,67.5189 6.35745e-006,64.1669 6.35745e-006,59.8575C 6.35745e-006,52.5924 2.91142,44.931 8.73422,36.8735C 14.5571,28.8159 19.9703,24.7871 24.974,24.7871C 27.2532,24.7871 29.2164,26.0426 30.8636,28.5533C 32.5107,31.0641 33.3342,33.7262 33.3342,36.5397C 33.3342,38.2313 32.9736,39.687 32.2525,40.9067C 31.5313,42.1265 30.8057,42.7363 30.0756,42.7363C 28.4285,42.7363 27.2666,41.0892 26.5899,37.795C 25.8331,34.2515 24.7336,32.4796 23.2912,32.4796C 20.3531,32.4796 16.8763,35.854 12.8609,42.6029C 8.84551,49.3516 6.83781,55.0498 6.83781,59.6973C 6.83781,64.3448 9.52218,66.6686 14.8909,66.6686C 18.9775,66.6686 23.7898,64.7767 29.3277,60.9927C 31.2776,59.6483 32.711,58.9761 33.6281,58.9761C 34.5718,58.9761 35.0437,59.5238 35.0437,60.6188C 35.0437,62.7467 32.5574,65.4266 27.5849,68.6586C 22.6124,71.8905 17.7355,73.5065 12.9544,73.5065 Z M 51.5505,15.3851C 50.9808,15.3851 50.5489,14.7709 50.2551,13.5421L 49.8144,12.2601C 49.0843,10.4794 48.7193,8.93018 48.7193,7.61243C 48.7193,6.51746 49.3581,5.40222 50.6357,4.26709C 51.9134,3.13184 53.3357,2.56433 54.9027,2.56433C 55.6772,2.56433 56.5498,2.87146 57.5203,3.48584C 58.4907,4.1001 58.976,4.69666 58.976,5.27539C 58.976,6.18359 58.6465,7.71936 57.9877,9.88281C 57.3288,12.0464 56.2782,13.5043 54.8359,14.2567C 53.3936,15.0089 52.2984,15.3851 51.5505,15.3851 Z M 46.1551,61.9677C 46.1551,64.0865 46.3955,66.4683 46.8763,69.1124L 47.0099,70.3678C 47.0099,70.8666 46.5402,71.5142 45.6009,72.311C 44.6616,73.1079 43.6622,73.5063 42.6027,73.5063C 39.8426,73.5063 38.4626,71.0223 38.4626,66.0542C 38.4626,60.9259 39.5221,52.8149 41.6411,41.7213C 42.3712,37.8395 42.7362,35.4532 42.7362,34.563C 42.7362,32.8091 43.0679,31.311 43.7312,30.069C 44.3945,28.827 45.3271,28.2061 46.5291,28.2061C 47.9981,28.2061 49.1578,28.5465 50.0081,29.2277C 50.8583,29.9088 51.2835,30.6678 51.2835,31.5048C 51.2835,32.3417 51.092,33.4457 50.7092,34.8168C 48.6614,42.1798 47.3905,47.4507 46.8963,50.629C 46.4022,53.8076 46.1551,57.587 46.1551,61.9677 Z M 124.202,15.3851C 123.632,15.3851 123.2,14.7706 122.906,13.542L 122.466,12.2599C 121.736,10.4794 121.371,8.93018 121.371,7.61243C 121.371,6.51721 122.009,5.40222 123.287,4.26697C 124.565,3.13184 125.987,2.56433 127.554,2.56433C 128.329,2.56433 129.201,2.87146 130.172,3.48572C 131.142,4.1001 131.627,4.69666 131.627,5.27527C 131.627,6.18347 131.298,7.71924 130.639,9.88281C 129.98,12.0463 128.93,13.5043 127.487,14.2565C 126.045,15.0089 124.95,15.3851 124.202,15.3851 Z M 118.806,61.9674C 118.806,64.0864 119.047,66.4681 119.528,69.1124L 119.661,70.3678C 119.661,70.8663 119.191,71.5142 118.252,72.311C 117.313,73.1079 116.313,73.5063 115.254,73.5063C 112.494,73.5063 111.114,71.0223 111.114,66.0542C 111.114,60.9258 112.173,52.8148 114.292,41.7212C 115.022,37.8394 115.387,35.4532 115.387,34.563C 115.387,32.809 115.719,31.311 116.382,30.069C 117.046,28.827 117.978,28.2059 119.18,28.2059C 120.649,28.2059 121.809,28.5465 122.659,29.2275C 123.51,29.9087 123.935,30.6676 123.935,31.5045C 123.935,32.3414 123.743,33.4454 123.36,34.8168C 121.313,42.1797 120.042,47.4506 119.548,50.629C 119.053,53.8076 118.806,57.587 118.806,61.9674 Z M 143.914,0C 145.98,0 147.012,1.2865 147.012,3.8595C 147.012,6.15662 145.784,11.6144 143.326,20.2329C 141.777,25.6549 140.58,31.6403 139.734,38.1888C 138.888,44.7372 138.465,49.8722 138.465,53.5938C 138.465,58.2057 138.706,62.791 139.186,67.3495L 139.32,69.246C 139.32,70.6437 138.835,71.8457 137.864,72.8517C 136.894,73.8579 135.87,74.3608 134.792,74.3608C 133.279,74.3608 132.231,73.4371 131.647,71.5897C 131.064,69.7423 130.773,66.7618 130.773,62.6486C 130.773,53.2822 131.928,41.6744 134.238,27.8252C 136.549,13.9761 138.387,5.8761 139.754,3.52576C 141.121,1.17529 142.507,0 143.914,0 Z M 150.231,70.0873C 148.548,70.0873 147.306,69.7489 146.505,69.0723C 145.704,68.3955 145.303,66.6105 145.303,63.7168C 145.303,62.1053 145.374,60.8722 145.517,60.0176C 145.659,59.1627 146.34,58.4906 147.56,58.0009C 148.78,57.5112 150.543,57.2665 152.849,57.2665C 154.567,57.2665 155.876,57.6781 156.775,58.5016C 157.674,59.3252 158.124,60.2267 158.124,61.2061C 158.124,62.8265 157.877,64.0685 157.383,64.9321C 156.888,65.7958 155.82,66.871 154.177,68.1573C 152.535,69.444 151.219,70.0873 150.231,70.0873 Z M 192.58,37.6075C 189.989,37.6611 184.451,45.3624 175.966,60.7119C 173.099,65.8848 171.43,68.7003 170.958,69.1591C 170.486,69.6176 169.616,70.0293 168.347,70.3944C 167.078,70.7593 166.026,70.9419 165.189,70.9419C 163.328,70.9419 162.398,67.3004 162.398,60.0175C 162.398,55.913 163.408,48.4877 165.429,37.7412C 166.257,33.3873 166.671,30.2758 166.671,28.4059C 166.671,26.563 167.464,25.6415 169.048,25.6415C 172.022,25.6415 173.509,27.8717 173.509,32.3324C 173.509,34.4247 172.988,38.5248 171.946,44.6323C 170.736,51.6127 170.117,55.8551 170.09,57.3597C 171.791,55.6681 174.284,51.9644 177.569,46.2484C 182.225,38.4135 185.655,33.4476 187.859,31.3507C 190.063,29.254 192.344,28.2057 194.703,28.2057C 196.484,28.2057 197.9,29.4365 198.95,31.8983C 200.001,34.3602 200.638,40.2386 200.86,49.5337C 200.914,51.8574 201.125,53.5848 201.495,54.7155C 201.864,55.8462 202.133,56.4116 202.302,56.4116C 203.62,56.4116 206.492,51.8887 210.916,42.8428C 213.276,38.0616 215.575,34.4269 217.814,31.9385C 220.054,29.4498 222.54,28.2057 225.273,28.2057C 227.552,28.2057 229.213,29.3654 230.255,31.6847C 231.296,34.004 232.044,37.4429 232.498,42.0015C 232.926,46.6134 233.589,50.8358 234.488,54.6688C 235.387,58.5016 237.039,60.9611 239.443,62.0474C 241.072,62.7953 241.887,63.6722 241.887,64.6783C 241.887,65.6577 241.208,66.6616 239.85,67.6899C 238.492,68.7183 237.248,69.2324 236.117,69.2324C 233.856,69.2324 231.837,67.879 230.061,65.1725C 228.285,62.4658 226.943,56.6074 226.034,47.5972C 225.643,43.9735 225.264,41.4027 224.899,39.8846C 224.534,38.3667 223.96,37.6075 223.176,37.6075C 222.01,37.6075 220.623,38.7428 219.016,41.0132C 217.409,43.2836 214.816,47.8955 211.237,54.849C 208.441,60.2622 206.322,63.8702 204.88,65.6733C 203.438,67.4762 202.044,68.3776 200.7,68.3776C 199.498,68.3776 198.423,67.8881 197.475,66.9087C 196.526,65.9292 195.925,64.754 195.672,63.3828C 195.418,62.0117 195.153,58.6329 194.877,53.2465C 194.459,44.2896 193.693,39.0767 192.58,37.6075 Z M 310.118,39.317C 308.693,39.317 307.137,40.2631 305.45,42.1549C 303.763,44.0469 301.197,48.2871 297.751,54.8756C 293.086,63.7256 290.072,68.7627 288.71,69.9868C 287.348,71.2111 286.217,71.8232 285.317,71.8232C 282.005,71.8232 280.349,70.2384 280.349,67.0688C 280.349,65.7333 280.608,63.8413 281.124,61.3929C 282.887,52.9882 283.768,44.0848 283.768,34.6827C 283.768,33.5966 284.207,32.3881 285.084,31.057C 285.961,29.726 286.791,29.0604 287.575,29.0604C 288.981,29.0604 289.981,29.619 290.573,30.7363C 291.165,31.8536 291.461,33.7612 291.461,36.459C 291.461,39.2725 290.606,45.0597 288.897,53.8207C 288.327,56.7142 288.042,58.5527 288.042,59.3363C 288.042,59.7814 288.153,60.0039 288.376,60.0039C 288.794,60.0039 290.74,56.6786 294.212,50.0278C 297.64,43.2612 300.642,38.5023 303.22,35.7511C 305.797,33 308.635,31.6245 311.734,31.6245C 314.2,31.6245 316.208,32.7462 317.757,34.9899C 319.306,37.2335 320.437,41.3291 321.149,47.2767C 321.915,54.0431 322.607,58.2544 323.226,59.9105C 323.845,61.5665 324.822,62.3945 326.157,62.3945C 327.012,62.3945 328.085,62.0874 329.376,61.473L 329.87,61.5399L 330.217,61.5612C 330.021,60.3999 329.924,59.1552 329.924,57.827C 329.924,49.9742 332.586,42.5044 337.91,35.4174C 343.234,28.3302 349.053,24.7866 355.365,24.7866C 357.439,24.7866 359.131,25.4611 360.44,26.8099C 361.749,28.1588 362.403,29.7814 362.403,31.6779C 362.403,35.9159 360.349,39.9735 356.24,43.851C 352.131,47.7284 346.631,51.5367 339.74,55.2762C 338.324,56.024 337.616,56.9946 337.616,58.1876C 337.616,60.4937 338.268,62.3409 339.573,63.73C 340.877,65.1188 342.807,65.8134 345.362,65.8134C 351.203,65.8134 357.163,62.5592 363.245,56.0508C 364.161,55.1515 364.86,54.702 365.341,54.702C 366.232,54.702 366.677,55.392 366.677,56.772C 366.677,59.5409 364.188,62.8798 359.211,66.7882C 354.234,70.6968 349.101,72.6512 343.813,72.6512C 339.379,72.6512 335.956,71.3468 333.543,68.7382C 332.564,67.6796 331.783,66.4515 331.201,65.0541C 330.807,65.7671 330.143,66.5033 329.209,67.2626C 327.593,68.5757 325.65,69.2323 323.379,69.2323C 321.056,69.2323 319.257,68.2997 317.984,66.4344C 316.711,64.5692 315.7,59.59 314.952,51.4967C 314.187,43.377 312.575,39.317 310.118,39.317 Z M 338.284,50.1479C 349.805,43.1499 355.565,37.5229 355.565,33.2671C 355.565,31.6022 354.831,30.7697 353.362,30.7697C 350.86,30.7697 348.04,32.646 344.901,36.3989C 341.763,40.1517 339.557,44.7347 338.284,50.1479 Z M 399.771,56.3312C 394.571,60.8452 390.004,64.1239 386.068,66.1671C 382.133,68.2104 379.119,69.2321 377.027,69.2321C 374.231,69.2321 372.092,68.0658 370.61,65.733C 369.127,63.4004 368.386,60.6759 368.386,57.5599C 368.386,53.2061 369.285,47.8262 371.084,41.4203C 372.882,35.0143 374.22,31.2103 375.097,30.0083C 375.974,28.8065 377.374,28.2054 379.297,28.2054C 380.107,28.2054 380.771,28.6729 381.287,29.6078C 381.804,30.5426 382.062,31.6064 382.062,32.7997C 382.062,33.5118 381.723,34.4332 381.047,35.5641C 379.444,38.235 378.605,39.713 378.529,39.9979L 376.82,45.1263C 375.756,48.2603 375.224,51.2074 375.224,53.9673C 375.224,54.9288 375.456,56.4313 375.918,58.4746C 376.381,60.5181 377.343,61.5397 378.803,61.5397C 380.352,61.5397 382.26,61.0699 384.526,60.1307C 386.792,59.1914 389.342,57.6556 392.178,55.5233C 395.014,53.3907 396.924,51.6659 397.908,50.3481C 398.891,49.0304 399.588,47.5303 399.998,45.8475C 400.407,44.1647 400.697,40.5187 400.866,34.9097C 401.035,29.3007 402.393,26.496 404.939,26.496C 406.453,26.496 407.434,26.8966 407.884,27.6979C 408.333,28.4991 408.558,30.0216 408.558,32.2653C 408.558,34.1261 408.447,36.4454 408.224,39.2233L 407.703,46.7289C 407.312,54.457 406.315,62.2207 404.712,70.0201C 403.109,77.8195 400.777,84.339 397.714,89.5786C 394.651,94.8182 390.431,97.438 385.053,97.438C 379.587,97.438 374.73,95.9512 370.483,92.9774C 366.236,90.0038 364.113,87.484 364.113,85.4185C 364.113,84.4658 364.328,83.5243 364.76,82.5939C 365.192,81.6635 365.742,81.1982 366.41,81.1982C 366.748,81.1982 367.113,81.4698 367.505,82.0131C 371.12,87.7378 376.809,90.6002 384.573,90.6002C 388.579,90.6002 391.942,87.0455 394.662,79.9362C 397.382,72.8268 398.88,66.1605 399.156,59.937C 399.263,58.735 399.468,57.5332 399.771,56.3312 Z");
                    this.Home = new CM.Javascript.Assets.SVG("0 0 64 64", "M 39.3282,2.91052C 33.5162,2.91052 28.0521,5.17444 23.9428,9.28369C 17.3935,15.8304 15.7082,25.8304 19.7468,34.1598C 20.0175,34.7184 19.9055,35.3864 19.4669,35.8251L 3.66949,51.6211C 2.65354,52.6371 2.65354,54.2891 3.66949,55.3052L 8.69212,60.3278C 9.18544,60.8212 9.83877,61.0931 10.5336,61.0931C 11.2322,61.0931 11.8842,60.8212 12.3762,60.3278L 28.1736,44.5304C 28.6122,44.0931 29.2789,43.9799 29.8375,44.2505C 32.7722,45.6718 36.0575,46.4252 39.3375,46.4252L 39.3388,46.4252C 45.1469,46.4252 50.6068,44.1637 54.7134,40.0571C 63.1975,31.5731 63.1975,17.769 54.7134,9.28369C 50.6042,5.17444 45.1402,2.91052 39.3282,2.91052 Z M 10.5334,64C 9.06142,64 7.67731,63.4292 6.63336,62.3853L 1.61204,57.3639C -0.537373,55.2145 -0.537373,51.7145 1.61204,49.5653L 16.6934,34.4839C 12.6827,25.2345 14.7081,14.4027 21.884,7.22791C 26.544,2.56653 32.74,0 39.328,0C 45.9161,0 52.112,2.56653 56.7707,7.22791C 66.3894,16.8439 66.3894,32.496 56.7707,42.1133C 52.1146,46.7706 45.9227,49.3359 39.3386,49.3359L 39.3373,49.3359C 35.9693,49.3359 32.5961,48.6359 29.5173,47.3038L 14.4346,62.3853C 13.392,63.4292 12.0067,64 10.5334,64 Z M 39.2681,10.2856C 35.4081,10.2856 31.7828,11.7897 29.0534,14.5162C 26.3254,17.2456 24.8228,20.871 24.8228,24.731C 24.8228,28.5897 26.3254,32.2163 29.0534,34.9443C 31.7828,37.6724 35.4081,39.1763 39.2681,39.1763C 43.1269,39.1763 46.7548,37.6724 49.4815,34.9443C 52.2108,32.2163 53.7121,28.5897 53.7121,24.731C 53.7121,20.871 52.2108,17.2456 49.4815,14.5162C 46.7548,11.7897 43.1269,10.2856 39.2681,10.2856 Z M 39.2681,42.0856C 34.6322,42.0856 30.2748,40.2803 26.9975,37.0004C 23.7201,33.723 21.9122,29.3671 21.9122,24.731C 21.9122,20.0936 23.7201,15.7377 26.9975,12.4603C 30.2748,9.1803 34.6322,7.375 39.2681,7.375C 43.9042,7.375 48.2615,9.1803 51.5401,12.4603C 54.8174,15.7377 56.6228,20.0936 56.6228,24.731C 56.6228,29.3671 54.8174,33.723 51.5401,37.0004C 48.2615,40.2803 43.9042,42.0856 39.2681,42.0856 Z");
                    this.History = new CM.Javascript.Assets.SVG("0 0 64 62", "M 31.9234,50.6598C 33.7101,50.6598 35.4047,51.0345 36.6995,51.7145L 48.7568,58.0546C 49.2927,58.3358 49.6314,58.3784 49.7848,58.3784C 49.8954,58.3784 49.9622,58.3612 49.9915,58.3265C 50.0768,58.2264 50.2047,57.8385 50.0741,57.0958L 47.7727,43.6704C 47.2621,40.6837 48.5621,36.6932 50.7288,34.5839L 60.4807,25.0746C 61.1114,24.4611 61.1528,24.0746 61.1314,24.0038C 61.1088,23.9359 60.8474,23.6478 59.9754,23.5211L 46.4968,21.5625C 43.502,21.129 40.1061,18.6625 38.7673,15.9478L 32.7381,3.7345C 32.3875,3.02246 32.0328,2.78381 31.9234,2.78381C 31.8141,2.78381 31.4568,3.02246 31.1061,3.7345L 25.0794,15.9478C 23.7381,18.6625 20.3421,21.129 17.3474,21.5625L 3.86875,23.5211C 2.99945,23.6478 2.73545,23.9359 2.71543,24.0038C 2.69151,24.0746 2.73545,24.4611 3.36338,25.0746L 13.1181,34.5839C 15.2848,36.6945 16.5821,40.6865 16.0714,43.6704L 13.7701,57.0958C 13.642,57.8385 13.7674,58.2264 13.8528,58.3265C 13.8821,58.3612 13.9514,58.3784 14.0595,58.3784C 14.2154,58.3784 14.5514,58.3358 15.0901,58.0546L 27.1448,51.7145C 28.4394,51.0345 30.1368,50.6598 31.9234,50.6598 Z M 49.7848,61.1637C 49.0567,61.1637 48.2755,60.9478 47.4594,60.5199L 35.4021,54.1825C 34.5141,53.7145 33.246,53.4452 31.9234,53.4452C 30.6007,53.4452 29.3328,53.7145 28.4422,54.1825L 16.3847,60.5199C 14.5248,61.4985 12.7301,61.3145 11.7234,60.1239C 11.2301,59.5371 10.7101,58.4559 11.0221,56.6265L 13.3248,43.1984C 13.6782,41.1318 12.6754,38.0385 11.1754,36.5797L 1.42084,27.0692C -0.319236,25.3732 -0.175193,23.8812 0.0634137,23.1425C 0.306089,22.4052 1.06602,21.1144 3.46738,20.7651L 16.9501,18.8091C 19.0221,18.5078 21.6528,16.5931 22.5821,14.7145L 28.6114,2.49988C 29.6834,0.323853 31.1474,-0.00012207 31.9234,-0.00012207C 32.6995,-0.00012207 34.1607,0.323853 35.2354,2.49988L 41.2647,14.7145C 42.1915,16.5931 44.822,18.5078 46.8954,18.8065L 60.3767,20.7651C 62.7781,21.1158 63.5408,22.4064 63.7807,23.1425C 64.0195,23.8812 64.1635,25.3732 62.426,27.0692L 52.6741,36.5771C 51.1715,38.0385 50.1661,41.1318 50.5195,43.2012L 52.822,56.6265C 53.1368,58.4559 52.614,59.5371 52.1207,60.1211C 51.5567,60.7958 50.7262,61.1637 49.7848,61.1637 Z");
                    this.Regions = new CM.Javascript.Assets.SVG("0 0 64 64", "M 31.9973,3.23962C 16.14,3.23962 3.24001,16.141 3.24001,31.9984C 3.24001,47.8545 16.14,60.7572 31.9973,60.7572C 47.8547,60.7572 60.7573,47.8545 60.7573,31.9984C 60.7573,16.141 47.8547,3.23962 31.9973,3.23962 Z M 31.9973,63.9961C 14.3519,63.9961 4.14887e-008,49.6412 4.14887e-008,31.9987C 4.14887e-008,14.3535 14.3519,0 31.9973,0C 49.6426,0 63.9973,14.3535 63.9973,31.9987C 63.9973,49.6412 49.6426,63.9961 31.9973,63.9961 Z M 44.1098,10.4609C 39.5078,9.3407 33.4822,13.5981 29.7469,11.0806C 30.0694,11.5436 30.2409,11.9935 30.1462,12.375C 29.6147,14.5145 27.4522,16.4365 24.9942,17.4712L 25.4258,18.0834C 26.1476,17.1617 27.038,16.2866 27.7343,16.1865C 31.0202,15.7142 36.7096,18.5752 35.9552,21.808C 35.7954,22.4926 35.4833,23.1283 35.0606,23.7079C 36.498,24.9113 37.7134,26.9122 39.0877,28.1324C 38.3722,25.0111 43.3283,19.5391 45.9375,21.3959C 46.8343,22.0341 47.4627,23.0343 47.9239,24.0337C 48.3765,25.0143 48.4981,26.1152 48.6854,27.1831C 48.9966,26.4614 49.4068,25.7852 49.7954,25.3304C 50.4785,24.5311 51.7289,24.3877 52.7767,24.2997C 53.4698,24.2413 54.163,24.3322 54.8522,24.4662L 53.7431,21.442L 56.5726,20.5717C 57.0222,21.6676 57.6471,22.7072 57.9214,23.8597C 58.1459,24.8031 58.4671,25.8921 58.0468,26.766C 57.1952,28.5367 54.1255,27.1831 52.1619,27.109C 52.0046,29.3353 51.2173,31.9736 49.3402,33.181C 46.4512,31.3174 46.1413,27.0942 44.5846,24.0289C 42.0058,24.6523 42.8247,29.7422 40.3881,30.792C 39.3499,31.2393 38.0543,30.6748 37.0608,30.1354C 35.9131,29.5123 35.1349,28.3696 34.2164,27.4414L 34.0327,27.245C 34.3906,28.5814 34.6891,30.2565 35.4942,30.986C 35.5973,31.0795 35.7376,30.8302 35.8762,30.8177C 36.2309,30.7855 36.5943,30.7871 36.9441,30.8545C 37.4571,30.9535 38.0007,31.0347 38.4432,31.3125C 38.8565,31.5721 39.3114,31.9302 39.4162,32.4069C 39.7852,34.0868 36.2306,34.5215 35.9353,36.2158C 34.749,43.0225 32.5823,53.7437 25.6906,54.2347C 20.8976,54.5762 24.126,44.745 23.0197,40.069C 21.977,35.6616 13.6035,33.2964 15.1066,29.024C 15.7319,27.2469 16.4658,25.3955 17.7769,24.0426C 19.0436,22.7355 20.7345,21.6381 22.5333,21.3607C 24.102,21.1188 25.3418,23.1451 26.0589,24.5612C 27.4678,24.3795 29.001,24.6227 30.2855,24.0161C 30.5366,23.8976 30.7565,23.7362 30.9578,23.5487L 31.3838,23.0908L 32.4079,21.8126C 32.0452,21.486 31.6355,21.0956 31.351,20.9414C 30.1677,20.3004 28.5846,20.1671 27.754,19.1084C 26.9802,18.1221 26.8099,22.1273 25.5566,22.1608C 24.0679,22.2006 23.4394,20.0226 22.6832,18.7396C 21.56,19.5527 20.252,20.2809 18.8708,20.4043C 18.3634,20.4496 17.8904,19.9399 17.6426,19.4948C 17.3728,19.0103 17.217,18.3486 17.4445,17.8428C 19.0624,14.2461 24.3655,13.953 27.3569,11.3828C 25.9458,11.6063 23.4125,10.2225 23.8824,8.87341C 24.0391,8.42334 24.3201,7.94141 24.751,7.73792C 26.2263,7.04138 27.8185,6.58582 29.4172,6.26013C 30.4637,6.04688 31.5857,7.77454 31.3494,8.81604C 31.2325,9.33118 32.4065,8.7843 32.9339,8.81213C 33.3026,8.83154 33.6791,8.90369 34.0414,8.83264C 35.3497,8.57629 36.6279,8.18445 37.9149,7.8363C 39.2074,7.48669 40.442,6.66956 41.7791,6.73926C 43.3016,6.81848 44.6543,7.75439 46.0919,8.26208L 44.1098,10.4609 Z M 28.5757,27.3986C 27.5302,27.5787 26.3971,27.7892 25.3933,27.4459C 24.4811,27.1342 23.8866,26.2373 23.2001,25.5605C 21.8962,24.2753 19.3013,26.7041 18.4554,28.3278C 16.7782,31.547 22.9027,34.0684 25.0159,37.0199C 27.6542,40.7047 26.0294,45.917 25.7709,50.5781C 26.1227,50.3395 26.5719,50.243 26.8829,49.9531C 28.0758,48.8409 29.4001,47.7939 30.2462,46.3998C 32.5283,42.6388 31.8822,37.205 34.6247,33.8799C 33.5836,33.2308 32.4824,32.2715 31.9555,31.5885C 31.1326,30.5221 30.5171,28.6694 30.368,26.931C 29.7653,27.1406 29.1595,27.298 28.5757,27.3986 Z M 28.7699,9.76135L 28.5568,9.80627L 28.8883,10.1085L 28.7699,9.76135 Z M 41.8826,41.936C 42.0979,42.9752 41.6995,43.9594 41.1667,44.9366L 41.2238,44.9081L 41.2247,44.9098C 41.9279,46.5948 41.4332,49.1622 39.9587,50.2391C 39.2462,50.672 38.0737,50.642 37.4628,50.0746C 36.7421,49.4052 36.5696,48.1722 36.7628,47.2076C 37.2628,45.5929 39.3551,44.3184 39.0105,42.6539L 41.8826,41.936 Z");
                    this.Voting = new CM.Javascript.Assets.SVG("0 0 64 62", "M 11.2539,14.0464L 5.95245,30.4972L 16.5554,30.4972L 11.2539,14.0464 Z M 2.97917,30.4312L 9.89783,8.96436C 10.0363,8.53552 10.3625,8.20789 10.7678,8.06055C 10.9804,7.93457 11.2288,7.8623 11.4943,7.8623L 52.359,7.8623L 52.7483,7.80823C 53.0869,7.80823 53.404,7.92773 53.6529,8.13232C 53.9945,8.37976 54.2223,8.77454 54.2423,9.22327L 61.0229,30.2643L 61.0428,30.3309L 62.5741,30.3309C 63.3634,30.3309 63.9994,30.9696 63.9994,31.756C 63.9994,37.9614 58.9528,43.0109 52.7475,43.0109C 46.5435,43.0109 41.4941,37.9614 41.4941,31.756C 41.4941,30.9696 42.1328,30.3309 42.9221,30.3309L 44.4525,30.3309L 44.4722,30.2643L 50.7724,10.7144L 33.9176,10.7144L 33.9176,53.3857L 42.2343,53.3857C 43.021,53.3857 43.6624,54.0272 43.6624,54.8138C 43.6624,55.5991 43.021,56.2378 42.2343,56.2378L 22.5797,56.2378C 21.793,56.2378 21.1544,55.5991 21.1544,54.8138C 21.1544,54.0272 21.793,53.3857 22.5797,53.3857L 31.0669,53.3857L 31.0669,10.7144L 13.1741,10.7144L 19.5312,30.4312L 19.5507,30.4979L 21.0826,30.4979C 21.8693,30.4979 22.5079,31.1366 22.5079,31.9258C 22.5079,38.1284 17.4586,43.1779 11.2533,43.1779C 5.04928,43.1779 7.82893e-008,38.1284 7.82893e-008,31.9258C 7.82893e-008,31.1366 0.641317,30.4979 1.42798,30.4979L 2.95937,30.4979L 2.97917,30.4312 Z M 52.7483,13.8802L 47.4461,30.3309L 58.0505,30.3309L 52.7483,13.8802 Z M 49.793,62.6207L 16.365,62.6207C 15.5783,62.6207 14.9397,61.9847 14.9397,61.1968C 14.9397,60.4102 15.5783,59.7687 16.365,59.7687L 49.793,59.7687C 50.5824,59.7687 51.221,60.4102 51.221,61.1968C 51.221,61.9847 50.5824,62.6207 49.793,62.6207 Z M 2.97461,33.3497C 3.65198,37.3058 7.10795,40.3257 11.2533,40.3257C 15.3999,40.3257 18.8573,37.3058 19.5346,33.3497L 2.97461,33.3497 Z M 44.4688,33.1827C 45.1462,37.1362 48.6021,40.1561 52.7475,40.1561C 56.8941,40.1561 60.3501,37.1362 61.0288,33.1827L 44.4688,33.1827 Z M 35.2285,2.7373C 35.2285,4.24524 34.0046,5.47205 32.4925,5.47205C 30.9806,5.47205 29.7565,4.24524 29.7565,2.7373C 29.7565,1.224 30.9806,0 32.4925,0C 34.0046,0 35.2285,1.224 35.2285,2.7373 Z");
                    this.Support = new CM.Javascript.Assets.SVG("0 0 64 64", "M 31.9973,3.23975C 16.14,3.23975 3.24,16.1411 3.24,31.9985C 3.24,47.8544 16.14,60.757 31.9973,60.757C 47.8547,60.757 60.7573,47.8544 60.7573,31.9985C 60.7573,16.1411 47.8547,3.23975 31.9973,3.23975 Z M 31.9973,63.9957C 14.352,63.9957 1.2099e-007,49.6412 1.2099e-007,31.9987C 1.2099e-007,14.3531 14.352,0 31.9973,0C 49.6426,0 63.9973,14.3531 63.9973,31.9987C 63.9973,49.6412 49.6426,63.9957 31.9973,63.9957 Z M 28.1745,49.4574C 28.1745,47.3453 29.5985,45.8627 31.5985,45.8627C 33.5932,45.8627 34.9665,47.3453 34.9665,49.4574C 34.9665,51.4535 33.6505,52.9918 31.5412,52.9918C 29.5439,52.9918 28.1745,51.4535 28.1745,49.4574 Z M 29.4292,41.4681L 29.3172,39.9854C 28.9745,36.9039 29.9998,33.5375 32.8546,30.1146C 35.4198,27.0892 36.8465,24.8652 36.8465,22.2988C 36.8465,19.3881 35.0212,17.4492 31.4265,17.392C 29.3718,17.392 27.0919,18.0758 25.6639,19.1586L 24.2945,15.5668C 26.1772,14.1973 29.4292,13.2855 32.4532,13.2855C 39.0159,13.2855 41.9812,17.3334 41.9812,21.6705C 41.9812,25.5521 39.8132,28.3467 37.0758,31.5961C 34.5652,34.5654 33.6505,37.0758 33.8225,39.9854L 33.8799,41.4681L 29.4292,41.4681 Z");
                    this.Wait = new CM.Javascript.Assets.SVG("0 0 64 64", "M 35.5487,3.24988L 52.4069,3.24988L 52.4071,4.55383C 52.4071,6.1012 51.141,7.36755 49.5935,7.36755L 46.7798,7.36755L 46.7798,12.9946L 46.7798,15.8085C 46.7798,22.7355 42.6044,28.6808 36.6366,31.2833C 42.6044,33.8859 46.7798,39.8311 46.7798,46.7587L 46.7798,49.5723L 46.7798,58.0128L 49.5935,58.0128C 51.141,58.0128 52.4071,59.2792 52.4071,60.8268L 51.9102,62.3813L 41.3424,62.3813L 34.4094,62.3813L 11.6884,62.3813L 11.1914,60.8268C 11.1914,59.2792 12.4575,58.0128 14.0051,58.0128L 16.8186,58.0128L 16.8186,49.5723L 16.8186,46.7587C 16.8186,39.8311 20.9941,33.8859 26.9619,31.2833C 20.9941,28.6808 16.8186,22.7355 16.8186,15.8085L 16.8186,12.9946L 16.8186,7.36755L 14.0051,7.36755C 12.4575,7.36755 11.1914,6.1012 11.1914,4.55383L 11.1915,3.24988L 28.0499,3.24988L 35.5487,3.24988 Z M 42.0854,58.0555L 43.238,58.0607L 43.238,49.6198L 43.238,46.8062C 43.238,42.3322 40.9101,38.2308 36.7993,36.4385C 34.7481,35.5438 33.4229,33.5179 33.4229,31.2813C 33.4229,29.0444 34.7481,27.0186 36.7993,26.1237C 40.9101,24.3315 43.238,20.3297 43.238,15.856L 43.238,13.0424L 43.238,7.41516L 31.799,7.37354L 20.3602,7.41516L 20.3602,13.0424L 20.3602,15.856C 20.3602,20.3297 22.6881,24.3315 26.7988,26.1237C 28.85,27.0186 30.1753,29.0444 30.1753,31.2813C 30.1753,33.5179 28.85,35.5438 26.7988,36.4385C 22.6881,38.2308 20.3602,42.3322 20.3602,46.8062L 20.3602,49.6198L 20.3602,58.0607L 33.6563,58.0184L 36.2383,58.0298L 42.0854,58.0555 Z M 31.6151,26.687C 30.9247,25.7568 30.0014,25.0145 28.9082,24.5392C 26.4277,23.4552 24.8254,21.0128 24.8254,18.3154L 38.4048,18.3154C 38.4048,21.0128 36.8024,23.4552 34.3196,24.5415C 33.2287,25.0166 32.3053,25.7568 31.6151,26.687 Z M 24.826,51.6984C 24.826,48.9984 26.4284,46.5563 28.9112,45.4723C 30.0021,44.9967 30.9255,44.257 31.6158,43.3268C 32.3061,44.257 33.2295,44.999 34.3226,45.4745C 36.8032,46.5563 38.4055,48.9984 38.4055,51.6984L 24.826,51.6984 Z");
                    this.Computer = new CM.Javascript.Assets.SVG("0 0 64 58", "M 2.31214,43.8888L 61.6855,43.8888L 61.6855,2.31287L 2.31214,2.31287L 2.31214,43.8888 Z M 62.8414,46.204L 35.7112,46.204L 35.7112,54.4213C 35.7112,54.5328 35.6952,54.6411 35.6655,54.7433L 46.753,54.7433C 47.3916,54.7433 47.9089,55.2593 47.9089,55.8994C 47.9089,56.5381 47.3916,57.0566 46.753,57.0566L 17.245,57.0566C 16.6063,57.0566 16.0876,56.5381 16.0876,55.8994C 16.0876,55.2593 16.6063,54.7433 17.245,54.7433L 28.3313,54.7433L 28.2858,54.4214L 28.2858,46.204L 1.15601,46.204C 0.516037,46.204 5.50858e-006,45.684 5.50858e-006,45.0468L 5.50858e-006,1.15735C 5.50858e-006,0.517212 0.516037,0 1.15601,0L 62.8414,0C 63.4814,0 63.9987,0.517212 63.9987,1.15735L 63.9987,45.0468C 63.9987,45.684 63.4814,46.204 62.8414,46.204 Z M 30.5991,46.204L 30.5991,54.4214L 30.5535,54.7433L 33.4434,54.7433C 33.4137,54.6411 33.3978,54.5328 33.3978,54.4213L 33.3978,46.204L 30.5991,46.204 Z");
                    this.Search = new CM.Javascript.Assets.SVG("0 0 64 64", "M 39.3282,2.91052C 33.5162,2.91052 28.0521,5.17444 23.9428,9.28369C 17.3935,15.8304 15.7082,25.8304 19.7468,34.1598C 20.0175,34.7184 19.9055,35.3864 19.4669,35.8251L 3.66949,51.6211C 2.65354,52.6371 2.65354,54.2891 3.66949,55.3052L 8.69212,60.3278C 9.18544,60.8212 9.83877,61.0931 10.5336,61.0931C 11.2322,61.0931 11.8842,60.8212 12.3762,60.3278L 28.1736,44.5304C 28.6122,44.0931 29.2789,43.9799 29.8375,44.2505C 32.7722,45.6718 36.0575,46.4252 39.3375,46.4252L 39.3388,46.4252C 45.1469,46.4252 50.6068,44.1637 54.7134,40.0571C 63.1975,31.5731 63.1975,17.769 54.7134,9.28369C 50.6042,5.17444 45.1402,2.91052 39.3282,2.91052 Z M 10.5334,64C 9.06142,64 7.67731,63.4292 6.63336,62.3853L 1.61204,57.3639C -0.537373,55.2145 -0.537373,51.7145 1.61204,49.5653L 16.6934,34.4839C 12.6827,25.2345 14.7081,14.4027 21.884,7.22791C 26.544,2.56653 32.74,0 39.328,0C 45.9161,0 52.112,2.56653 56.7707,7.22791C 66.3894,16.8439 66.3894,32.496 56.7707,42.1133C 52.1146,46.7706 45.9227,49.3359 39.3386,49.3359L 39.3373,49.3359C 35.9693,49.3359 32.5961,48.6359 29.5173,47.3038L 14.4346,62.3853C 13.392,63.4292 12.0067,64 10.5334,64 Z M 39.2681,10.2856C 35.4081,10.2856 31.7828,11.7897 29.0534,14.5162C 26.3254,17.2456 24.8228,20.871 24.8228,24.731C 24.8228,28.5897 26.3254,32.2163 29.0534,34.9443C 31.7828,37.6724 35.4081,39.1763 39.2681,39.1763C 43.1269,39.1763 46.7548,37.6724 49.4815,34.9443C 52.2108,32.2163 53.7121,28.5897 53.7121,24.731C 53.7121,20.871 52.2108,17.2456 49.4815,14.5162C 46.7548,11.7897 43.1269,10.2856 39.2681,10.2856 Z M 39.2681,42.0856C 34.6322,42.0856 30.2748,40.2803 26.9975,37.0004C 23.7201,33.723 21.9122,29.3671 21.9122,24.731C 21.9122,20.0936 23.7201,15.7377 26.9975,12.4603C 30.2748,9.1803 34.6322,7.375 39.2681,7.375C 43.9042,7.375 48.2615,9.1803 51.5401,12.4603C 54.8174,15.7377 56.6228,20.0936 56.6228,24.731C 56.6228,29.3671 54.8174,33.723 51.5401,37.0004C 48.2615,40.2803 43.9042,42.0856 39.2681,42.0856 Z");
                    this.Peers = new CM.Javascript.Assets.SVG("0 0 59 52", "M 2.31232,40.7299L 43.6857,40.7299L 43.6855,11.1538L 2.31216,11.1538L 2.31232,40.7299 Z M 44.8415,43.045L 26.7114,43.045L 26.7114,49.2623L 26.6657,49.5845L 37.7532,49.5845C 38.3918,49.5845 38.9091,50.1005 38.9091,50.7406C 38.9091,51.3793 38.3918,51.8978 37.7532,51.8978L 8.24516,51.8978C 7.60649,51.8978 7.08782,51.3793 7.08782,50.7406C 7.08782,50.1005 7.60649,49.5845 8.24516,49.5845L 19.3315,49.5845L 19.286,49.2626L 19.286,43.045L 1.15618,43.045C 0.516202,43.045 0.000170243,42.525 0.000170243,41.8878L 7.48225e-006,9.99854C 7.48225e-006,9.3584 0.516039,8.84119 1.15601,8.84119L 17.1032,8.84119L 17.1032,1.15735C 17.1032,0.517212 17.6193,0 18.2592,0L 56.9445,0C 57.5846,0 58.1019,0.517212 58.1019,1.15735L 58.1019,27.0468C 58.1019,27.684 57.5846,28.204 56.9445,28.204L 46.8144,28.204L 46.8144,33.4213L 46.7687,33.7433L 55.8561,33.7433C 56.4948,33.7433 57.0121,34.2593 57.0121,34.8994C 57.0121,35.5381 56.4948,36.0566 55.8561,36.0566L 45.9988,36.0566L 45.9989,41.8878C 45.9989,42.525 45.4815,43.045 44.8415,43.045 Z M 44.8414,8.84119C 45.4814,8.84119 45.9987,9.3584 45.9987,9.99854L 45.9988,25.8887L 55.7887,25.8887L 55.7887,2.31262L 19.4154,2.31262L 19.4154,8.84119L 44.8414,8.84119 Z M 21.5993,43.045L 21.5993,49.2626L 21.5537,49.5845L 24.4436,49.5845L 24.398,49.2623L 24.398,43.045L 21.5993,43.045 Z");
                    this.Warning = new CM.Javascript.Assets.SVG("0 0 55 50", "M 21.3881,49.0493L 49.4133,49.0493C 51.216,49.0493 52.836,48.1173 53.744,46.5573C 54.648,45.0013 54.6588,43.14 53.7733,41.5786L 31.5733,2.5293C 30.6747,0.945313 29.0468,0 27.216,0C 25.3853,0 23.7548,0.946655 22.856,2.5293L 0.655994,41.58C -0.22926,43.1387 -0.21868,45 0.688058,46.5573C 1.59333,48.1173 3.21345,49.0493 5.01602,49.0493L 8.07071,49.0493L 21.3881,49.0493 Z M 25.0461,28.8004L 24.4142,18.7153L 24.2345,14.4777C 24.2345,13.3114 24.5206,12.4022 25.0927,11.7504C 25.6648,11.0983 26.4188,10.7723 27.3545,10.7723C 28.4855,10.7723 29.2416,11.1903 29.623,12.0264C 30.0044,12.8623 30.1951,14.0653 30.1951,15.6353C 30.1951,16.5621 30.1485,17.5045 30.0554,18.4625L 29.2106,28.847C 29.1174,30.08 28.919,31.0269 28.6152,31.6876C 28.3114,32.3485 27.8113,32.6788 27.1151,32.6788C 26.4055,32.6788 25.9121,32.3595 25.6349,31.7208C 25.3577,31.0822 25.1614,30.1088 25.0461,28.8004 Z M 27.2348,42.2783C 26.4321,42.2783 25.7313,42.0155 25.1326,41.4899C 24.5339,40.9645 24.2345,40.2316 24.2345,39.2914C 24.2345,38.4664 24.5206,37.7646 25.0927,37.1859C 25.6648,36.6071 26.3655,36.3177 27.1949,36.3177C 28.0242,36.3177 28.7316,36.6071 29.317,37.1859C 29.9024,37.7646 30.1951,38.4664 30.1951,39.2914C 30.1951,40.2183 29.8991,40.9478 29.307,41.48C 28.715,42.0122 28.0242,42.2783 27.2348,42.2783 Z");
                    this.Hamburger = new CM.Javascript.Assets.SVG("0 0 16 12", "M 16,12.1036L 2.1855e-007,12.1036L 2.1855e-007,10.1324L 16,10.1324L 16,12.1036 Z M 16,7.03772L 2.1855e-007,7.03772L 2.1855e-007,5.06653L 16,5.06653L 16,7.03772 Z M 16,1.97131L 2.1855e-007,1.97131L 2.1855e-007,0.00012207L 16,0.00012207L 16,1.97131 Z");
                    this.QRCode = new CM.Javascript.Assets.SVG("0 0 32 32", "M 17.3334,14.6666L 9.33338,14.6666L 9.33338,17.3333L 17.3334,17.3333L 17.3334,19.9999L 20,19.9999L 22.6667,19.9999L 22.6667,14.6666L 20,14.6666M 29.3334,29.3333L 25.3334,29.3333L 25.3334,31.9999L 32,31.9999L 32,29.3333L 32,26.6666L 29.3334,26.6666M 6.66671,14.6666L 4.00005,14.6666L 4.00005,17.3333L 6.66671,17.3333M 2.66671,14.6666L 4.60943e-005,14.6666L 4.60943e-005,17.3333L 2.66671,17.3333M 17.3334,1.33331L 14.6667,1.33331L 14.6667,6.66663L 17.3334,6.66663M 17.3334,9.33331L 14.6667,9.33331L 14.6667,11.9999L 17.3334,11.9999M 28,14.6666L 25.3334,14.6666L 25.3334,17.3333L 28,17.3333M 29.3334,21.3333L 32,21.3333L 32,14.6666L 29.3334,14.6666M 22.6667,29.3333L 25.3334,29.3333L 25.3334,26.6666L 22.6667,26.6666M 16,31.9999L 22.6667,31.9999L 22.6667,29.3333L 16,29.3333M 29.3334,25.3333L 32,25.3333L 32,22.6666L 29.3334,22.6666M 24,21.3333L 21.3334,21.3333L 16,21.3333L 16,26.6666L 21.3334,26.6666L 21.3334,23.9999L 26.6667,23.9999L 26.6667,21.3333L 26.6667,18.6666L 24,18.6666M 1.33338,30.6666L 12,30.6666L 12,19.9999L 1.33338,19.9999M 4.60943e-005,18.6666L 13.3334,18.6666L 13.3334,31.9999L 4.60943e-005,31.9999M 2.66671,29.3333L 10.6667,29.3333L 10.6667,21.3333L 2.66671,21.3333M 30.6667,1.33331L 20,1.33331L 20,11.9999L 30.6667,11.9999M 32,13.3333L 18.6667,13.3333L 18.6667,-6.10352e-005L 32,-6.10352e-005M 29.3334,2.66663L 21.3334,2.66663L 21.3334,10.6666L 29.3334,10.6666M 12,1.33331L 1.33338,1.33331L 1.33338,11.9999L 12,11.9999M 13.3334,13.3333L 4.60943e-005,13.3333L 4.60943e-005,-6.10352e-005L 13.3334,-6.10352e-005M 10.6667,10.6666L 2.66671,10.6666L 2.66671,2.66663L 10.6667,2.66663L 10.6667,10.6666 Z");
                    this.Speech = new CM.Javascript.Assets.SVG("0 0 36 34", "M -4.43452e-005,0L 36,0L 36,24.75L 12.8475,24.75L 4.4999,33.0975L 4.4999,24.75L -4.43452e-005,24.75L -4.43452e-005,0 Z");
                    this.Person = new CM.Javascript.Assets.SVG("0 0 28 33", "M 27.208,12.9186L 21.8227,10.7399C 21.4827,10.6027 20.944,10.3427 20.6253,10.1613L 16.1107,7.59607C 15.9133,7.44531 15.192,7.04138 14.504,7.04138L 13.1707,7.04138C 12.5467,7.04138 11.7627,7.44531 11.5653,7.59607L 7.04934,10.1613C 6.73066,10.3427 6.192,10.6027 5.852,10.7399L 0.468005,12.9186C 0.127999,13.056 -0.0826744,13.4613 7.85814e-006,13.8173L 0.0239947,13.9174C 0.106677,14.2745 0.466662,14.4987 0.824003,14.4132L 6.52267,13.0693C 6.87867,12.9854 7.44666,12.7959 7.78266,12.6493L 10.504,11.4625L 10.504,17.0414L 8.50399,24.3746L 6.67467,31.0812L 4.62934,31.4692C 4.27068,31.548 4.05333,31.84 4.05333,32.2745C 4.05333,32.708 4.43199,32.972 4.79867,32.9786L 8.752,32.9625C 9.11866,32.9692 9.424,32.6747 9.43067,32.308L 9.42268,31.08L 11.8373,25.0414L 13.8373,20.708L 15.8373,25.0414L 18.2533,31.08L 18.244,32.308C 18.2507,32.6747 18.5573,32.9692 18.924,32.9625L 22.8773,32.9786C 23.244,32.972 23.6227,32.6387 23.6227,32.2745C 23.6227,31.9093 23.404,31.548 23.0467,31.4692L 21,31.0812L 19.1707,24.3746L 17.1707,17.0414L 17.1707,11.4625L 19.8933,12.6493C 20.2293,12.7959 20.796,12.9854 21.1533,13.0693L 26.852,14.4132C 27.2093,14.4987 27.5693,14.2745 27.652,13.9174L 27.6747,13.8173C 27.7587,13.4613 27.548,13.056 27.208,12.9186 Z M 10.796,3.04138C 10.796,1.36133 12.1573,0 13.8373,0C 15.5173,0 16.88,1.36133 16.88,3.04138C 16.88,4.72131 15.5173,6.08264 13.8373,6.08264C 12.1573,6.08264 10.796,4.72131 10.796,3.04138 Z");
                    this.CircleUnknown = new CM.Javascript.Assets.SVG("-1 -1 34 34", "M 20.1334,16.1094C 18.844,16.9507 18.4587,17.676 18.416,19.3413C 18.412,19.5239 18.264,19.6667 18.0827,19.6667L 14.6667,19.6667C 14.576,19.6667 14.3334,19.4241 14.3334,19.3335L 14.3334,17.9734C 14.3334,16.5481 15.1027,15.2947 16.688,14.1375C 16.812,14.052 17.9987,13.2761 17.9987,12.2056C 17.9987,11.3174 17.3307,10.6973 16.3747,10.6973C 15.0107,10.6973 14.2507,11.3813 14.1773,12.6868C 14.1667,12.8613 14.0213,13 13.844,13L 13.6667,13L 10.2534,13C 10.1627,13 10.0733,12.9629 10.0107,12.896C 9.94802,12.8308 9.91469,12.7415 9.92002,12.6494C 10.1067,9.02808 12.4587,6.95215 16.3787,6.95215C 19.3493,6.95215 22.5493,8.56396 22.5493,12.104C 22.5493,14.4761 22.008,14.9241 20.1334,16.1094 Z M 16.3334,0C 7.31333,0 2.06828e-005,7.31201 2.06828e-005,16.3335C 2.06828e-005,25.3547 7.31333,32.6667 16.3334,32.6667C 25.3547,32.6667 32.6667,25.3547 32.6667,16.3335C 32.6667,7.31201 25.3547,0 16.3334,0 Z M 19.0627,26.3335C 19.0627,26.7002 18.764,27 18.396,27L 14.3334,27C 13.9667,27 13.6667,26.7002 13.6667,26.3335L 13.6667,22.3335C 13.6667,21.9668 13.9667,21.6667 14.3334,21.6667L 18.396,21.6667C 18.764,21.6667 19.0627,21.9668 19.0627,22.3335L 19.0627,26.3335 Z");
                    this.CircleError = new CM.Javascript.Assets.SVG("-1 -1 34 34", "M 21.0477,23.8755C 20.789,24.1355 20.3637,24.1355 20.105,23.8755L 16.3343,20.105L 12.5637,23.8755C 12.3037,24.1355 11.8797,24.1355 11.621,23.8755L 8.793,21.0474C 8.53166,20.79 8.53166,20.3647 8.793,20.105L 12.5637,16.3342L 8.793,12.5635C 8.53166,12.3022 8.53166,11.8782 8.793,11.6208L 11.621,8.7915C 11.8797,8.53149 12.3023,8.53149 12.5637,8.7915L 16.3343,12.5635L 20.105,8.7915C 20.365,8.53149 20.789,8.53149 21.0477,8.7915L 23.8757,11.6208C 24.1357,11.8782 24.1357,12.3022 23.8757,12.5635L 20.105,16.3342L 23.8757,20.105C 24.1357,20.3647 24.1357,20.79 23.8757,21.0474M 27.8837,4.78467C 21.505,-1.59521 11.1637,-1.59521 4.785,4.78467C -1.59498,11.1636 -1.59498,21.5049 4.785,27.8835C 11.1637,34.2622 21.505,34.2622 27.8837,27.8835C 34.261,21.5049 34.2623,11.1636 27.8837,4.78467 Z");
                    this.CircleTick = new CM.Javascript.Assets.SVG("-1 -1 34 34", "M 25.748,12.3171L 14.3987,23.665C 14.2293,23.8359 13.9493,23.8359 13.7787,23.665L 6.89333,16.7783C 6.724,16.6091 6.724,16.3306 6.89333,16.1584L 9.73867,13.3145C 9.90935,13.1438 10.188,13.1438 10.3573,13.3145L 13.7813,16.7371C 13.9507,16.9065 14.2293,16.9065 14.4,16.7371L 22.2613,8.87842C 22.4307,8.70776 22.7107,8.70654 22.884,8.87573L 25.7453,11.6997C 25.9173,11.8691 25.9173,12.1465 25.748,12.3171 Z M 27.884,4.78516C 21.504,-1.59497 11.164,-1.59497 4.784,4.78516C -1.59466,11.1638 -1.59466,21.5051 4.784,27.8838C 11.164,34.2625 21.504,34.2625 27.884,27.8838C 34.2613,21.5051 34.2627,11.1638 27.884,4.78516 Z");
                    this.CircleRemove = new CM.Javascript.Assets.SVG("-1 -1 34 34", "M 24.3333,18.333C 24.3333,18.7012 24.0347,18.9998 23.6667,18.9998L 9,18.9998C 8.632,18.9998 8.33334,18.7012 8.33334,18.333L 8.33334,14.333C 8.33334,13.9651 8.632,13.6665 9,13.6665L 23.6667,13.6665C 24.0347,13.6665 24.3333,13.9651 24.3333,14.333M 16.3333,0C 7.31334,0 3.21865e-006,7.31177 3.21865e-006,16.333C 3.21865e-006,25.3545 7.31334,32.6665 16.3333,32.6665C 25.3533,32.6665 32.6667,25.3545 32.6667,16.333C 32.6667,7.31177 25.3533,0 16.3333,0 Z");
                    this.CircleAdd = new CM.Javascript.Assets.SVG("-1 -1 34 34", "M 25.7813,18.3586C 25.7813,18.7295 25.4773,19.0334 25.1067,19.0334L 19.032,19.0334L 19.032,25.1907C 19.032,25.5627 18.7306,25.8667 18.3586,25.8667L 14.308,25.8667C 13.9373,25.8667 13.6333,25.5627 13.6333,25.1907L 13.6333,19.0334L 7.56132,19.0334C 7.18932,19.0334 6.88532,18.7295 6.88532,18.3586L 6.88532,14.3093C 6.88532,13.9387 7.18932,13.6348 7.56132,13.6348L 13.6333,13.6348L 13.6333,7.56152C 13.6333,7.18945 13.9373,6.88672 14.308,6.88672L 18.3586,6.88672C 18.7306,6.88672 19.032,7.18945 19.032,7.56152L 19.032,13.6348L 25.1067,13.6348C 25.4773,13.6348 25.7813,13.9387 25.7813,14.3093M 16.3333,0C 7.31332,0 -1.4921e-005,7.31201 -1.4921e-005,16.3335C -1.4921e-005,25.356 7.31332,32.6667 16.3333,32.6667C 25.3533,32.6667 32.6666,25.356 32.6666,16.3335C 32.6666,7.31201 25.3533,0 16.3333,0 Z");
                    this.CircleRight = new CM.Javascript.Assets.SVG("-1 -1 34 34", "M 8.33334,14.3331C 8.33334,13.9664 8.63335,13.6665 9.00001,13.6665L 16.3333,13.6665L 16.3333,8.95715C 16.3333,8.58923 16.564,8.48108 16.8453,8.71716L 25.376,15.8224C 25.6574,16.0571 25.6574,16.4425 25.376,16.6772L 16.8453,23.7826C 16.564,24.0186 16.3333,23.9105 16.3333,23.5425L 16.3333,18.9999L 9.00001,18.9999C 8.63335,18.9999 8.33334,18.6998 8.33334,18.3331M 9.23872e-006,16.2491C 9.23872e-006,25.2251 7.27601,32.4999 16.2494,32.4999C 25.224,32.4999 32.5,25.2251 32.5,16.2491C 32.5,7.27454 25.224,-0.00012207 16.2494,-0.00012207C 7.27601,-0.00012207 9.23872e-006,7.27454 9.23872e-006,16.2491 Z");
                    this.ArrowUp = new CM.Javascript.Assets.SVG("0 0 30 20", "M 27.98,13.9921L 23.0787,18.8934L 13.9907,9.80408L 4.89603,18.8867L 3.07157e-005,13.9907L 13.9907,0L 27.98,13.9921 Z");
                    this.ArrowDown = new CM.Javascript.Assets.SVG("0 0 30 20", "M 27.98,4.90173L 23.0787,0.000366211L 13.9907,9.08972L 4.89603,0.00695801L 3.09138e-005,4.90295L 13.9907,18.8937L 27.98,4.90173 Z");
                    this.Tag = new CM.Javascript.Assets.SVG("0 0 32 32", "M 8.55212,8.55212C 7.51078,9.59338 5.82279,9.59338 4.78145,8.55212C 3.74015,7.51074 3.74015,5.82288 4.78145,4.78162C 5.82279,3.74023 7.51078,3.74023 8.55212,4.78162C 9.59346,5.82288 9.59346,7.51074 8.55212,8.55212 Z M 13.6748,0.470703C 13.4161,0.21228 12.9041,0 12.5361,0L 0.672112,0C 0.305454,0 0.000115077,0.300171 0.000115077,0.666626L 0.000115077,12.5322C 0.000115077,12.8988 0.214796,13.4121 0.473463,13.6709L 18.3281,31.524C 18.5868,31.7816 19.0135,31.7816 19.2708,31.524L 31.5281,19.2656C 31.7868,19.0082 31.7881,18.5826 31.5281,18.3229L 13.6748,0.470703 Z");
                    this.Close = new CM.Javascript.Assets.SVG("0 0 32 32", "M 21.0952,15.5026L 31,5.59778C 31.3876,5.2085 31.3876,4.57178 31,4.1842L 26.8228,0.00524902C 26.4352,-0.382324 25.8004,-0.382324 25.4111,0.00524902L 15.5027,9.91174L 5.58907,0C 5.19973,-0.387695 4.56489,-0.387695 4.17908,0L 4.07579e-005,4.18066C -0.389252,4.56653 -0.389252,5.20129 4.07579e-005,5.59424L 9.91192,15.5043L 0.00357297,25.4127C -0.382241,25.7985 -0.382241,26.4351 0.00357297,26.8246L 4.18084,31.0034C 4.57019,31.3892 5.2085,31.3892 5.59432,31.0034L 15.5027,21.0951L 25.404,30.9982C 25.7916,31.3857 26.4299,31.3857 26.8175,30.9982L 30.9983,26.8174C 31.3824,26.4316 31.3824,25.795 30.9983,25.4039L 21.0952,15.5026 Z");
                    this.ThreeDots = new CM.Javascript.Assets.SVG("0 0 32 8", "M 18.6667,3.68799C 18.6667,5.72412 20.3173,7.37598 22.3547,7.37598C 24.3907,7.37598 26.0413,5.72412 26.0413,3.68799C 26.0413,1.6521 24.3907,0 22.3547,0C 20.3173,0 18.6667,1.6521 18.6667,3.68799 Z M 9.33334,3.68799C 9.33334,5.72412 10.984,7.37598 13.0213,7.37598C 15.0573,7.37598 16.708,5.72412 16.708,3.68799C 16.708,1.6521 15.0573,0 13.0213,0C 10.984,0 9.33334,1.6521 9.33334,3.68799 Z M 3.68799,0C 5.724,0 7.37468,1.6521 7.37468,3.68799C 7.37468,5.72412 5.724,7.37598 3.68799,7.37598C 1.65068,7.37598 5.22658e-006,5.72412 5.22658e-006,3.68799C 5.22658e-006,1.6521 1.65068,0 3.68799,0 Z");
                }
            }
        },
        fields: {
            ViewBox: null,
            Data: null
        },
        ctors: {
            ctor: function (view, path) {
                this.$initialize();
                this.ViewBox = view;
                this.Data = path;
            }
        },
        methods: {
            ToString: function (width, height, fill) {
                return System.String.concat("<svg height=\"" + height + "\" width=\"" + width + "\" viewBox=\"", this.ViewBox, "\">", "<path style=\"fill:", fill, "\" d=\"", this.Data, "\"/></svg>");
            }
        }
    });

    Bridge.define("CM.Javascript.AuthorisePage.AuthItem", {
        fields: {
            Amount: System.Decimal(0.0),
            CommitStatus: null,
            ID: null,
            OnLoaded: null,
            Payee: null,
            Payer: null,
            ServerStatus: null,
            Status: null,
            TagBox: null,
            Trans: null,
            Transform: null
        },
        ctors: {
            init: function () {
                this.CommitStatus = new CM.CMResult();
                this.CommitStatus = CM.CMResult.S_False.$clone();
            },
            $ctor1: function (summaryData) {
                this.$initialize();
                var args = System.String.split(summaryData, [32].map(function(i) {{ return String.fromCharCode(i); }}));
                this.ID = System.String.concat(args[System.Array.index(0, args)], " ", args[System.Array.index(1, args)], " ", args[System.Array.index(2, args)]);
                this.Payee = args[System.Array.index(1, args)];
                this.Payer = args[System.Array.index(2, args)];
                this.Amount = System.Decimal(args[System.Array.index(3, args)]);
            },
            ctor: function (t) {
                this.$initialize();
                this.ID = t.ID;
                this.Payee = t.PayeeID;
                this.Payer = t.PayerID;
                this.Amount = t.Amount;
            }
        },
        methods: {
            BeginCommit: function (onComplete) {
                var $t;
                var put = ($t = new (CM.AsyncRequest$1(CM.Javascript.PutRequest))(), $t.Item = new CM.Javascript.PutRequest(this.Trans), $t.OnProgress = $asm.$.CM.Javascript.AuthorisePage.AuthItem.f1, $t.OnComplete = Bridge.fn.bind(this, function (putRes) {
                    putRes.Item.UpdateUIProgress();
                    this.CommitStatus = putRes.Result.$clone();
                    onComplete(this, putRes.Result.$clone());
                    putRes.Item.UI.SetMainGlyph(putRes.Result.Success ? CM.Javascript.Assets.SVG.CircleTick : CM.Javascript.Assets.SVG.CircleError);
                }), $t);
                CM.BridgeHacks.Clear(this.ServerStatus);
                CM.BridgeHacks.H3(this.ServerStatus, this.ID);
                put.Item.UI = new CM.Javascript.ServerProgressIndicator(this.ServerStatus);
                put.Item.UI.SetMainGlyph(CM.Javascript.Assets.SVG.Wait);
                put.Item.UI.Show();
                CM.Javascript.App.Identity.Client.TryPut(put);
            },
            BeginLoad: function () {
                var $t;
                if (this.Trans != null) {
                    this.OnLoaded(this, CM.CMResult.S_OK.$clone());
                    return;
                }
                this.Status = CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK;
                CM.Javascript.App.Identity.Client.TryFindTransaction(($t = new (CM.AsyncRequest$1(CM.Javascript.FindTransactionRequest))(), $t.Item = new CM.Javascript.FindTransactionRequest(this.ID), $t.OnComplete = Bridge.fn.bind(this, $asm.$.CM.Javascript.AuthorisePage.AuthItem.f2), $t));
            }
        }
    });

    Bridge.ns("CM.Javascript.AuthorisePage.AuthItem", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.AuthorisePage.AuthItem, {
        f1: function (sender) {
            (sender).Item.UpdateUIProgress();
        },
        f2: function (r) {
            if (r.Result.Success) {
                this.Status = null;
                this.Trans = r.Item.Output;
            } else {
                this.Status = CM.BridgeHacks.GetLocalisedDescription(r.Result);
            }
            this.OnLoaded(this, r.Result.$clone());
        }
    });

    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Action
     * @param   {System.Collections.Generic.List$1}    arg
     * @return  {void}
     */

    /**
     * A reference client implementation.
     *
     * @class CM.Javascript.Client
     */
    Bridge.define("CM.Javascript.Client", {
        fields: {
            /**
             * https://xyz.civil.money
             *
             * @instance
             * @public
             * @memberof CM.Javascript.Client
             * @type string
             */
            CurrentAuthoritativeServer: null,
            Peers: null,
            _CachedResponsiblePeers: null,
            _PeerNotifications: null,
            _RequestQueue: null,
            TimeoutSeconds: 0
        },
        events: {
            PeerNotifiesReceived: null,
            PeerRemoved: null,
            PeerStateChanged: null
        },
        ctors: {
            init: function () {
                this.Peers = new (System.Collections.Generic.List$1(CM.Javascript.Peer))();
                this._CachedResponsiblePeers = new (System.Collections.Generic.Dictionary$2(System.String,CM.Javascript.Client.CachedResponsiblePeers))();
                this.TimeoutSeconds = 5;
            },
            ctor: function () {
                this.$initialize();
                this._RequestQueue = new (System.Collections.Generic.List$1(CM.Javascript.Client.QueueItem))();
                this._PeerNotifications = new (System.Collections.Generic.Dictionary$2(System.String,CM.Javascript.PeerNotifyArgs))();
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.ProcessQueue));
            }
        },
        methods: {
            AddPotentialPeers: function (seenList) {
                if (seenList == null) {
                    return;
                }
                var ar = System.String.split(seenList, [44].map(function(i) {{ return String.fromCharCode(i); }}));
                for (var i = 0; i < ar.length; i = (i + 1) | 0) {
                    this.FindOrCreatePeer(ar[System.Array.index(i, ar)]);
                }
            },
            JoinNetwork: function () {
                for (var i = 0; i < CM.Constants.Seeds.length && i < 3; i = (i + 1) | 0) {
                    var p = this.FindOrCreatePeer(CM.Constants.Seeds[System.Array.index(i, CM.Constants.Seeds)].EndPoint);
                    if (p != null && p.State === CM.Javascript.PeerState.Unknown) {
                        p.BeginConnect(null);
                    }
                }
            },
            /**
             * Used by the client to query authoritative seeds.
             *
             * @instance
             * @public
             * @this CM.Javascript.Client
             * @memberof CM.Javascript.Client
             * @param   {CM.AsyncRequest$1}    onResult
             * @return  {void}
             */
            QueryAuthoritiveServer: function (onResult) {
                if (System.String.isNullOrWhiteSpace(onResult.Item.Url) || !System.String.startsWith(onResult.Item.Url, "/api/")) {
                    throw new System.Exception("Invalid API call attempt");
                }

                var ar = new (System.Collections.Generic.List$1(System.String))();
                var host = CM.Constants.Seeds[System.Array.index(0, CM.Constants.Seeds)].Domain;
                this.QueryAuthoritiveServerImpl(host, ar, onResult);
            },
            /**
             * Subscribes for instant notifications for the specified account id.
             *
             * @instance
             * @public
             * @this CM.Javascript.Client
             * @memberof CM.Javascript.Client
             * @param   {string}    accountid
             * @return  {void}
             */
            Subscribe: function (accountid) {
                var $t;
                var task = new CM.Javascript.Client.QueueItem();
                task.Start = System.DateTime.getUtcNow();
                task.Request = ($t = new (CM.AsyncRequest$1(System.String))(), $t.Item = accountid, $t);
                task.OnGotMultipleWorkingPeers = Bridge.fn.bind(this, function (servers, ireq) {
                    var req = Bridge.as(ireq, CM.AsyncRequest$1(System.String));
                    if (req.IsCancelled) {
                        req.Completed(CM.CMResult.E_Operation_Cancelled.$clone());
                        return;
                    }
                    this.FindResponsiblePeersForPath(servers, System.String.concat("ACCNT/", accountid), req, function (peers) {
                        if (peers.Count === 0 || req.IsCancelled) {
                            req.Completed(req.IsCancelled ? CM.CMResult.E_Operation_Cancelled.$clone() : CM.CMResult.E_Not_Enough_Peers.$clone());
                            return;
                        }
                        var completedCount = 0;

                        for (var i = 0; i < peers.Count; i = (i + 1) | 0) {
                            if (!peers.getItem(i).DesiredSubscribedIDs.contains(accountid)) {
                                peers.getItem(i).DesiredSubscribedIDs.add(accountid);
                            }
                            if (!peers.getItem(i).SentSubscribedIDs.contains(accountid)) {
                                peers.getItem(i).SendAndReceive("SUBSCRIBE", null, System.Array.init([accountid], System.String), function (p, res) {
                                    completedCount = (completedCount + 1) | 0;
                                    if (res.Response.IsSuccessful) {
                                        p.SentSubscribedIDs.add(accountid);
                                    }
                                    if (completedCount === peers.Count) {
                                        req.Completed(CM.CMResult.S_OK.$clone());
                                    }
                                });
                            }
                        }
                    }, null);
                });
                this._RequestQueue.add(task);
            },
            TryFindAccount: function (e) {
                var task = new CM.Javascript.Client.QueueItem();
                task.Start = System.DateTime.getUtcNow();
                task.Request = e;
                task.OnGotMultipleWorkingPeers = Bridge.fn.bind(this, function (servers, ireq) {
                    var req = Bridge.as(ireq, CM.AsyncRequest$1(CM.Javascript.FindAccountRequest));
                    if (req.IsCancelled) {
                        req.Completed(CM.CMResult.E_Operation_Cancelled.$clone());
                        return;
                    }
                    this.TryFindOnNetwork(CM.Schema.Account, servers, System.String.concat("ACCNT/", req.Item.ID, "?calculations-date=", CM.Helpers.DateToISO8601(System.DateTime.getUtcNow())), e, function (a) {
                        if (e.IsCancelled) {
                            req.Completed(CM.CMResult.E_Operation_Cancelled.$clone());
                        } else {
                            req.Item.Output = a;
                            req.Completed(a.Response.Code.$clone());
                        }
                    }, e.Item.UI);
                });
                this._RequestQueue.add(task);
            },
            TryFindTransaction: function (e) {
                var task = new CM.Javascript.Client.QueueItem();
                task.Start = System.DateTime.getUtcNow();
                task.Request = e;
                task.OnGotMultipleWorkingPeers = Bridge.fn.bind(this, function (servers, ireq) {
                    var req = Bridge.as(ireq, CM.AsyncRequest$1(CM.Javascript.FindTransactionRequest));
                    this.TryFindOnNetwork(CM.Schema.Transaction, servers, System.String.concat("TRANS/", req.Item.ID), e, function (t) {
                        req.Item.Output = t;
                        req.Completed(t.Response.Code.$clone());
                    });
                });
                this._RequestQueue.add(task);
            },
            TryFindVote: function (e) {
                var task = new CM.Javascript.Client.QueueItem();
                task.Start = System.DateTime.getUtcNow();
                task.Request = e;
                task.OnGotMultipleWorkingPeers = Bridge.fn.bind(this, function (servers, ireq) {
                    var req = Bridge.as(ireq, CM.AsyncRequest$1(CM.Javascript.FindVoteRequest));
                    if (req.IsCancelled) {
                        req.Completed(CM.CMResult.E_Operation_Cancelled.$clone());
                        return;
                    }
                    this.TryFindOnNetwork(CM.Schema.Vote, servers, System.String.concat("VOTES/", e.Item.PropositionID, "/", req.Item.VoterID), e, function (v) {
                        if (e.IsCancelled) {
                            req.Completed(CM.CMResult.E_Operation_Cancelled.$clone());
                        } else {
                            req.Item.Output = v;
                            req.Completed(v.Response.Code.$clone());
                        }
                    });
                });
                this._RequestQueue.add(task);
            },
            TryList: function (path, e, resultSink) {
                var task = new CM.Javascript.Client.QueueItem();
                task.Start = System.DateTime.getUtcNow();
                task.Request = e;
                task.OnGotMultipleWorkingPeers = Bridge.fn.bind(this, function (servers, req) {
                    this.FindResponsiblePeersForPath(servers, path, e, function (peers) {
                        if (e.IsCancelled) {
                            req.CM$IAsyncRequest$Completed(CM.CMResult.E_Operation_Cancelled.$clone());
                        } else if (peers.Count < CM.Constants.MinimumNumberOfCopies) {
                            req.CM$IAsyncRequest$Completed(CM.CMResult.E_Not_Enough_Peers.$clone());
                        } else {
                            var completedCount = 0;
                            for (var i = 0; i < peers.Count; i = (i + 1) | 0) {
                                peers.getItem(i).SendAndReceive("LIST", e.Item, System.Array.init([path], System.String), function (p, m) {
                                    e.UpdateProgress(Bridge.Int.clip32((completedCount / peers.Count) * 100));
                                    resultSink(p, m.Cast(CM.Schema.ListResponse));
                                    completedCount = (completedCount + 1) | 0;
                                    if (completedCount === peers.Count || CM.CMResult.op_Inequality(m.Response.Code.$clone(), CM.CMResult.S_OK.$clone())) {
                                        e.Completed(m.Response.Code.$clone());
                                    }
                                });
                            }
                        }
                    }, null);
                });
                this._RequestQueue.add(task);
            },
            TryPut: function (e) {
                var path = e.Item.Item.CM$IStorable$Path;
                var task = new CM.Javascript.Client.QueueItem();
                task.Start = System.DateTime.getUtcNow();
                task.Request = e;
                task.OnGotMultipleWorkingPeers = Bridge.fn.bind(this, function (servers, req) {
                    this.FindResponsiblePeersForPath(servers, path, e, Bridge.fn.bind(this, function (peers) {
                        if (e.IsCancelled) {
                            req.CM$IAsyncRequest$Completed(CM.CMResult.E_Operation_Cancelled.$clone());
                        } else if (peers.Count < CM.Constants.MinimumNumberOfCopies) {
                            req.CM$IAsyncRequest$Completed(CM.CMResult.E_Not_Enough_Peers.$clone());
                        } else {
                            var completedCount = 0;
                            for (var i = 0; i < peers.Count; i = (i + 1) | 0) {
                                var status = new CM.Javascript.CommitStatus(e, peers.getItem(i), Bridge.cast(e.Item.Item, CM.Message), path);
                                e.Item.Statuses.add(status);
                                status.Put(Bridge.fn.bind(this, function (s) {
                                    completedCount = (completedCount + 1) | 0;
                                    if (completedCount === peers.Count) {
                                        this.BeginQueryCommitPhase(Bridge.as(req, CM.AsyncRequest$1(CM.Javascript.PutRequest)));
                                    }
                                }));
                            }
                        }
                    }), e.Item.UI);
                });
                this._RequestQueue.add(task);
            },
            /**
             * Removes the specified ID for subscription notifications. Remote peers
             will still send the notifications, but the message will be ignored
             unless the peer is resubscribed.
             *
             * @instance
             * @public
             * @this CM.Javascript.Client
             * @memberof CM.Javascript.Client
             * @param   {string}    id
             * @return  {void}
             */
            Unsubscribe: function (id) {
                for (var i = 0; i < this.Peers.Count; i = (i + 1) | 0) {
                    this.Peers.getItem(i).DesiredSubscribedIDs.remove(id);
                }
            },
            /**
             * Calls COMMIT on responsible DHT peers who have
             indicated that they're OK to proceed.
             *
             * @instance
             * @private
             * @this CM.Javascript.Client
             * @memberof CM.Javascript.Client
             * @param   {CM.AsyncRequest$1}    req
             * @return  {void}
             */
            BeginFinalCommitPhase: function (req) {
                var e = req.Item;
                var toCommit = new (System.Collections.Generic.List$1(CM.Javascript.CommitStatus))();
                for (var i = 0; i < e.Statuses.Count; i = (i + 1) | 0) {
                    var stat = e.Statuses.getItem(i);
                    if (stat.Token == null || !stat.IsConfirmed) {
                        continue;
                    }
                    toCommit.add(stat);
                }

                if (toCommit.Count < CM.Constants.MinimumNumberOfCopies) {
                    // Not enough peers are giving the all-clear to proceed.
                    var result = this.GetResultConsensus(e.Statuses, CM.CMResult.E_Not_Enough_Peers.$clone());
                    req.Completed(result.$clone());
                    return;
                }

                var completed = 0;
                for (var i1 = 0; i1 < toCommit.Count; i1 = (i1 + 1) | 0) {
                    toCommit.getItem(i1).Commit(Bridge.fn.bind(this, function (p) {
                        completed = (completed + 1) | 0;
                        if (completed === toCommit.Count) {
                            // We're done
                            this.ReturnFinalCommitResponse(req);
                        }
                    }));
                }
            },
            /**
             * Calls QUERY-COMMIT on all responsible DHT peers to see whether
             they're OK to proceed.
             *
             * @instance
             * @private
             * @this CM.Javascript.Client
             * @memberof CM.Javascript.Client
             * @param   {CM.AsyncRequest$1}    req
             * @return  {void}
             */
            BeginQueryCommitPhase: function (req) {
                var e = req.Item;

                var tocheck = new (System.Collections.Generic.List$1(CM.Javascript.CommitStatus))();
                for (var i = 0; i < e.Statuses.Count; i = (i + 1) | 0) {
                    var stat = e.Statuses.getItem(i);
                    if (stat.Token == null) {
                        continue;
                    }
                    tocheck.add(stat);
                }

                if (tocheck.Count < CM.Constants.MinimumNumberOfCopies) {
                    // Not enough peers returned a commit token. See if there's a
                    // consensus regarding a data validity error amongst peers.
                    var result = this.GetResultConsensus(e.Statuses, CM.CMResult.E_Not_Enough_Peers.$clone());
                    req.Completed(result.$clone());
                    return;
                }

                var checkedCount = 0;
                for (var i1 = 0; i1 < tocheck.Count; i1 = (i1 + 1) | 0) {
                    tocheck.getItem(i1).QueryCommit(Bridge.fn.bind(this, function (p) {
                        checkedCount = (checkedCount + 1) | 0;
                        if (checkedCount === tocheck.Count) {
                            this.BeginFinalCommitPhase(req);
                        }
                    }));
                }
            },
            Find: function (server, copyID, onResult) {
                var $t;
                server.SendAndReceive("FIND", ($t = new CM.Schema.FindResponsiblePeerRequest(), $t.DHTID = CM.Helpers.DHT_ID(copyID), $t.MaxHopCount = CM.Constants.MaxHopCount, $t.HopList = "", $t), null, function (p, e) {
                    var $t1;
                    var res = e.Cast(CM.Schema.FindResponsiblePeerResponse);
                    var hops = ($t1 = res.HopList, $t1 != null ? $t1 : "");
                    System.Console.WriteLine(System.String.concat(copyID, " = ", res.PeerEndpoint, " (", System.String.split(hops, [44].map(function(i) {{ return String.fromCharCode(i); }})).length, " hops)"));
                    if (res.Response.IsSuccessful && res.PeerEndpoint != null) {
                        onResult(res.PeerEndpoint);
                    } else {
                        onResult(null);
                    }
                });
            },
            FindOrCreatePeer: function (endpoint) {
                if (endpoint == null || endpoint.length === 0) {
                    return null;
                }
                var p = null;
                for (var x = 0; x < this.Peers.Count; x = (x + 1) | 0) {
                    p = this.Peers.getItem(x);
                    if (Bridge.referenceEquals(p.EndPoint, endpoint) || Bridge.referenceEquals(p.SupposedIPEndPoint, endpoint)) {
                        return p;
                    }
                }
                p = new CM.Javascript.Peer(this, endpoint, Bridge.fn.cacheBind(this, this.OnPeerStateChange), Bridge.fn.cacheBind(this, this.OnPeerError), Bridge.fn.cacheBind(this, this.OnPeerRequest));
                this.Peers.add(p);
                this.OnPeerStateChange(p);
                return p;
            },
            /**
             * Copies of objects are stored in the P2P network in multiple locations. The naming
             convention for locating any object across the network is:
             DHT_HASHID("copy" + number + "id")
             *
             * @instance
             * @private
             * @this CM.Javascript.Client
             * @memberof CM.Javascript.Client
             * @param   {System.Collections.Generic.List$1}        servers                 
             * @param   {string}                                   id                      The ID to fetch.
             * @param   {CM.IAsyncRequest}                         req                     
             * @param   {number}                                   numberOfPlacesToLook    The number of copies expected to be on the network.
             * @param   {System.Action}                            onResult                Receives a list of peers that 'could' be holding a copy of the object.
             * @param   {CM.Javascript.ServerProgressIndicator}    ui
             * @return  {void}
             */
            FindResponsiblePeersForAccount: function (servers, id, req, numberOfPlacesToLook, onResult, ui) {
                var cached = { };
                if (this._CachedResponsiblePeers.tryGetValue(id, cached) && cached.v.Age.getTotalSeconds() < 120) {
                    if (ui != null) {
                        ui.AppendPeers(cached.v.Peers);
                    }
                    onResult(cached.v.Peers);
                    return;
                }

                var ar = new (System.Collections.Generic.List$1(System.String))();
                if (req.CM$IAsyncRequest$IsCancelled) {
                    onResult(new (System.Collections.Generic.List$1(CM.Javascript.Peer))());
                    return;
                }
                var peers = new (System.Collections.Generic.List$1(System.String))();
                var done = 0;
                var OnDone = Bridge.fn.bind(this, function (ep) {
                    var $t;
                    if (ep != null && !peers.contains(ep)) {
                        peers.add(ep);
                    }
                    done = (done + 1) | 0;
                    if (done === numberOfPlacesToLook) {
                        var res = new (System.Collections.Generic.List$1(CM.Javascript.Peer))();
                        for (var i = 0; i < peers.Count; i = (i + 1) | 0) {
                            var p = this.FindOrCreatePeer(peers.getItem(i));
                            if (p != null && !res.contains(p)) {
                                res.add(p);
                                if (ui != null) {
                                    ui.AppendPeer(p);
                                }
                            }
                        }

                        // Cache positive results for a short while.
                        if (res.Count >= CM.Constants.MinimumNumberOfCopies) {
                            this._CachedResponsiblePeers.set(id, ($t = new CM.Javascript.Client.CachedResponsiblePeers(), $t.Peers = res, $t));
                        }
                        ;

                        onResult(res);
                    }
                });
                System.Console.WriteLine("Finding using " + servers.Count + " servers");
                // JavaScript is single-threaded but we can get semi async
                // through the web sockets by dispatching queries to multiple
                // servers. This also doubles as a consensus security feature.
                for (var i = 0; i < numberOfPlacesToLook; i = (i + 1) | 0) {
                    this.Find(servers.getItem(i % servers.Count), System.String.concat("copy" + (((i + 1) | 0)), id), OnDone);
                }
            },
            FindResponsiblePeersForPath: function (servers, path, req, onResult, ui) {
                var queryIdx = System.String.indexOf(path, String.fromCharCode(63));
                if (queryIdx > -1) {
                    path = path.substr(0, queryIdx);
                }
                if (System.String.startsWith(path, CM.Constants.PATH_ACCNT)) {
                    var id = path.substr(((CM.Constants.PATH_ACCNT.length + 1) | 0));
                    if (System.String.indexOf(id, String.fromCharCode(47)) > -1) {
                        id = id.substr(0, System.String.indexOf(id, String.fromCharCode(47)));
                    }
                    if (CM.Helpers.IsIDValid(id)) {
                        this.FindResponsiblePeersForAccount(servers, id, req, CM.Constants.NumberOfCopies, onResult, ui);
                    } else {
                        throw new System.ArgumentException("Invalid Account ID in path.");
                    }
                } else if (System.String.startsWith(path, CM.Constants.PATH_TRANS)) {
                    var id1 = path.substr(((CM.Constants.PATH_TRANS.length + 1) | 0));
                    var created = { };
                    var payee = { }, payer = { };
                    if (CM.Helpers.TryParseTransactionID(id1, created, payee, payer)) {
                        this.FindResponsiblePeersForAccount(servers, payee.v, req, CM.Constants.NumberOfCopies, Bridge.fn.bind(this, function (a) {
                            this.FindResponsiblePeersForAccount(servers, payer.v, req, CM.Constants.NumberOfCopies, function (b) {
                                // Merge the payee + payer destination lists
                                for (var i = 0; i < a.Count; i = (i + 1) | 0) {
                                    if (!b.contains(a.getItem(i))) {
                                        b.add(a.getItem(i));
                                    }
                                }
                                onResult(b);
                            }, ui);
                        }), ui);
                    } else {
                        throw new System.ArgumentException("Invalid Transaction ID in path.");
                    }
                } else if (System.String.startsWith(path, CM.Constants.PATH_VOTES)) {
                    var parts = System.String.split(path, [47].map(function(i) {{ return String.fromCharCode(i); }}));
                    // VOTES/{PropositionID}/{ID}
                    if (CM.Helpers.IsIDValid(parts[System.Array.index(2, parts)])) {
                        this.FindResponsiblePeersForAccount(servers, parts[System.Array.index(2, parts)], req, CM.Constants.NumberOfCopies, onResult, ui);
                    } else {
                        throw new System.ArgumentException("Invalid Vote path.");
                    }
                } else {
                    throw new System.ArgumentException("Invalid path for DHT searching");
                }
            },
            GetResultConsensus: function (ar, $default) {
                var consensus = $default.$clone();
                var consensusCount = 0;
                for (var i = 0; i < ar.Count; i = (i + 1) | 0) {
                    var stat = { v : ar.getItem(i) };
                    if (System.Nullable.hasValue(stat.v.CommitResponse)) {
                        var c = System.Linq.Enumerable.from(ar).count((function ($me, stat) {
                                return function (x) {
                                    return System.Nullable.liftne(CM.CMResult.op_Inequality, System.Nullable.lift1("$clone", x.CommitResponse), null) && CM.CMResult.op_Equality(System.Nullable.getValue(x.CommitResponse), System.Nullable.getValue(stat.v.CommitResponse));
                                };
                            })(this, stat));
                        if (consensusCount < c) {
                            consensusCount = c;
                            consensus = System.Nullable.getValue(stat.v.CommitResponse);
                        }
                    } else if (System.Nullable.hasValue(stat.v.QueryCommitResponse)) {
                        var c1 = System.Linq.Enumerable.from(ar).count((function ($me, stat) {
                                return function (x) {
                                    return System.Nullable.liftne(CM.CMResult.op_Inequality, System.Nullable.lift1("$clone", x.QueryCommitResponse), null) && CM.CMResult.op_Equality(System.Nullable.getValue(x.QueryCommitResponse), System.Nullable.getValue(stat.v.QueryCommitResponse));
                                };
                            })(this, stat));
                        if (consensusCount < c1) {
                            consensusCount = c1;
                            consensus = System.Nullable.getValue(stat.v.QueryCommitResponse);
                        }
                    } else if (System.Nullable.hasValue(stat.v.PutResponse)) {
                        var c2 = System.Linq.Enumerable.from(ar).count((function ($me, stat) {
                                return function (x) {
                                    return System.Nullable.liftne(CM.CMResult.op_Inequality, System.Nullable.lift1("$clone", x.PutResponse), null) && CM.CMResult.op_Equality(System.Nullable.getValue(x.PutResponse), System.Nullable.getValue(stat.v.PutResponse));
                                };
                            })(this, stat));
                        if (consensusCount < c2) {
                            consensusCount = c2;
                            consensus = System.Nullable.getValue(stat.v.PutResponse);
                        }
                    }
                }
                return consensus.$clone();
            },
            OnPeerError: function (p, error) {
                System.Console.WriteLine(System.String.concat("[", p.EndPoint, "] ! ", error));
            },
            OnPeerNotifyReceived: function (p, m) {
                var path = m.Request.FirstArgument;
                var args = { };
                var item = null;
                if (CM.BridgeHacks.StartsWith(path, CM.Constants.PATH_ACCNT, 5)) {
                    var a = m.Cast(CM.Schema.Account);
                    if (!p.DesiredSubscribedIDs.contains(a.ID.toLowerCase())) {
                        return;
                    } // no longer subscribed.
                    item = a;
                } else if (CM.BridgeHacks.StartsWith(path, CM.Constants.PATH_TRANS, 5)) {
                    var t = m.Cast(CM.Schema.Transaction);
                    if (!p.DesiredSubscribedIDs.contains(t.PayeeID.toLowerCase()) && !p.DesiredSubscribedIDs.contains(t.PayerID.toLowerCase())) {
                        return;
                    } // no longer subscribed.
                    item = t;
                }
                if (item == null) {
                    return;
                }
                if (!this._PeerNotifications.tryGetValue(path, args)) {
                    args.v = new CM.Javascript.PeerNotifyArgs(item);
                }
                args.v.Peers.add(p);
                if (!Bridge.staticEquals(this.PeerNotifiesReceived, null)) {
                    this.PeerNotifiesReceived(args.v);
                }
            },
            OnPeerRequest: function (p, m) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5], $step);
                            switch ($step) {
                                case 0: {
                                    if (Bridge.referenceEquals(m.Request.Action, "NOTIFY")) {
                                        $step = 1;
                                        continue;
                                    } else  {
                                        $step = 3;
                                        continue;
                                    }
                                }
                                case 1: {
                                    $task1 = p.Reply(m, CM.CMResult.S_OK.$clone());
                                    $step = 2;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    this.OnPeerNotifyReceived(p, m);
                                    $step = 5;
                                    continue;
                                }
                                case 3: {
                                    $task2 = p.Reply(m, CM.CMResult.E_General_Failure.$clone());
                                    $step = 4;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 4: {
                                    $taskResult2 = $task2.getAwaitedResult();
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            OnPeerStateChange: function (p) {
                // Kill duplicates based on SupposedIPEndPoint for host name resolution
                for (var x = 0; x < this.Peers.Count; x = (x + 1) | 0) {
                    var tmp = this.Peers.getItem(x);
                    if (!Bridge.referenceEquals(tmp, p) && Bridge.referenceEquals(tmp.EndPoint, p.SupposedIPEndPoint)) {
                        this.Peers.removeAt(Bridge.identity(x, (x = (x - 1) | 0)));
                        if (!Bridge.staticEquals(this.PeerRemoved, null)) {
                            this.PeerRemoved(tmp);
                        }
                    }
                }

                this.Peers.sort($asm.$.CM.Javascript.Client.f1);
                if (!Bridge.staticEquals(this.PeerStateChanged, null)) {
                    this.PeerStateChanged(p);
                }
            },
            ProcessQueue: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    tryState, 
                    oldestIdleConnection, 
                    working, 
                    i, 
                    p, 
                    idle, 
                    isTryingSomething, 
                    i1, 
                    i2, 
                    r, 
                    openConnections, 
                    i3, 
                    peer, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        tryState = CM.Javascript.PeerState.Unknown;
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( true ) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        oldestIdleConnection = null;
                                        working = new (System.Collections.Generic.List$1(CM.Javascript.Peer))();
                                        for (i = 0; i < this.Peers.Count; i = (i + 1) | 0) {
                                            p = this.Peers.getItem(i);
                                            if (p.State === CM.Javascript.PeerState.Connected) {
                                                working.add(p);
                                                idle = p.IdleTime;
                                                if (idle.getTotalSeconds() > 60 && p.DesiredSubscribedIDs.Count === 0 && (oldestIdleConnection == null || System.TimeSpan.lt(oldestIdleConnection.IdleTime, idle))) {
                                                    oldestIdleConnection = p;
                                                }
                                            }
                                        }
                                        if (working.Count >= 2) {
                                            // After successful connection to at least a couple of peers
                                            // working peers, reset the re-connection test state
                                            tryState = CM.Javascript.PeerState.Unknown;
                                            if (this._RequestQueue.Count > 0) {
                                                this._RequestQueue.getItem(0).OnGotMultipleWorkingPeers(working, this._RequestQueue.getItem(0).Request);
                                                this._RequestQueue.removeAt(0);
                                            }
                                        } else if (this._RequestQueue.Count > 0 && this.Peers.Count === 0) {
                                            this.JoinNetwork();
                                        } else {
                                            // Try and obtain a working peer
                                            isTryingSomething = false;
                                            for (i1 = 0; i1 < this.Peers.Count && !isTryingSomething; i1 = (i1 + 1) | 0) {
                                                if (this.Peers.getItem(i1).State === tryState) {
                                                    this.Peers.getItem(i1).BeginConnect(null);
                                                    isTryingSomething = true;
                                                    //break; // Bridge.NET bug won't compile this
                                                }
                                            }
                                            if (!isTryingSomething) {
                                                if (tryState === CM.Javascript.PeerState.Unknown) {
                                                    tryState = CM.Javascript.PeerState.Disconnected;
                                                } else {
                                                    if (tryState === CM.Javascript.PeerState.Disconnected) {
                                                        tryState = CM.Javascript.PeerState.Broken;
                                                    }
                                                }
                                            }
                                        }

                                        // Time-out any requests that are not working
                                        for (i2 = 0; i2 < this._RequestQueue.Count; i2 = (i2 + 1) | 0) {
                                            r = this._RequestQueue.getItem(i2);
                                            if ((System.DateTime.subdd(System.DateTime.getUtcNow(), r.Start)).getTotalSeconds() > this.TimeoutSeconds) {
                                                r.Request.CM$IAsyncRequest$Completed(CM.CMResult.E_Connect_Attempt_Timeout.$clone());
                                                this._RequestQueue.removeAt(Bridge.identity(i2, (i2 = (i2 - 1) | 0)));
                                            }
                                        }

                                        if (working.Count > 2) {
                                            // Close idle an connection (oldest first)

                                            openConnections = 0;
                                            for (i3 = 0; i3 < this.Peers.Count; i3 = (i3 + 1) | 0) {
                                                peer = this.Peers.getItem(i3);
                                                if (peer.State === CM.Javascript.PeerState.Connected) {
                                                    openConnections = (openConnections + 1) | 0;
                                                }
                                            }
                                            // we want to maintain a reasonable number
                                            if (openConnections > 5 && oldestIdleConnection != null) {
                                                System.Console.WriteLine(System.String.concat("Closing idle connection ", oldestIdleConnection.EndPoint));
                                                oldestIdleConnection.Disconnect();
                                            }
                                        }

                                        $task1 = System.Threading.Tasks.Task.delay(this._RequestQueue.Count === 0 || tryState !== CM.Javascript.PeerState.Unknown ? 1000 : 250);
                                        $step = 3;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            QueryAuthoritiveServerImpl: function (server, tried, onResult) {
                tried.add(server);
                onResult.Item.Attempts = (onResult.Item.Attempts + 1) | 0;

                var r = new XMLHttpRequest();
                r.ontimeout = Bridge.fn.bind(this, function (ev) {
                    this.QueryAuthoritiveServerTryNextOrGiveUp(tried, r, onResult);
                });
                r.onerror = Bridge.fn.bind(this, function (ev) {
                    this.QueryAuthoritiveServerTryNextOrGiveUp(tried, r, onResult);
                });
                r.onreadystatechange = function () {
                    switch (r.readyState) {
                        case 4: 
                            onResult.Item.Status = r.statusText;
                            onResult.Item.StatusCode = r.status;
                            onResult.Item.Content = r.responseText;
                            onResult.Completed(r.status === 200 ? CM.CMResult.S_OK.$clone() : CM.CMResult.S_False.$clone());
                            break;
                        case 2: 
                            onResult.Item.Status = r.statusText;
                            break;
                        case 3: 
                            break;
                        case 1: 
                            break;
                        case 0: 
                            break;
                    }
                };
                try {
                    var url = onResult.Item.Url;
                    // Use https://*.civil.money if available, otherwise, untrusted-server.com.
                    var domain = System.String.indexOf(server, CM.DNS.AUTHORITATIVE_DOMAIN) === -1 ? CM.DNS.EndpointToUntrustedDomain(server, true) : server;
                    this.CurrentAuthoritativeServer = System.String.concat("https://", domain);
                    if (onResult.Item.Post == null) {
                        r.open("GET", System.String.concat("https://", domain, url), true);
                        r.send();
                    } else {
                        r.open("POST", System.String.concat("https://", domain, url), true);
                        r.send(onResult.Item.Post);
                    }
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    this.QueryAuthoritiveServerTryNextOrGiveUp(tried, r, onResult);
                }
            },
            QueryAuthoritiveServerTryNextOrGiveUp: function (tried, r, onResult) {
                var next = null;
                for (var i = 0; i < CM.Constants.Seeds.length; i = (i + 1) | 0) {
                    if (!tried.contains(CM.Constants.Seeds[System.Array.index(i, CM.Constants.Seeds)].Domain)) {
                        next = CM.Constants.Seeds[System.Array.index(i, CM.Constants.Seeds)].Domain;
                        break;
                    }
                }
                if (next != null) {
                    this.QueryAuthoritiveServerImpl(next, tried, onResult);
                } else {
                    onResult.Item.Status = r.statusText;
                    onResult.Item.StatusCode = r.status;
                    onResult.Completed(CM.CMResult.S_False.$clone());
                }
            },
            /**
             * Interprets a final completion status based on
             which DHT peers worked and which didn't.
             *
             * @instance
             * @private
             * @this CM.Javascript.Client
             * @memberof CM.Javascript.Client
             * @param   {CM.AsyncRequest$1}    req
             * @return  {void}
             */
            ReturnFinalCommitResponse: function (req) {
                var e = req.Item;
                var ar = new (System.Collections.Generic.List$1(CM.Javascript.CommitStatus))();
                for (var i = 0; i < e.Statuses.Count; i = (i + 1) | 0) {
                    var stat = e.Statuses.getItem(i);
                    if (System.Nullable.liftne(CM.CMResult.op_Inequality, System.Nullable.lift1("$clone", stat.CommitResponse), CM.CMResult.S_OK.$clone())) {
                        continue;
                    }
                    ar.add(stat);
                }
                var result = CM.CMResult.E_Account_Cant_Corroborate.$clone();
                if (ar.Count < CM.Constants.MinimumNumberOfCopies) {
                    // What happened
                    result = this.GetResultConsensus(e.Statuses, CM.CMResult.E_General_Failure.$clone());
                    if (ar.Count !== 0) {
                        // We're potentially in an inconsistent state here, which is bad...
                        // Enough peers indicated that they were OK to proceed just moments ago,
                        // but for whatever reason, one or more have been unable to commit or
                        // have become unreachable.
                    } else {
                        // All peers failed. Most likely the client disconnected right
                        // before or during our call to commit.
                    }
                } else {
                    result = CM.CMResult.S_OK.$clone();
                }
                req.Completed(result.$clone());
            },
            TryFindOnNetwork: function (T, servers, path, req, onResult, ui) {
                if (ui === void 0) { ui = null; }
                this.FindResponsiblePeersForPath(servers, path, req, function (peers) {
                    var $t;
                    if (peers.Count === 0 || req.CM$IAsyncRequest$IsCancelled) {
                        // No peers
                        onResult(($t = new CM.Message.ctor(), $t.Response = new CM.Message.ResponseHeader.ctor(req.CM$IAsyncRequest$IsCancelled ? CM.CMResult.E_Operation_Cancelled.$clone() : CM.CMResult.E_Not_Enough_Peers.$clone(), null), $t));
                        return;
                    }
                    var completedCount = 0;
                    var copies = new (System.Collections.Generic.List$1(T))();
                    for (var i = 0; i < peers.Count; i = (i + 1) | 0) {
                        if (ui != null) {
                            ui.Update(peers.getItem(i), CM.Javascript.Assets.SVG.Wait, CM.Javascript.SR.LABEL_STATUS_CONNECTING);
                        }
                        peers.getItem(i).SendAndReceive("GET", null, System.Array.init([path], System.String), function (p, res) {
                            completedCount = (completedCount + 1) | 0;
                            //if (res.Response.IsSuccessful) {
                            // Let empty error messages propagate to the caller, so they
                            // can get a useful response status code.
                            copies.add(res.Cast(T));
                            if (ui != null) {
                                ui.Update(p, res.Response.IsSuccessful ? CM.Javascript.Assets.SVG.CircleTick : CM.Javascript.Assets.SVG.CircleUnknown, res.Response.IsSuccessful ? CM.Javascript.SR.LABEL_STATUS_OK : CM.BridgeHacks.GetLocalisedDescription(res.Response.Code));
                            }
                            //}
                            if (completedCount === peers.Count) {
                                var account = { };
                                CM.Helpers.CheckConsensus(T, copies, account);
                                onResult(account.v);
                            }
                        });
                    }
                }, ui);
            }
        }
    });

    Bridge.ns("CM.Javascript.Client", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.Client, {
        f1: function (a, b) {
            // sort by "working" first
            return Bridge.Int.mul(Bridge.compare((a.State === CM.Javascript.PeerState.Connected), b.State === CM.Javascript.PeerState.Connected), -1);
        }
    });

    Bridge.define("CM.Javascript.Client.CachedResponsiblePeers", {
        fields: {
            Peers: null,
            _CreatedUtc: null
        },
        props: {
            Age: {
                get: function () {
                    return System.DateTime.subdd(System.DateTime.getUtcNow(), this._CreatedUtc);
                }
            }
        },
        ctors: {
            init: function () {
                this._CreatedUtc = System.DateTime.getDefaultValue();
                this._CreatedUtc = System.DateTime.getUtcNow();
            }
        }
    });

    Bridge.define("CM.Javascript.Client.HttpRequest", {
        fields: {
            Attempts: 0,
            Content: null,
            Post: null,
            Status: null,
            StatusCode: 0,
            Url: null
        },
        ctors: {
            ctor: function (apiPath) {
                this.$initialize();
                this.Url = apiPath;
            }
        }
    });

    Bridge.define("CM.Javascript.Client.QueueItem", {
        fields: {
            OnGotMultipleWorkingPeers: null,
            Request: null,
            Start: null
        },
        ctors: {
            init: function () {
                this.Start = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("CM.Javascript.CommitStatus", {
        fields: {
            CommitResponse: null,
            CommitTries: 0,
            IsCommitted: false,
            IsConfirmed: false,
            IsInError: false,
            Item: null,
            Peer: null,
            PutResponse: null,
            QueryCommitResponse: null,
            Status: null,
            StatusDetails: null,
            Token: null,
            Owner: null,
            Path: null
        },
        ctors: {
            ctor: function (owner, p, item, path) {
                this.$initialize();
                this.Peer = p;
                this.Path = path;
                this.Item = item;
                this.Owner = owner;
            }
        },
        methods: {
            Commit: function (onComplete) {
                this.Status = System.String.concat(CM.Javascript.SR.LABEL_STATUS_COMITTING_DATA, " ...");
                if (!Bridge.staticEquals(this.Owner.OnProgress, null)) {
                    this.Owner.OnProgress(this.Owner);
                }
                this.Peer.SendAndReceive("COMMIT", null, System.Array.init([this.Token], System.String), Bridge.fn.bind(this, function (p, res) {
                    this.CommitResponse = res.Response.Code.$clone();
                    if (System.Nullable.lifteq(CM.CMResult.op_Equality, System.Nullable.lift1("$clone", this.CommitResponse), CM.CMResult.S_OK.$clone())) {
                        this.Status = System.String.concat(CM.Javascript.SR.LABEL_STATUS_OK, " :)");
                        this.StatusDetails = null;
                        this.IsCommitted = true;
                        this.IsInError = false;
                    } else {
                        this.Status = CM.Javascript.SR.LABEL_STATUS_ERROR_CLICK_FOR_DETAILS;
                        this.StatusDetails = res.Response.Code.toString();
                        this.IsInError = true;
                    }
                    if (!Bridge.staticEquals(this.Owner.OnProgress, null)) {
                        this.Owner.OnProgress(this.Owner);
                    }
                    onComplete(this);
                }));
            },
            Put: function (onComplete) {
                this.Status = System.String.concat(CM.Javascript.SR.LABEL_STATUS_CONNECTING, " ...");
                this.IsInError = false;
                this.IsCommitted = false;
                this.IsConfirmed = false;
                if (!Bridge.staticEquals(this.Owner.OnProgress, null)) {
                    this.Owner.OnProgress(this.Owner);
                }
                this.Peer.SendAndReceive("PUT", this.Item, System.Array.init([this.Path], System.String), Bridge.fn.bind(this, function (p, res) {
                    var $t;
                    this.PutResponse = res.Response.Code.$clone();
                    if (res.Response.IsSuccessful) {
                        this.Token = ($t = res.Response.Arguments)[System.Array.index(0, $t)];
                        //Status = "Looking good";
                        this.StatusDetails = null;
                    } else {
                        this.Status = CM.Javascript.SR.LABEL_STATUS_ERROR_CLICK_FOR_DETAILS;
                        this.StatusDetails = res.Response.Code.toString();
                        this.IsInError = true;
                    }
                    if (!Bridge.staticEquals(this.Owner.OnProgress, null)) {
                        this.Owner.OnProgress(this.Owner);
                    }
                    onComplete(this);
                }));
            },
            QueryCommit: function (onComplete) {
                if (this.CommitTries < 5) {
                    this.CommitTries = (this.CommitTries + 1) | 0;

                    this.Status = System.String.concat(CM.Javascript.SR.LABEL_STATUS_CORROBORATING, " .", System.String.fromCharCount(46, this.CommitTries));
                    if (!Bridge.staticEquals(this.Owner.OnProgress, null)) {
                        this.Owner.OnProgress(this.Owner);
                    }
                    this.Peer.SendAndReceive("QUERY-COMMIT", null, System.Array.init([this.Path], System.String), Bridge.fn.bind(this, function (p, res) {
                        var $t;
                        this.QueryCommitResponse = res.Response.Code.$clone();
                        if (System.Nullable.lifteq(CM.CMResult.op_Equality, System.Nullable.lift1("$clone", this.QueryCommitResponse), CM.CMResult.S_OK.$clone())) {
                            var updatedUtc = CM.Helpers.DateFromISO8601$1(($t = res.Response.Arguments)[System.Array.index(0, $t)]);
                            if (Bridge.equals(updatedUtc, Bridge.cast(this.Item, CM.IStorable).CM$IStorable$UpdatedUtc)) {
                                this.IsConfirmed = true;
                                this.IsInError = false;
                                this.StatusDetails = null;
                            } else {
                                // Some other commit is beating us to it
                                this.QueryCommitResponse = CM.CMResult.E_Object_Superseded.$clone();
                            }
                            onComplete(this);
                        } else {
                            // retry
                            this.IsInError = true;
                            this.QueryCommit(onComplete);
                        }
                    }));
                } else {
                    // Not working...
                    this.Status = CM.Javascript.SR.LABEL_STATUS_ERROR_CLICK_FOR_DETAILS;
                    this.StatusDetails = System.Nullable.getValue(this.QueryCommitResponse).toString();
                    if (!Bridge.staticEquals(this.Owner.OnProgress, null)) {
                        this.Owner.OnProgress(this.Owner);
                    }
                    onComplete(this);
                }
            }
        }
    });

    /**
     * An error/status/feedback UI component
     *
     * @class CM.Javascript.Feedback
     */
    Bridge.define("CM.Javascript.Feedback", {
        fields: {
            _Element: null,
            _Glyph: null,
            _Message: null
        },
        props: {
            IsShowing: false
        },
        ctors: {
            ctor: function (owner, big) {
                if (big === void 0) { big = false; }

                this.$initialize();
                this._Element = CM.BridgeHacks.Span(owner, null, System.String.concat("feedback hidden", (big ? " big" : "")));
                this._Glyph = CM.BridgeHacks.Span(this._Element, null, "glyph");
                this._Message = CM.BridgeHacks.Span(this._Element, null, "message");
                this.IsShowing = false;
            }
        },
        methods: {
            Hide: function () {
                CM.BridgeHacks.AddClass(this._Element, "hidden");
                this.IsShowing = false;
            },
            Set: function (glyph, type, message) {
                CM.BridgeHacks.RemoveClass(this._Element, "default");
                CM.BridgeHacks.RemoveClass(this._Element, "error");
                CM.BridgeHacks.RemoveClass(this._Element, "success");
                CM.BridgeHacks.AddClass(this._Element, System.Enum.toString(CM.Javascript.FeedbackType, type).toLowerCase());

                this._Glyph.innerHTML = glyph.ToString(16, 16, "#000000");
                CM.BridgeHacks.Clear(this._Message);
                CM.BridgeHacks.Div(this._Message, null, System.String.replaceAll(CM.Javascript.Page.HtmlEncode(message), "\n", "<br/>"));
                CM.BridgeHacks.RemoveClass(this._Element, "hidden");
                this.IsShowing = true;
            },
            Set$1: function (glyph, type, message, buttonLabel, onClick) {
                CM.BridgeHacks.RemoveClass(this._Element, "default");
                CM.BridgeHacks.RemoveClass(this._Element, "error");
                CM.BridgeHacks.RemoveClass(this._Element, "success");
                CM.BridgeHacks.AddClass(this._Element, System.Enum.toString(CM.Javascript.FeedbackType, type).toLowerCase());
                this._Glyph.innerHTML = glyph.ToString(16, 16, "#000000");
                CM.BridgeHacks.Clear(this._Message);
                CM.BridgeHacks.Div(this._Message, null, System.String.replaceAll(CM.Javascript.Page.HtmlEncode(message), "\n", "<br/>"));
                CM.BridgeHacks.Button(this._Message, buttonLabel, function (e) {
                    onClick();
                });
                CM.BridgeHacks.RemoveClass(this._Element, "hidden");
                this.IsShowing = true;
            }
        }
    });

    Bridge.define("CM.Javascript.FeedbackType", {
        $kind: "enum",
        statics: {
            fields: {
                Default: 0,
                Success: 1,
                Error: 2
            }
        }
    });

    Bridge.define("CM.Javascript.FindAccountRequest", {
        fields: {
            ID: null,
            Output: null,
            UI: null
        },
        ctors: {
            ctor: function (id) {
                this.$initialize();
                this.ID = id;
            }
        }
    });

    Bridge.define("CM.Javascript.FindTransactionRequest", {
        fields: {
            ID: null,
            Output: null
        },
        ctors: {
            ctor: function (id) {
                this.$initialize();
                this.ID = id;
            }
        }
    });

    Bridge.define("CM.Javascript.FindVoteRequest", {
        fields: {
            Output: null,
            PropositionID: 0,
            VoterID: null
        },
        ctors: {
            ctor: function (accountid, propositionID) {
                this.$initialize();
                this.VoterID = accountid;
                this.PropositionID = propositionID;
            }
        }
    });

    /**
     * Keeps track of which accounts the browser has accessed most recently, for quick access.
     Everything is kept in local storage.
     *
     * @class CM.Javascript.HistoryManager
     */
    Bridge.define("CM.Javascript.HistoryManager", {
        statics: {
            fields: {
                Instance: null
            },
            ctors: {
                init: function () {
                    this.Instance = new CM.Javascript.HistoryManager();
                }
            }
        },
        fields: {
            History: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.History = System.Array.init(0, null, System.String);
                if (window.localStorage != null && window.localStorage.getItem("history") != null) {
                    var hist = System.String.split(window.localStorage.getItem("history").toString(), [10].map(function(i) {{ return String.fromCharCode(i); }}));
                    if (hist != null) {
                        this.History = hist;
                    }
                }
            }
        },
        methods: {
            AddAccountToViewHistory: function (id) {
                for (var i = 0; i < this.History.length; i = (i + 1) | 0) {
                    if (System.String.compare(this.History[System.Array.index(i, this.History)], id, true) === 0) {
                        this.History.splice(i, 1);
                        break;
                    }
                }
                this.History.splice(0, 0, id);
                if (window.localStorage != null) {
                    window.localStorage.setItem("history", this.History.join("\n"));
                }
            },
            /**
             * For use by mobile hooks.
             *
             * @instance
             * @public
             * @this CM.Javascript.HistoryManager
             * @memberof CM.Javascript.HistoryManager
             * @param   {Array.<string>}    data
             * @return  {void}
             */
            OverwriteHistory: function (data) {
                this.History = data;
            }
        }
    });

    /**
     * A base class for listed Civil Money data.
     *
     * @abstract
     * @class CM.Javascript.ListResult
     */
    Bridge.define("CM.Javascript.ListResult", {
        fields: {
            Corroborators: null,
            Data: null,
            Element: null,
            OnCheckedChanged: null,
            OnClick: null,
            Counter: null,
            Inner: null,
            OriginalPath: null
        },
        ctors: {
            init: function () {
                this.Corroborators = new (System.Collections.Generic.List$1(System.String))();
            },
            ctor: function (data, path) {
                this.$initialize();                var $t;

                this.Data = data;
                this.OriginalPath = path;
                this.Element = ($t = document.createElement('div'), $t.className = "res", $t);
        }
    },
    methods: {
        OnCorroborated: function (peer) {
            if (this.Corroborators.contains(peer)) {
                return;
            }
            this.Corroborators.add(peer);
            if (this.Counter != null) {
                this.Counter.innerHTML = this.Corroborators.Count.toString();
            }
        }
    }
    });

    /**
     * A reference implementation for client message exchange with DHT peers.
     *
     * @class CM.Javascript.Peer
     */
    Bridge.define("CM.Javascript.Peer", {
        statics: {
            fields: {
                VerboseDebug: false
            },
            ctors: {
                init: function () {
                    this.VerboseDebug = false;
                }
            }
        },
        fields: {
            DesiredSubscribedIDs: null,
            DHT_ID: null,
            EndPoint: null,
            IsEndPointAnIP: false,
            Port: 0,
            PredecessorEndpoint: null,
            SentSubscribedIDs: null,
            SuccessorEndpoint: null,
            SupposedIPEndPoint: null,
            _ConnectionNotifications: null,
            _LastCommunication: null,
            _OnError: null,
            _OnIncomingRequest: null,
            _OnStateChanged: null,
            _Owner: null,
            _Reader: null,
            _Socket: null,
            _State: 0,
            _WaitHandles: null
        },
        props: {
            IdleTime: {
                get: function () {
                    if (this._State === CM.Javascript.PeerState.Connected) {
                        return System.DateTime.subdd(System.DateTime.getUtcNow(), this._LastCommunication);
                    } else {
                        return System.TimeSpan.zero;
                    }
                }
            },
            State: {
                get: function () {
                    return this._State;
                }
            }
        },
        ctors: {
            init: function () {
                this._LastCommunication = System.DateTime.getDefaultValue();
                this.DesiredSubscribedIDs = new (System.Collections.Generic.List$1(System.String))();
                this.SentSubscribedIDs = new (System.Collections.Generic.List$1(System.String))();
            },
            ctor: function (owner, endpoint, onStateChanged, onError, onIncomingMessage) {
                this.$initialize();
                this._Owner = owner;
                this.EndPoint = endpoint;
                this._OnStateChanged = onStateChanged;
                this._OnError = onError;
                this._OnIncomingRequest = onIncomingMessage;
                this._WaitHandles = new (System.Collections.Generic.Dictionary$2(System.String,CM.Javascript.Peer.SendAndReceiveRequest))();
                this._ConnectionNotifications = new (System.Collections.Generic.List$1(Function))();

                var parts = System.String.split(endpoint, [58].map(function(i) {{ return String.fromCharCode(i); }}));
                if (parts.length > 1) {
                    this.Port = System.Int32.parse(parts[System.Array.index(1, parts)]);
                } else {
                    this.Port = true ? 443 : 80;
                }
                // If the endpoint is an IP we can use it for DHT.
                this.IsEndPointAnIP = parts[System.Array.index(0, parts)].match("^\\d+\\.\\d+.\\d+.\\d+$") != null;
                if (this.IsEndPointAnIP) {
                    this.DHT_ID = CM.Helpers.DHT_IDForEndpoint(endpoint);
                }
            }
        },
        methods: {
            BeginConnect: function (onConnected) {
                if (this._Socket != null && (this._State === CM.Javascript.PeerState.Connected || this._State === CM.Javascript.PeerState.Connecting)) {
                    if (!Bridge.staticEquals(onConnected, null)) {
                        onConnected();
                    }
                    return;
                }

                // defer
                if (!Bridge.staticEquals(onConnected, null)) {
                    this._ConnectionNotifications.add(onConnected);
                }

                if (this._Reader == null) {
                    this._Reader = new CM.MessageReader(Bridge.fn.cacheBind(this, this.OnMessage), Bridge.fn.cacheBind(this, this.OnError));
                }

                this._State = CM.Javascript.PeerState.Connecting;
                this._OnStateChanged(this);

                var host = null;
                // Attempt to use seedX.civil.money if applicable.
                for (var i = 0; i < CM.Constants.Seeds.length; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.EndPoint, CM.Constants.Seeds[System.Array.index(i, CM.Constants.Seeds)].EndPoint)) {
                        host = CM.Constants.Seeds[System.Array.index(i, CM.Constants.Seeds)].Domain;
                        break;
                    }
                }
                // We will be connecting over WSS/TLS so must use our pseudo *.untrusted-server.com
                // host name and wild-card cert in order to pass web browser checks, even though we
                // don't trust servers by design.
                if (host == null) {
                    host = CM.DNS.EndpointToUntrustedDomain(this.EndPoint, true);
                }
                var ep = System.String.concat("wss://", host);
                System.Console.WriteLine(ep);
                this._Socket = new WebSocket(ep, CM.Constants.WebSocketProtocol);

                this._Socket.onopen = Bridge.fn.bind(this, $asm.$.CM.Javascript.Peer.f1);
                this._Socket.onclose = Bridge.fn.bind(this, $asm.$.CM.Javascript.Peer.f2);
                // This event is basically useless. There's never
                // any contextual information.
                //_Socket.OnError = (o) => {
                //    Console.WriteLine("Socket Error: " + o);
                //};
                this._Socket.onmessage = Bridge.fn.bind(this, $asm.$.CM.Javascript.Peer.f3);
            },
            Disconnect: function () {
                if (this._Socket != null) {
                    this._Socket.close(1000);
                    this.HandleClosure();
                }
            },
            Ping: function () {
                this.SendAndReceive("PING", new CM.Schema.PingRequest(), null, Bridge.fn.bind(this, $asm.$.CM.Javascript.Peer.f4));
            },
            Reply: function (original, status, playload, args) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    s, 
                    $e1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        if (playload === void 0) { playload = null; }
                                        if (args === void 0) { args = []; }
                                        m = playload || new CM.Message.ctor();
                                        m.Response = new CM.Message.ResponseHeader.ctor(status.$clone(), original.Request.NOnce, args);
                                        s = m.ToResponseString();
                                        try {
                                            this._LastCommunication = System.DateTime.getUtcNow();
                                            this._Socket.send(s);
                                            $tcs.setResult(true);
                                            return;
                                        }
                                        catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SendAndReceive: function (action, payload, args, onResult) {
                this.BeginConnect(Bridge.fn.bind(this, function () {
                    var $t;
                    if (payload == null) {
                        payload = new CM.Message.ctor();
                    }
                    payload.Request = new CM.Message.RequestHeader.$ctor1(action, System.String.replaceAll(System.Guid.newGuid().toString(), "-", "").substr(0, 5), args);

                    if (this._Socket == null || this._Socket.readyState !== 1) {
                        onResult(this, ($t = new CM.Message.ctor(), $t.Response = new CM.Message.ResponseHeader.ctor(CM.CMResult.E_Not_Connected.$clone(), payload.Request.NOnce), $t));
                        return;
                    }

                    var s = payload.ToRequestString();
                    var req = ($t = new CM.Javascript.Peer.SendAndReceiveRequest(), $t.Request = payload, $t.OnComplete = onResult, $t);
                    this._WaitHandles.set(payload.Request.NOnce, req);

                    try {
                        if (CM.Javascript.Peer.VerboseDebug) {
                            System.Console.WriteLine(System.String.concat("[", this.EndPoint, "] > ", payload.ToRequestString()));
                        }
                        this._LastCommunication = System.DateTime.getUtcNow();
                        this._Socket.send(s);
                    }
                    catch (ex) {
                        ex = System.Exception.create(ex);
                        this.OnError(System.String.concat("SendAndReceive failed with ", ex.Message));
                        onResult(this, ($t = new CM.Message.ctor(), $t.Response = new CM.Message.ResponseHeader.ctor(CM.CMResult.E_General_Failure.$clone(), payload.Request.NOnce), $t));
                    }
                }));
            },
            toString: function () {
                var $t;
                return ($t = this.SupposedIPEndPoint, $t != null ? $t : this.EndPoint);
            },
            FailPendingRequests: function () {
                var $t, $t1;
                var keys = new (System.Collections.Generic.List$1(System.String))();
                $t = Bridge.getEnumerator(this._WaitHandles.getKeys(), System.String);
                try {
                    while ($t.moveNext()) {
                        var k = $t.Current;
                        keys.add(k);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }for (var i = 0; i < keys.Count; i = (i + 1) | 0) {
                    var req = { };
                    if (this._WaitHandles.tryGetValue(keys.getItem(i), req)) {
                        req.v.Response = ($t1 = new CM.Message.ctor(), $t1.Response = new CM.Message.ResponseHeader.ctor(CM.CMResult.E_Not_Connected.$clone(), keys.getItem(i)), $t1);
                        req.v.OnComplete(this, req.v.Response);
                        this._WaitHandles.remove(keys.getItem(i));
                    }
                }
            },
            FlushConnectionNotifications: function () {
                while (this._ConnectionNotifications.Count > 0) {
                    if (!Bridge.staticEquals(this._ConnectionNotifications.getItem(0), null)) {
                        this._ConnectionNotifications.getItem(0)();
                    }
                    this._ConnectionNotifications.removeAt(0);
                }
            },
            HandleClosure: function () {
                if (this._Socket == null) {
                    return;
                }
                this._Socket = null;
                this.SentSubscribedIDs.clear();
                if (this._State === CM.Javascript.PeerState.Connected) {
                    this._State = CM.Javascript.PeerState.Disconnected;
                } else {
                    if (this._State !== CM.Javascript.PeerState.Disconnected) {
                        this._State = CM.Javascript.PeerState.Broken;
                    }
                }
                this._OnStateChanged(this);
                this.FlushConnectionNotifications();
                this.FailPendingRequests();
            },
            OnError: function (error) {
                this._OnError(this, error);
            },
            OnMessage: function (m) {
                if (m.Response != null && m.Response.IsValid) {
                    if (CM.Javascript.Peer.VerboseDebug) {
                        System.Console.WriteLine(System.String.concat("[", this.EndPoint, "] < ", m.ToResponseString()));
                    }
                    var req = { };
                    if (this._WaitHandles.tryGetValue(m.Response.NOnce, req)) {
                        req.v.Response = m;
                        req.v.OnComplete(this, m);
                        this._WaitHandles.remove(m.Response.NOnce);
                    } else {
                        this.OnError(System.String.concat("Unexpected Nonce ", m.Response.NOnce));
                    }
                } else if (m.Request != null && m.Request.IsValid) {
                    if (CM.Javascript.Peer.VerboseDebug) {
                        System.Console.WriteLine(System.String.concat("[", this.EndPoint, "] < ", m.ToRequestString()));
                    }
                    this._OnIncomingRequest(this, m);
                } else {
                    this.OnError("Invalid message received.");
                }
            },
            ReestablishSubscriptions: function () {
                for (var i = 0; i < this.DesiredSubscribedIDs.Count; i = (i + 1) | 0) {
                    this.TrySubscribe(this.DesiredSubscribedIDs.getItem(i));
                }
            },
            TrySubscribe: function (accountid) {
                if (this.SentSubscribedIDs.contains(accountid)) {
                    return;
                }
                this.SendAndReceive("SUBSCRIBE", null, System.Array.init([accountid], System.String), Bridge.fn.bind(this, function (p, res) {
                    if (res.Response.IsSuccessful && !this.SentSubscribedIDs.contains(accountid)) {
                        this.SentSubscribedIDs.add(accountid);
                    }
                }));
            },
            UpdateInfoFromPingResponse: function (e) {
                if (!this.IsEndPointAnIP) {
                    this.SupposedIPEndPoint = System.String.concat(e.MyIP, ":", this.Port);
                    this.DHT_ID = CM.Helpers.DHT_IDForEndpoint(this.SupposedIPEndPoint);
                }
                this.SuccessorEndpoint = e.SuccessorEndpoint;
                this.PredecessorEndpoint = e.PredecessorEndpoint;

                var peers = e.Seen;
                if (peers != null) {
                    this._Owner.AddPotentialPeers(peers);
                }
                this._OnStateChanged(this);
                this.FlushConnectionNotifications();
            }
        }
    });

    Bridge.ns("CM.Javascript.Peer", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.Peer, {
        f1: function (o) {
            this._OnStateChanged(this);
            this._LastCommunication = System.DateTime.getUtcNow();
            this.Ping();
        },
        f2: function (o) {
            System.Console.WriteLine(System.String.concat("Socket Close: ", o.reason));
            this.HandleClosure();
        },
        f3: function (o) {
            this._Reader.Write$1(o.data);
        },
        f4: function (p, e) {
            var pong = e.Cast(CM.Schema.PingResponse);
            if (pong.YourIP != null) {
                this._State = CM.Javascript.PeerState.Connected;
                this.UpdateInfoFromPingResponse(pong);
                this.ReestablishSubscriptions();
            } else {
                this._State = CM.Javascript.PeerState.Broken;
                if (this._Socket != null) {
                    this._Socket.close();
                }
            }
            // OnStateChanged will be raised by either
            // UpdateInfoFromPingResponse or Socket.OnClose
        }
    });

    Bridge.define("CM.Javascript.Peer.SendAndReceiveRequest", {
        fields: {
            OnComplete: null,
            Request: null,
            Response: null
        }
    });

    Bridge.define("CM.Javascript.PeerNotifyArgs", {
        fields: {
            Item: null,
            Peers: null
        },
        ctors: {
            ctor: function (item) {
                this.$initialize();
                this.Item = item;
                this.Peers = new (System.Collections.Generic.List$1(CM.Javascript.Peer))();
            }
        }
    });

    Bridge.define("CM.Javascript.PeerState", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * We've never tried this peer before.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.PeerState
                 * @constant
                 * @default 0
                 * @type CM.Javascript.PeerState
                 */
                Unknown: 0,
                /**
                 * Socket opened successfully, waiting on Ping reply.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.PeerState
                 * @constant
                 * @default 1
                 * @type CM.Javascript.PeerState
                 */
                Connecting: 1,
                /**
                 * We've connected and a valid Ping reply has been received.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.PeerState
                 * @constant
                 * @default 2
                 * @type CM.Javascript.PeerState
                 */
                Connected: 2,
                /**
                 * The connection was working once, but is now disconnected.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.PeerState
                 * @constant
                 * @default 3
                 * @type CM.Javascript.PeerState
                 */
                Disconnected: 3,
                /**
                 * The connection was attempted once, but it didn't work.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.PeerState
                 * @constant
                 * @default 4
                 * @type CM.Javascript.PeerState
                 */
                Broken: 4
            }
        }
    });

    /**
     * A tooltip style pop-up component
     *
     * @class CM.Javascript.PopupBubble
     */
    Bridge.define("CM.Javascript.PopupBubble", {
        fields: {
            _Bounds: null,
            _Details: null,
            _Element: null,
            _Summary: null,
            _Title: null
        },
        ctors: {
            init: function () {
                this._Bounds = new CM.Javascript.PopupBubble.Rect();
            },
            ctor: function (owner) {
                this.$initialize();
                this._Element = CM.BridgeHacks.Div(owner, "bubble");
                this._Title = CM.BridgeHacks.Div(this._Element, "title");
                this._Summary = CM.BridgeHacks.Div(this._Element, "summary");
                this._Details = CM.BridgeHacks.Div(this._Element, "details");
                this._Element.onmouseout = $asm.$.CM.Javascript.PopupBubble.f1;
                owner.onmousemove = Bridge.fn.bind(this, $asm.$.CM.Javascript.PopupBubble.f2);
            }
        },
        methods: {
            Hide: function () {
                this._Element.style.display = "none";
            },
            Show: function (control, title, summary, details) {
                var $t;
                this._Title.innerHTML = CM.Javascript.Page.HtmlEncode(title);
                this._Summary.innerHTML = CM.Javascript.Page.HtmlEncode(summary);
                this._Details.innerHTML = CM.Javascript.Page.HtmlEncode(details);
                var pos = CM.BridgeHacks.Position(control);
                this._Element.style.top = pos.Y + "px";
                this._Element.style.left = (((pos.X + 50) | 0)) + "px";
                this._Element.style.display = "block";
                this._Bounds = ($t = new CM.Javascript.PopupBubble.Rect(), $t.X = pos.X, $t.Y = pos.Y, $t.Width = ((this._Element.offsetWidth + 50) | 0), $t.Height = this._Element.offsetHeight, $t);
            }
        }
    });

    Bridge.ns("CM.Javascript.PopupBubble", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.PopupBubble, {
        f1: function (e) { },
        f2: function (e) {
            var pos = CM.BridgeHacks.Position(this._Element);
            var x = (e.pageX - this._Bounds.X) | 0;
            var y = (e.pageY - this._Bounds.Y) | 0;
            if (x >= 0 && x < this._Bounds.Width && y >= 0 && y < this._Bounds.Height) {
            } else {
                this._Element.style.display = "none";
            }
        }
    });

    Bridge.define("CM.Javascript.PopupBubble.Rect", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.Javascript.PopupBubble.Rect(); }
            }
        },
        fields: {
            Height: 0,
            Width: 0,
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1952671058, this.Height, this.Width, this.X, this.Y]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.Javascript.PopupBubble.Rect)) {
                    return false;
                }
                return Bridge.equals(this.Height, o.Height) && Bridge.equals(this.Width, o.Width) && Bridge.equals(this.X, o.X) && Bridge.equals(this.Y, o.Y);
            },
            $clone: function (to) {
                var s = to || new CM.Javascript.PopupBubble.Rect();
                s.Height = this.Height;
                s.Width = this.Width;
                s.X = this.X;
                s.Y = this.Y;
                return s;
            }
        }
    });

    Bridge.define("CM.Javascript.PutRequest", {
        fields: {
            Item: null,
            Statuses: null,
            UI: null
        },
        ctors: {
            ctor: function (item) {
                this.$initialize();
                this.Item = item;
                this.Statuses = new (System.Collections.Generic.List$1(CM.Javascript.CommitStatus))();
            }
        },
        methods: {
            UpdateUIProgress: function () {
                if (this.UI == null) {
                    return;
                }
                for (var i = 0; i < this.Statuses.Count; i = (i + 1) | 0) {
                    var st = this.Statuses.getItem(i);
                    var glyph = st.IsCommitted ? CM.Javascript.Assets.SVG.CircleTick : st.IsInError ? CM.Javascript.Assets.SVG.CircleError : CM.Javascript.Assets.SVG.Wait;
                    this.UI.Update(st.Peer, glyph, st.Status, st.StatusDetails);
                }
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode", {
        statics: {
            methods: {
                GenerateQRCode: function (text, width, height) {
                    var gen = new CM.Javascript.QRCode.QRCodeGenerator();
                    var qrCodeData = gen.CreateQrCode(text, CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.L, false);
                    var darkColorHex = "#000000";
                    var lightColorHex = "#ffffff";
                    var unitsPerModule = Bridge.Int.clip32(Math.floor(System.Convert.toDouble(Bridge.box(Math.min(width, height), System.Int32)) / qrCodeData.ModuleMatrix.Count));
                    var size = Bridge.Int.mul(qrCodeData.ModuleMatrix.Count, unitsPerModule);
                    var s = new System.Text.StringBuilder("<svg width=\"" + width + "\" height=\"" + height + "\" viewbox=\"0 0 " + size + " " + size + "\">");
                    var drawableSize = size;
                    for (var x = 0; x < drawableSize; x = (x + unitsPerModule) | 0) {
                        for (var y = 0; y < drawableSize; y = (y + unitsPerModule) | 0) {
                            var module = qrCodeData.ModuleMatrix.getItem(((((Bridge.Int.div((((y + unitsPerModule) | 0)), unitsPerModule)) | 0) - 1) | 0)).getItem(((((Bridge.Int.div((((x + unitsPerModule) | 0)), unitsPerModule)) | 0) - 1) | 0));
                            s.appendLine(System.String.concat("<rect x=\"" + x + "\" y=\"" + y + "\" width=\"" + unitsPerModule + "\" height=\"" + unitsPerModule + "\" fill=\"", (module ? darkColorHex : lightColorHex), "\" />"));
                        }
                    }
                    s.append("</svg>");
                    return s.toString();
                },
                Reverse: function (s) {
                    var tmp = System.Array.init(s.length, 0, System.Char);
                    var idx = (tmp.length - 1) | 0;
                    for (var i = 0; i < tmp.length; i = (i + 1) | 0) {
                        tmp[System.Array.index(i, tmp)] = s.charCodeAt(Bridge.identity(idx, (idx = (idx - 1) | 0)));
                    }
                    return String.fromCharCode.apply(null, tmp);
                }
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.BitArray", {
        fields: {
            Length: 0,
            _Data: null
        },
        ctors: {
            $ctor1: function (size) {
                this.$initialize();
                this._Data = System.Array.init(size, false, System.Boolean);
                this.Length = size;
            },
            ctor: function (values) {
                this.$initialize();
                this._Data = Bridge.cast(System.Array.clone(values), System.Array.type(System.Boolean));
                this.Length = this._Data.length;
            }
        },
        methods: {
            getItem: function (idx) {
                return this._Data[System.Array.index(idx, this._Data)];
            },
            setItem: function (idx, value) {
                this._Data[System.Array.index(idx, this._Data)] = value;
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeData", {
        fields: {
            _version: 0
        },
        props: {
            ModuleMatrix: null,
            version: {
                get: function () {
                    return this._version;
                }
            }
        },
        ctors: {
            ctor: function (version) {
                this.$initialize();
                this._version = version;
                var size = this.ModulesPerSideFromVersion(version);
                this.ModuleMatrix = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.BitArray))();
                for (var i = 0; i < size; i = (i + 1) | 0) {
                    this.ModuleMatrix.add(new CM.Javascript.QRCode.BitArray.$ctor1(size));
                }
            }
        },
        methods: {
            ModulesPerSideFromVersion: function (version) {
                return ((21 + Bridge.Int.mul((((version - 1) | 0)), 4)) | 0);
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator", {
        fields: {
            alignmentPatternBaseValues: null,
            alignmentPatternTable: null,
            alphanumEncDict: null,
            alphanumEncTable: null,
            capacityBaseValues: null,
            capacityECCBaseValues: null,
            capacityECCTable: null,
            capacityTable: null,
            galoisField: null,
            remainderBits: null
        },
        ctors: {
            init: function () {
                this.alignmentPatternBaseValues = System.Array.init([
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    18, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    22, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    26, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    30, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    34, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    22, 
                    38, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    24, 
                    42, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    26, 
                    46, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    28, 
                    50, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    30, 
                    54, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    32, 
                    58, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    34, 
                    62, 
                    0, 
                    0, 
                    0, 
                    0, 
                    6, 
                    26, 
                    46, 
                    66, 
                    0, 
                    0, 
                    0, 
                    6, 
                    26, 
                    48, 
                    70, 
                    0, 
                    0, 
                    0, 
                    6, 
                    26, 
                    50, 
                    74, 
                    0, 
                    0, 
                    0, 
                    6, 
                    30, 
                    54, 
                    78, 
                    0, 
                    0, 
                    0, 
                    6, 
                    30, 
                    56, 
                    82, 
                    0, 
                    0, 
                    0, 
                    6, 
                    30, 
                    58, 
                    86, 
                    0, 
                    0, 
                    0, 
                    6, 
                    34, 
                    62, 
                    90, 
                    0, 
                    0, 
                    0, 
                    6, 
                    28, 
                    50, 
                    72, 
                    94, 
                    0, 
                    0, 
                    6, 
                    26, 
                    50, 
                    74, 
                    98, 
                    0, 
                    0, 
                    6, 
                    30, 
                    54, 
                    78, 
                    102, 
                    0, 
                    0, 
                    6, 
                    28, 
                    54, 
                    80, 
                    106, 
                    0, 
                    0, 
                    6, 
                    32, 
                    58, 
                    84, 
                    110, 
                    0, 
                    0, 
                    6, 
                    30, 
                    58, 
                    86, 
                    114, 
                    0, 
                    0, 
                    6, 
                    34, 
                    62, 
                    90, 
                    118, 
                    0, 
                    0, 
                    6, 
                    26, 
                    50, 
                    74, 
                    98, 
                    122, 
                    0, 
                    6, 
                    30, 
                    54, 
                    78, 
                    102, 
                    126, 
                    0, 
                    6, 
                    26, 
                    52, 
                    78, 
                    104, 
                    130, 
                    0, 
                    6, 
                    30, 
                    56, 
                    82, 
                    108, 
                    134, 
                    0, 
                    6, 
                    34, 
                    60, 
                    86, 
                    112, 
                    138, 
                    0, 
                    6, 
                    30, 
                    58, 
                    86, 
                    114, 
                    142, 
                    0, 
                    6, 
                    34, 
                    62, 
                    90, 
                    118, 
                    146, 
                    0, 
                    6, 
                    30, 
                    54, 
                    78, 
                    102, 
                    126, 
                    150, 
                    6, 
                    24, 
                    50, 
                    76, 
                    102, 
                    128, 
                    154, 
                    6, 
                    28, 
                    54, 
                    80, 
                    106, 
                    132, 
                    158, 
                    6, 
                    32, 
                    58, 
                    84, 
                    110, 
                    136, 
                    162, 
                    6, 
                    26, 
                    54, 
                    82, 
                    110, 
                    138, 
                    166, 
                    6, 
                    30, 
                    58, 
                    86, 
                    114, 
                    142, 
                    170
                ], System.Int32);
                this.alphanumEncTable = System.Array.init([
                    48, 
                    49, 
                    50, 
                    51, 
                    52, 
                    53, 
                    54, 
                    55, 
                    56, 
                    57, 
                    65, 
                    66, 
                    67, 
                    68, 
                    69, 
                    70, 
                    71, 
                    72, 
                    73, 
                    74, 
                    75, 
                    76, 
                    77, 
                    78, 
                    79, 
                    80, 
                    81, 
                    82, 
                    83, 
                    84, 
                    85, 
                    86, 
                    87, 
                    88, 
                    89, 
                    90, 
                    32, 
                    36, 
                    37, 
                    42, 
                    43, 
                    45, 
                    46, 
                    47, 
                    58
                ], System.Char);
                this.capacityBaseValues = System.Array.init([
                    41, 
                    25, 
                    17, 
                    10, 
                    34, 
                    20, 
                    14, 
                    8, 
                    27, 
                    16, 
                    11, 
                    7, 
                    17, 
                    10, 
                    7, 
                    4, 
                    77, 
                    47, 
                    32, 
                    20, 
                    63, 
                    38, 
                    26, 
                    16, 
                    48, 
                    29, 
                    20, 
                    12, 
                    34, 
                    20, 
                    14, 
                    8, 
                    127, 
                    77, 
                    53, 
                    32, 
                    101, 
                    61, 
                    42, 
                    26, 
                    77, 
                    47, 
                    32, 
                    20, 
                    58, 
                    35, 
                    24, 
                    15, 
                    187, 
                    114, 
                    78, 
                    48, 
                    149, 
                    90, 
                    62, 
                    38, 
                    111, 
                    67, 
                    46, 
                    28, 
                    82, 
                    50, 
                    34, 
                    21, 
                    255, 
                    154, 
                    106, 
                    65, 
                    202, 
                    122, 
                    84, 
                    52, 
                    144, 
                    87, 
                    60, 
                    37, 
                    106, 
                    64, 
                    44, 
                    27, 
                    322, 
                    195, 
                    134, 
                    82, 
                    255, 
                    154, 
                    106, 
                    65, 
                    178, 
                    108, 
                    74, 
                    45, 
                    139, 
                    84, 
                    58, 
                    36, 
                    370, 
                    224, 
                    154, 
                    95, 
                    293, 
                    178, 
                    122, 
                    75, 
                    207, 
                    125, 
                    86, 
                    53, 
                    154, 
                    93, 
                    64, 
                    39, 
                    461, 
                    279, 
                    192, 
                    118, 
                    365, 
                    221, 
                    152, 
                    93, 
                    259, 
                    157, 
                    108, 
                    66, 
                    202, 
                    122, 
                    84, 
                    52, 
                    552, 
                    335, 
                    230, 
                    141, 
                    432, 
                    262, 
                    180, 
                    111, 
                    312, 
                    189, 
                    130, 
                    80, 
                    235, 
                    143, 
                    98, 
                    60, 
                    652, 
                    395, 
                    271, 
                    167, 
                    513, 
                    311, 
                    213, 
                    131, 
                    364, 
                    221, 
                    151, 
                    93, 
                    288, 
                    174, 
                    119, 
                    74, 
                    772, 
                    468, 
                    321, 
                    198, 
                    604, 
                    366, 
                    251, 
                    155, 
                    427, 
                    259, 
                    177, 
                    109, 
                    331, 
                    200, 
                    137, 
                    85, 
                    883, 
                    535, 
                    367, 
                    226, 
                    691, 
                    419, 
                    287, 
                    177, 
                    489, 
                    296, 
                    203, 
                    125, 
                    374, 
                    227, 
                    155, 
                    96, 
                    1022, 
                    619, 
                    425, 
                    262, 
                    796, 
                    483, 
                    331, 
                    204, 
                    580, 
                    352, 
                    241, 
                    149, 
                    427, 
                    259, 
                    177, 
                    109, 
                    1101, 
                    667, 
                    458, 
                    282, 
                    871, 
                    528, 
                    362, 
                    223, 
                    621, 
                    376, 
                    258, 
                    159, 
                    468, 
                    283, 
                    194, 
                    120, 
                    1250, 
                    758, 
                    520, 
                    320, 
                    991, 
                    600, 
                    412, 
                    254, 
                    703, 
                    426, 
                    292, 
                    180, 
                    530, 
                    321, 
                    220, 
                    136, 
                    1408, 
                    854, 
                    586, 
                    361, 
                    1082, 
                    656, 
                    450, 
                    277, 
                    775, 
                    470, 
                    322, 
                    198, 
                    602, 
                    365, 
                    250, 
                    154, 
                    1548, 
                    938, 
                    644, 
                    397, 
                    1212, 
                    734, 
                    504, 
                    310, 
                    876, 
                    531, 
                    364, 
                    224, 
                    674, 
                    408, 
                    280, 
                    173, 
                    1725, 
                    1046, 
                    718, 
                    442, 
                    1346, 
                    816, 
                    560, 
                    345, 
                    948, 
                    574, 
                    394, 
                    243, 
                    746, 
                    452, 
                    310, 
                    191, 
                    1903, 
                    1153, 
                    792, 
                    488, 
                    1500, 
                    909, 
                    624, 
                    384, 
                    1063, 
                    644, 
                    442, 
                    272, 
                    813, 
                    493, 
                    338, 
                    208, 
                    2061, 
                    1249, 
                    858, 
                    528, 
                    1600, 
                    970, 
                    666, 
                    410, 
                    1159, 
                    702, 
                    482, 
                    297, 
                    919, 
                    557, 
                    382, 
                    235, 
                    2232, 
                    1352, 
                    929, 
                    572, 
                    1708, 
                    1035, 
                    711, 
                    438, 
                    1224, 
                    742, 
                    509, 
                    314, 
                    969, 
                    587, 
                    403, 
                    248, 
                    2409, 
                    1460, 
                    1003, 
                    618, 
                    1872, 
                    1134, 
                    779, 
                    480, 
                    1358, 
                    823, 
                    565, 
                    348, 
                    1056, 
                    640, 
                    439, 
                    270, 
                    2620, 
                    1588, 
                    1091, 
                    672, 
                    2059, 
                    1248, 
                    857, 
                    528, 
                    1468, 
                    890, 
                    611, 
                    376, 
                    1108, 
                    672, 
                    461, 
                    284, 
                    2812, 
                    1704, 
                    1171, 
                    721, 
                    2188, 
                    1326, 
                    911, 
                    561, 
                    1588, 
                    963, 
                    661, 
                    407, 
                    1228, 
                    744, 
                    511, 
                    315, 
                    3057, 
                    1853, 
                    1273, 
                    784, 
                    2395, 
                    1451, 
                    997, 
                    614, 
                    1718, 
                    1041, 
                    715, 
                    440, 
                    1286, 
                    779, 
                    535, 
                    330, 
                    3283, 
                    1990, 
                    1367, 
                    842, 
                    2544, 
                    1542, 
                    1059, 
                    652, 
                    1804, 
                    1094, 
                    751, 
                    462, 
                    1425, 
                    864, 
                    593, 
                    365, 
                    3517, 
                    2132, 
                    1465, 
                    902, 
                    2701, 
                    1637, 
                    1125, 
                    692, 
                    1933, 
                    1172, 
                    805, 
                    496, 
                    1501, 
                    910, 
                    625, 
                    385, 
                    3669, 
                    2223, 
                    1528, 
                    940, 
                    2857, 
                    1732, 
                    1190, 
                    732, 
                    2085, 
                    1263, 
                    868, 
                    534, 
                    1581, 
                    958, 
                    658, 
                    405, 
                    3909, 
                    2369, 
                    1628, 
                    1002, 
                    3035, 
                    1839, 
                    1264, 
                    778, 
                    2181, 
                    1322, 
                    908, 
                    559, 
                    1677, 
                    1016, 
                    698, 
                    430, 
                    4158, 
                    2520, 
                    1732, 
                    1066, 
                    3289, 
                    1994, 
                    1370, 
                    843, 
                    2358, 
                    1429, 
                    982, 
                    604, 
                    1782, 
                    1080, 
                    742, 
                    457, 
                    4417, 
                    2677, 
                    1840, 
                    1132, 
                    3486, 
                    2113, 
                    1452, 
                    894, 
                    2473, 
                    1499, 
                    1030, 
                    634, 
                    1897, 
                    1150, 
                    790, 
                    486, 
                    4686, 
                    2840, 
                    1952, 
                    1201, 
                    3693, 
                    2238, 
                    1538, 
                    947, 
                    2670, 
                    1618, 
                    1112, 
                    684, 
                    2022, 
                    1226, 
                    842, 
                    518, 
                    4965, 
                    3009, 
                    2068, 
                    1273, 
                    3909, 
                    2369, 
                    1628, 
                    1002, 
                    2805, 
                    1700, 
                    1168, 
                    719, 
                    2157, 
                    1307, 
                    898, 
                    553, 
                    5253, 
                    3183, 
                    2188, 
                    1347, 
                    4134, 
                    2506, 
                    1722, 
                    1060, 
                    2949, 
                    1787, 
                    1228, 
                    756, 
                    2301, 
                    1394, 
                    958, 
                    590, 
                    5529, 
                    3351, 
                    2303, 
                    1417, 
                    4343, 
                    2632, 
                    1809, 
                    1113, 
                    3081, 
                    1867, 
                    1283, 
                    790, 
                    2361, 
                    1431, 
                    983, 
                    605, 
                    5836, 
                    3537, 
                    2431, 
                    1496, 
                    4588, 
                    2780, 
                    1911, 
                    1176, 
                    3244, 
                    1966, 
                    1351, 
                    832, 
                    2524, 
                    1530, 
                    1051, 
                    647, 
                    6153, 
                    3729, 
                    2563, 
                    1577, 
                    4775, 
                    2894, 
                    1989, 
                    1224, 
                    3417, 
                    2071, 
                    1423, 
                    876, 
                    2625, 
                    1591, 
                    1093, 
                    673, 
                    6479, 
                    3927, 
                    2699, 
                    1661, 
                    5039, 
                    3054, 
                    2099, 
                    1292, 
                    3599, 
                    2181, 
                    1499, 
                    923, 
                    2735, 
                    1658, 
                    1139, 
                    701, 
                    6743, 
                    4087, 
                    2809, 
                    1729, 
                    5313, 
                    3220, 
                    2213, 
                    1362, 
                    3791, 
                    2298, 
                    1579, 
                    972, 
                    2927, 
                    1774, 
                    1219, 
                    750, 
                    7089, 
                    4296, 
                    2953, 
                    1817, 
                    5596, 
                    3391, 
                    2331, 
                    1435, 
                    3993, 
                    2420, 
                    1663, 
                    1024, 
                    3057, 
                    1852, 
                    1273, 
                    784
                ], System.Int32);
                this.capacityECCBaseValues = System.Array.init([
                    19, 
                    7, 
                    1, 
                    19, 
                    0, 
                    0, 
                    16, 
                    10, 
                    1, 
                    16, 
                    0, 
                    0, 
                    13, 
                    13, 
                    1, 
                    13, 
                    0, 
                    0, 
                    9, 
                    17, 
                    1, 
                    9, 
                    0, 
                    0, 
                    34, 
                    10, 
                    1, 
                    34, 
                    0, 
                    0, 
                    28, 
                    16, 
                    1, 
                    28, 
                    0, 
                    0, 
                    22, 
                    22, 
                    1, 
                    22, 
                    0, 
                    0, 
                    16, 
                    28, 
                    1, 
                    16, 
                    0, 
                    0, 
                    55, 
                    15, 
                    1, 
                    55, 
                    0, 
                    0, 
                    44, 
                    26, 
                    1, 
                    44, 
                    0, 
                    0, 
                    34, 
                    18, 
                    2, 
                    17, 
                    0, 
                    0, 
                    26, 
                    22, 
                    2, 
                    13, 
                    0, 
                    0, 
                    80, 
                    20, 
                    1, 
                    80, 
                    0, 
                    0, 
                    64, 
                    18, 
                    2, 
                    32, 
                    0, 
                    0, 
                    48, 
                    26, 
                    2, 
                    24, 
                    0, 
                    0, 
                    36, 
                    16, 
                    4, 
                    9, 
                    0, 
                    0, 
                    108, 
                    26, 
                    1, 
                    108, 
                    0, 
                    0, 
                    86, 
                    24, 
                    2, 
                    43, 
                    0, 
                    0, 
                    62, 
                    18, 
                    2, 
                    15, 
                    2, 
                    16, 
                    46, 
                    22, 
                    2, 
                    11, 
                    2, 
                    12, 
                    136, 
                    18, 
                    2, 
                    68, 
                    0, 
                    0, 
                    108, 
                    16, 
                    4, 
                    27, 
                    0, 
                    0, 
                    76, 
                    24, 
                    4, 
                    19, 
                    0, 
                    0, 
                    60, 
                    28, 
                    4, 
                    15, 
                    0, 
                    0, 
                    156, 
                    20, 
                    2, 
                    78, 
                    0, 
                    0, 
                    124, 
                    18, 
                    4, 
                    31, 
                    0, 
                    0, 
                    88, 
                    18, 
                    2, 
                    14, 
                    4, 
                    15, 
                    66, 
                    26, 
                    4, 
                    13, 
                    1, 
                    14, 
                    194, 
                    24, 
                    2, 
                    97, 
                    0, 
                    0, 
                    154, 
                    22, 
                    2, 
                    38, 
                    2, 
                    39, 
                    110, 
                    22, 
                    4, 
                    18, 
                    2, 
                    19, 
                    86, 
                    26, 
                    4, 
                    14, 
                    2, 
                    15, 
                    232, 
                    30, 
                    2, 
                    116, 
                    0, 
                    0, 
                    182, 
                    22, 
                    3, 
                    36, 
                    2, 
                    37, 
                    132, 
                    20, 
                    4, 
                    16, 
                    4, 
                    17, 
                    100, 
                    24, 
                    4, 
                    12, 
                    4, 
                    13, 
                    274, 
                    18, 
                    2, 
                    68, 
                    2, 
                    69, 
                    216, 
                    26, 
                    4, 
                    43, 
                    1, 
                    44, 
                    154, 
                    24, 
                    6, 
                    19, 
                    2, 
                    20, 
                    122, 
                    28, 
                    6, 
                    15, 
                    2, 
                    16, 
                    324, 
                    20, 
                    4, 
                    81, 
                    0, 
                    0, 
                    254, 
                    30, 
                    1, 
                    50, 
                    4, 
                    51, 
                    180, 
                    28, 
                    4, 
                    22, 
                    4, 
                    23, 
                    140, 
                    24, 
                    3, 
                    12, 
                    8, 
                    13, 
                    370, 
                    24, 
                    2, 
                    92, 
                    2, 
                    93, 
                    290, 
                    22, 
                    6, 
                    36, 
                    2, 
                    37, 
                    206, 
                    26, 
                    4, 
                    20, 
                    6, 
                    21, 
                    158, 
                    28, 
                    7, 
                    14, 
                    4, 
                    15, 
                    428, 
                    26, 
                    4, 
                    107, 
                    0, 
                    0, 
                    334, 
                    22, 
                    8, 
                    37, 
                    1, 
                    38, 
                    244, 
                    24, 
                    8, 
                    20, 
                    4, 
                    21, 
                    180, 
                    22, 
                    12, 
                    11, 
                    4, 
                    12, 
                    461, 
                    30, 
                    3, 
                    115, 
                    1, 
                    116, 
                    365, 
                    24, 
                    4, 
                    40, 
                    5, 
                    41, 
                    261, 
                    20, 
                    11, 
                    16, 
                    5, 
                    17, 
                    197, 
                    24, 
                    11, 
                    12, 
                    5, 
                    13, 
                    523, 
                    22, 
                    5, 
                    87, 
                    1, 
                    88, 
                    415, 
                    24, 
                    5, 
                    41, 
                    5, 
                    42, 
                    295, 
                    30, 
                    5, 
                    24, 
                    7, 
                    25, 
                    223, 
                    24, 
                    11, 
                    12, 
                    7, 
                    13, 
                    589, 
                    24, 
                    5, 
                    98, 
                    1, 
                    99, 
                    453, 
                    28, 
                    7, 
                    45, 
                    3, 
                    46, 
                    325, 
                    24, 
                    15, 
                    19, 
                    2, 
                    20, 
                    253, 
                    30, 
                    3, 
                    15, 
                    13, 
                    16, 
                    647, 
                    28, 
                    1, 
                    107, 
                    5, 
                    108, 
                    507, 
                    28, 
                    10, 
                    46, 
                    1, 
                    47, 
                    367, 
                    28, 
                    1, 
                    22, 
                    15, 
                    23, 
                    283, 
                    28, 
                    2, 
                    14, 
                    17, 
                    15, 
                    721, 
                    30, 
                    5, 
                    120, 
                    1, 
                    121, 
                    563, 
                    26, 
                    9, 
                    43, 
                    4, 
                    44, 
                    397, 
                    28, 
                    17, 
                    22, 
                    1, 
                    23, 
                    313, 
                    28, 
                    2, 
                    14, 
                    19, 
                    15, 
                    795, 
                    28, 
                    3, 
                    113, 
                    4, 
                    114, 
                    627, 
                    26, 
                    3, 
                    44, 
                    11, 
                    45, 
                    445, 
                    26, 
                    17, 
                    21, 
                    4, 
                    22, 
                    341, 
                    26, 
                    9, 
                    13, 
                    16, 
                    14, 
                    861, 
                    28, 
                    3, 
                    107, 
                    5, 
                    108, 
                    669, 
                    26, 
                    3, 
                    41, 
                    13, 
                    42, 
                    485, 
                    30, 
                    15, 
                    24, 
                    5, 
                    25, 
                    385, 
                    28, 
                    15, 
                    15, 
                    10, 
                    16, 
                    932, 
                    28, 
                    4, 
                    116, 
                    4, 
                    117, 
                    714, 
                    26, 
                    17, 
                    42, 
                    0, 
                    0, 
                    512, 
                    28, 
                    17, 
                    22, 
                    6, 
                    23, 
                    406, 
                    30, 
                    19, 
                    16, 
                    6, 
                    17, 
                    1006, 
                    28, 
                    2, 
                    111, 
                    7, 
                    112, 
                    782, 
                    28, 
                    17, 
                    46, 
                    0, 
                    0, 
                    568, 
                    30, 
                    7, 
                    24, 
                    16, 
                    25, 
                    442, 
                    24, 
                    34, 
                    13, 
                    0, 
                    0, 
                    1094, 
                    30, 
                    4, 
                    121, 
                    5, 
                    122, 
                    860, 
                    28, 
                    4, 
                    47, 
                    14, 
                    48, 
                    614, 
                    30, 
                    11, 
                    24, 
                    14, 
                    25, 
                    464, 
                    30, 
                    16, 
                    15, 
                    14, 
                    16, 
                    1174, 
                    30, 
                    6, 
                    117, 
                    4, 
                    118, 
                    914, 
                    28, 
                    6, 
                    45, 
                    14, 
                    46, 
                    664, 
                    30, 
                    11, 
                    24, 
                    16, 
                    25, 
                    514, 
                    30, 
                    30, 
                    16, 
                    2, 
                    17, 
                    1276, 
                    26, 
                    8, 
                    106, 
                    4, 
                    107, 
                    1000, 
                    28, 
                    8, 
                    47, 
                    13, 
                    48, 
                    718, 
                    30, 
                    7, 
                    24, 
                    22, 
                    25, 
                    538, 
                    30, 
                    22, 
                    15, 
                    13, 
                    16, 
                    1370, 
                    28, 
                    10, 
                    114, 
                    2, 
                    115, 
                    1062, 
                    28, 
                    19, 
                    46, 
                    4, 
                    47, 
                    754, 
                    28, 
                    28, 
                    22, 
                    6, 
                    23, 
                    596, 
                    30, 
                    33, 
                    16, 
                    4, 
                    17, 
                    1468, 
                    30, 
                    8, 
                    122, 
                    4, 
                    123, 
                    1128, 
                    28, 
                    22, 
                    45, 
                    3, 
                    46, 
                    808, 
                    30, 
                    8, 
                    23, 
                    26, 
                    24, 
                    628, 
                    30, 
                    12, 
                    15, 
                    28, 
                    16, 
                    1531, 
                    30, 
                    3, 
                    117, 
                    10, 
                    118, 
                    1193, 
                    28, 
                    3, 
                    45, 
                    23, 
                    46, 
                    871, 
                    30, 
                    4, 
                    24, 
                    31, 
                    25, 
                    661, 
                    30, 
                    11, 
                    15, 
                    31, 
                    16, 
                    1631, 
                    30, 
                    7, 
                    116, 
                    7, 
                    117, 
                    1267, 
                    28, 
                    21, 
                    45, 
                    7, 
                    46, 
                    911, 
                    30, 
                    1, 
                    23, 
                    37, 
                    24, 
                    701, 
                    30, 
                    19, 
                    15, 
                    26, 
                    16, 
                    1735, 
                    30, 
                    5, 
                    115, 
                    10, 
                    116, 
                    1373, 
                    28, 
                    19, 
                    47, 
                    10, 
                    48, 
                    985, 
                    30, 
                    15, 
                    24, 
                    25, 
                    25, 
                    745, 
                    30, 
                    23, 
                    15, 
                    25, 
                    16, 
                    1843, 
                    30, 
                    13, 
                    115, 
                    3, 
                    116, 
                    1455, 
                    28, 
                    2, 
                    46, 
                    29, 
                    47, 
                    1033, 
                    30, 
                    42, 
                    24, 
                    1, 
                    25, 
                    793, 
                    30, 
                    23, 
                    15, 
                    28, 
                    16, 
                    1955, 
                    30, 
                    17, 
                    115, 
                    0, 
                    0, 
                    1541, 
                    28, 
                    10, 
                    46, 
                    23, 
                    47, 
                    1115, 
                    30, 
                    10, 
                    24, 
                    35, 
                    25, 
                    845, 
                    30, 
                    19, 
                    15, 
                    35, 
                    16, 
                    2071, 
                    30, 
                    17, 
                    115, 
                    1, 
                    116, 
                    1631, 
                    28, 
                    14, 
                    46, 
                    21, 
                    47, 
                    1171, 
                    30, 
                    29, 
                    24, 
                    19, 
                    25, 
                    901, 
                    30, 
                    11, 
                    15, 
                    46, 
                    16, 
                    2191, 
                    30, 
                    13, 
                    115, 
                    6, 
                    116, 
                    1725, 
                    28, 
                    14, 
                    46, 
                    23, 
                    47, 
                    1231, 
                    30, 
                    44, 
                    24, 
                    7, 
                    25, 
                    961, 
                    30, 
                    59, 
                    16, 
                    1, 
                    17, 
                    2306, 
                    30, 
                    12, 
                    121, 
                    7, 
                    122, 
                    1812, 
                    28, 
                    12, 
                    47, 
                    26, 
                    48, 
                    1286, 
                    30, 
                    39, 
                    24, 
                    14, 
                    25, 
                    986, 
                    30, 
                    22, 
                    15, 
                    41, 
                    16, 
                    2434, 
                    30, 
                    6, 
                    121, 
                    14, 
                    122, 
                    1914, 
                    28, 
                    6, 
                    47, 
                    34, 
                    48, 
                    1354, 
                    30, 
                    46, 
                    24, 
                    10, 
                    25, 
                    1054, 
                    30, 
                    2, 
                    15, 
                    64, 
                    16, 
                    2566, 
                    30, 
                    17, 
                    122, 
                    4, 
                    123, 
                    1992, 
                    28, 
                    29, 
                    46, 
                    14, 
                    47, 
                    1426, 
                    30, 
                    49, 
                    24, 
                    10, 
                    25, 
                    1096, 
                    30, 
                    24, 
                    15, 
                    46, 
                    16, 
                    2702, 
                    30, 
                    4, 
                    122, 
                    18, 
                    123, 
                    2102, 
                    28, 
                    13, 
                    46, 
                    32, 
                    47, 
                    1502, 
                    30, 
                    48, 
                    24, 
                    14, 
                    25, 
                    1142, 
                    30, 
                    42, 
                    15, 
                    32, 
                    16, 
                    2812, 
                    30, 
                    20, 
                    117, 
                    4, 
                    118, 
                    2216, 
                    28, 
                    40, 
                    47, 
                    7, 
                    48, 
                    1582, 
                    30, 
                    43, 
                    24, 
                    22, 
                    25, 
                    1222, 
                    30, 
                    10, 
                    15, 
                    67, 
                    16, 
                    2956, 
                    30, 
                    19, 
                    118, 
                    6, 
                    119, 
                    2334, 
                    28, 
                    18, 
                    47, 
                    31, 
                    48, 
                    1666, 
                    30, 
                    34, 
                    24, 
                    34, 
                    25, 
                    1276, 
                    30, 
                    20, 
                    15, 
                    61, 
                    16
                ], System.Int32);
                this.remainderBits = System.Array.init([
                    0, 
                    7, 
                    7, 
                    7, 
                    7, 
                    7, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    3, 
                    3, 
                    3, 
                    3, 
                    3, 
                    3, 
                    3, 
                    4, 
                    4, 
                    4, 
                    4, 
                    4, 
                    4, 
                    4, 
                    3, 
                    3, 
                    3, 
                    3, 
                    3, 
                    3, 
                    3, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0
                ], System.Int32);
            },
            ctor: function () {
                this.$initialize();
                this.CreateAntilogTable();
                this.CreateAlphanumEncDict();
                this.CreateCapacityTable();
                this.CreateCapacityECCTable();
                this.CreateAlignmentPatternTable();
            }
        },
        methods: {
            CreateQrCode: function (plainText, eccLevel, utf8BOM) {
                var $t, $t1;
                if (utf8BOM === void 0) { utf8BOM = false; }
                //var encoding = GetEncodingFromPlaintext(plainText);
                //var codedText = PlainTextToBinary(plainText, encoding, utf8BOM);
                //var dataInputLength = GetDataLength(encoding, plainText, codedText);
                var encoding = CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Byte;
                for (var i = 0; i < plainText.length; i = (i + 1) | 0) {
                    if (plainText.charCodeAt(i) > 255) {
                        utf8BOM = true;
                        break;
                    }
                }
                var codedText = this.PlainTextToBinary(plainText, encoding, utf8BOM);
                var dataInputLength = (Bridge.Int.div(codedText.length, 8)) | 0;
                var version = this.GetVersion(dataInputLength, encoding, eccLevel);

                var modeIndicator = this.DecToBin$1(encoding, 4);
                var countIndicator = this.DecToBin$1(dataInputLength, this.GetCountIndicatorLength(version, encoding));
                var bitString = System.String.concat(modeIndicator, countIndicator);

                bitString = System.String.concat(bitString, codedText);

                //Fill up data code word

                var eccInfo = new CM.Javascript.QRCode.QRCodeGenerator.ECCInfo(); // = capacityECCTable.Single(x => x.Version == version && x.ErrorCorrectionLevel.Equals(eccLevel));
                for (var i1 = 0; i1 < this.capacityECCTable.Count; i1 = (i1 + 1) | 0) {
                    if (this.capacityECCTable.getItem(i1).$clone().Version === version && System.Enum.equals(this.capacityECCTable.getItem(i1).$clone().ErrorCorrectionLevel, Bridge.box(eccLevel, CM.Javascript.QRCode.QRCodeGenerator.ECCLevel, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.ECCLevel)), CM.Javascript.QRCode.QRCodeGenerator.ECCLevel)) {
                        eccInfo = this.capacityECCTable.getItem(i1).$clone();
                        break;
                    }
                }
                var dataLength = Bridge.Int.mul(eccInfo.TotalDataCodewords, 8);
                var lengthDiff = (dataLength - bitString.length) | 0;
                if (lengthDiff > 0) {
                    bitString = System.String.concat(bitString, System.String.fromCharCount(48, Math.min(lengthDiff, 4)));
                }
                if ((bitString.length % 8) !== 0) {
                    bitString = System.String.concat(bitString, System.String.fromCharCount(48, ((8 - (bitString.length % 8)) | 0)));
                }
                while (bitString.length < dataLength) {
                    bitString = System.String.concat(bitString, "1110110000010001");
                }
                if (bitString.length > dataLength) {
                    bitString = bitString.substr(0, dataLength);
                }

                //Calculate error correction words
                var codeWordWithECC = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.CodewordBlock))();
                for (var i2 = 0; i2 < eccInfo.BlocksInGroup1; i2 = (i2 + 1) | 0) {
                    var bitStr = bitString.substr(Bridge.Int.mul(Bridge.Int.mul(i2, eccInfo.CodewordsInGroup1), 8), Bridge.Int.mul(eccInfo.CodewordsInGroup1, 8));
                    codeWordWithECC.add(($t = new CM.Javascript.QRCode.QRCodeGenerator.CodewordBlock(), $t.BitString = bitStr, $t.BlockNumber = ((i2 + 1) | 0), $t.GroupNumber = 1, $t.CodeWords = this.BinaryStringToBitBlockList(bitStr), $t.ECCWords = this.CalculateECCWords(bitStr, eccInfo.$clone()), $t));
                }
                bitString = bitString.substr(Bridge.Int.mul(Bridge.Int.mul(eccInfo.BlocksInGroup1, eccInfo.CodewordsInGroup1), 8));
                for (var i3 = 0; i3 < eccInfo.BlocksInGroup2; i3 = (i3 + 1) | 0) {
                    var bitStr1 = bitString.substr(Bridge.Int.mul(Bridge.Int.mul(i3, eccInfo.CodewordsInGroup2), 8), Bridge.Int.mul(eccInfo.CodewordsInGroup2, 8));
                    codeWordWithECC.add(($t = new CM.Javascript.QRCode.QRCodeGenerator.CodewordBlock(), $t.BitString = bitStr1, $t.BlockNumber = ((i3 + 1) | 0), $t.GroupNumber = 2, $t.CodeWords = this.BinaryStringToBitBlockList(bitStr1), $t.ECCWords = this.CalculateECCWords(bitStr1, eccInfo.$clone()), $t));
                }

                //Interleave code words
                var interleavedWordsSb = new System.Text.StringBuilder();
                for (var i4 = 0; i4 < Math.max(eccInfo.CodewordsInGroup1, eccInfo.CodewordsInGroup2); i4 = (i4 + 1) | 0) {
                    $t = Bridge.getEnumerator(codeWordWithECC);
                    try {
                        while ($t.moveNext()) {
                            var codeBlock = $t.Current.$clone();
                            if (codeBlock.CodeWords.length > i4) {
                                interleavedWordsSb.append(codeBlock.CodeWords[System.Array.index(i4, codeBlock.CodeWords)]);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}

                for (var i5 = 0; i5 < eccInfo.ECCPerBlock; i5 = (i5 + 1) | 0) {
                    $t1 = Bridge.getEnumerator(codeWordWithECC);
                    try {
                        while ($t1.moveNext()) {
                            var codeBlock1 = $t1.Current.$clone();
                            if (codeBlock1.ECCWords.length > i5) {
                                interleavedWordsSb.append(codeBlock1.ECCWords[System.Array.index(i5, codeBlock1.ECCWords)]);
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }}
                interleavedWordsSb.append(System.String.fromCharCount(48, this.remainderBits[System.Array.index(((version - 1) | 0), this.remainderBits)]));
                var interleavedData = interleavedWordsSb.toString();

                //Place interleaved data on module matrix
                var qr = { v : new CM.Javascript.QRCode.QRCodeData(version) };
                var blockedModules = { v : new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.Rectangle))() };
                CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.PlaceFinderPatterns(qr, blockedModules);
                CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.ReserveSeperatorAreas(qr.v.ModuleMatrix.Count, blockedModules);

                var alignmentPatternLocations = null;
                // alignmentPatternTable.Where(x => x.Version == version).Select(x => x.PatternPositions).First()
                for (var i6 = 0; i6 < this.alignmentPatternTable.Count; i6 = (i6 + 1) | 0) {
                    if (this.alignmentPatternTable.getItem(i6).$clone().Version === version) {
                        alignmentPatternLocations = this.alignmentPatternTable.getItem(i6).$clone().PatternPositions;
                        break;
                    }
                }
                CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.PlaceAlignmentPatterns(qr, alignmentPatternLocations, blockedModules);
                CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.PlaceTimingPatterns(qr, blockedModules);
                CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.PlaceDarkModule(qr, version, blockedModules);
                CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.ReserveVersionAreas(qr.v.ModuleMatrix.Count, version, blockedModules);
                CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.PlaceDataWords(qr, interleavedData, blockedModules);
                var maskVersion = CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskCode(qr, version, blockedModules);
                var formatStr = this.GetFormatString(eccLevel, maskVersion);

                CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.PlaceFormat(qr, formatStr);
                if (version >= 7) {
                    var versionString = this.GetVersionString(version);
                    CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.PlaceVersion(qr, versionString);
                }
                CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.AddQuietZone(qr);
                return qr.v;
            },
            BinaryStringToBitBlockList: function (bitString) {
                // return bitString.ToList().Select((x, i) => new { Index = i, Value = x })
                //     .GroupBy(x => x.Index / 8)
                //     .Select(x => String.Join("", x.Select(v => v.Value.ToString()).ToArray()))
                //     .ToList();
                var len = bitString.length;
                var tmp = System.Array.init(Bridge.Int.clip32(Math.ceil(len / 8.0)), null, System.String);
                var idx = 0;
                for (var i = 0; i < tmp.length && idx < len; i = (i + 1) | 0) {
                    var s = "";
                    for (var x = 0; x < 8 && idx < len; x = (x + 1) | 0) {
                        s = System.String.concat(s, String.fromCharCode(bitString.charCodeAt(Bridge.identity(idx, (idx = (idx + 1) | 0)))));
                    }
                    tmp[System.Array.index(i, tmp)] = s;
                }
                return tmp;
            },
            BinToDec: function (binStr) {
                return System.Convert.toNumberInBase(binStr, 2, 9);
            },
            CalculateECCWords: function (bitString, eccInfo) {
                var $t;
                var eccWords = eccInfo.ECCPerBlock;
                var messagePolynom = this.CalculateMessagePolynom(bitString);
                var generatorPolynom = this.CalculateGeneratorPolynom(eccWords);
                var count = messagePolynom.PolyItems.Count;
                for (var i = 0; i < count; i = (i + 1) | 0) {
                    messagePolynom.PolyItems.setItem(i, ($t = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem(), $t.Coefficient = messagePolynom.PolyItems.getItem(i).$clone().Coefficient, $t.Exponent = ((messagePolynom.PolyItems.getItem(i).$clone().Exponent + eccWords) | 0), $t));
                }

                var genLeadtermFactor = (messagePolynom.PolyItems.getItem(0).$clone().Exponent - generatorPolynom.PolyItems.getItem(0).$clone().Exponent) | 0;
                count = generatorPolynom.PolyItems.Count;
                for (var i1 = 0; i1 < count; i1 = (i1 + 1) | 0) {
                    generatorPolynom.PolyItems.setItem(i1, ($t = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem(), $t.Coefficient = generatorPolynom.PolyItems.getItem(i1).$clone().Coefficient, $t.Exponent = ((generatorPolynom.PolyItems.getItem(i1).$clone().Exponent + genLeadtermFactor) | 0), $t));
                }

                var leadTermSource = messagePolynom;
                count = messagePolynom.PolyItems.Count;
                for (var i2 = 0; i2 < count; i2 = (i2 + 1) | 0) {
                    if (leadTermSource.PolyItems.getItem(0).$clone().Coefficient === 0) { // First coefficient is already 0, simply remove it and continue
                        leadTermSource.PolyItems.removeAt(0);
                    } else {
                        var resPoly = this.MultiplyGeneratorPolynomByLeadterm(generatorPolynom, this.ConvertToAlphaNotation(leadTermSource).PolyItems.getItem(0).$clone(), i2);
                        resPoly = this.ConvertToDecNotation(resPoly);
                        resPoly = this.XORPolynoms(leadTermSource, resPoly);
                        leadTermSource = resPoly;
                    }
                }
                var ar = System.Array.init(leadTermSource.PolyItems.Count, null, System.String);
                for (var i3 = 0; i3 < leadTermSource.PolyItems.Count; i3 = (i3 + 1) | 0) {
                    ar[System.Array.index(i3, ar)] = this.DecToBin$1(leadTermSource.PolyItems.getItem(i3).$clone().Coefficient, 8);
                }
                return ar;
                //return leadTermSource.PolyItems.Select(x => DecToBin(x.Coefficient, 8)).ToList();
            },
            CalculateGeneratorPolynom: function (numEccWords) {
                var $t;
                var generatorPolynom = new CM.Javascript.QRCode.QRCodeGenerator.Polynom();
                generatorPolynom.PolyItems.addRange(System.Array.init([($t = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem(), $t.Coefficient = 0, $t.Exponent = 1, $t), ($t = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem(), $t.Coefficient = 0, $t.Exponent = 0, $t)], CM.Javascript.QRCode.QRCodeGenerator.PolynomItem));
                for (var i = 1; i <= ((numEccWords - 1) | 0); i = (i + 1) | 0) {
                    var multiplierPolynom = new CM.Javascript.QRCode.QRCodeGenerator.Polynom();
                    multiplierPolynom.PolyItems.addRange(System.Array.init([($t = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem(), $t.Coefficient = 0, $t.Exponent = 1, $t), ($t = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem(), $t.Coefficient = i, $t.Exponent = 0, $t)], CM.Javascript.QRCode.QRCodeGenerator.PolynomItem));

                    generatorPolynom = this.MultiplyAlphaPolynoms(generatorPolynom, multiplierPolynom);
                }

                return generatorPolynom;
            },
            CalculateMessagePolynom: function (bitString) {
                var $t;
                var messagePol = new CM.Javascript.QRCode.QRCodeGenerator.Polynom();
                for (var i = (((Bridge.Int.div(bitString.length, 8)) | 0) - 1) | 0; i >= 0; i = (i - 1) | 0) {
                    messagePol.PolyItems.add(($t = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem(), $t.Coefficient = this.BinToDec(bitString.substr(0, 8)), $t.Exponent = i, $t));
                    bitString = System.String.remove(bitString, 0, 8);
                }
                return messagePol;
            },
            ConvertToAlphaNotation: function (poly) {
                var src = poly.PolyItems;
                var count = src.Count;
                var ar = System.Array.init(count, function (){
                    return new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem();
                }, CM.Javascript.QRCode.QRCodeGenerator.PolynomItem);
                for (var i = 0; i < count; i = (i + 1) | 0) {
                    //newPoly.PolyItems.Add(new PolynomItem() {
                    var item = src.getItem(i).$clone();
                    ar[System.Array.index(i, ar)].Coefficient = (item.Coefficient !== 0 ? this.GetAlphaExpFromIntVal(item.Coefficient) : 0);
                    ar[System.Array.index(i, ar)].Exponent = item.Exponent;
                    //});
                }
                var newPoly = new CM.Javascript.QRCode.QRCodeGenerator.Polynom();
                newPoly.PolyItems = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.PolynomItem))(ar);
                return newPoly;
            },
            ConvertToDecNotation: function (poly) {
                var src = poly.PolyItems;
                var count = poly.PolyItems.Count;
                var ar = System.Array.init(count, function (){
                    return new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem();
                }, CM.Javascript.QRCode.QRCodeGenerator.PolynomItem);
                for (var i = 0; i < poly.PolyItems.Count; i = (i + 1) | 0) {
                    //newPoly.PolyItems.Add(new PolynomItem() {
                    var item = src.getItem(i).$clone();
                    ar[System.Array.index(i, ar)].Coefficient = this.GetIntValFromAlphaExp(item.Coefficient);
                    ar[System.Array.index(i, ar)].Exponent = item.Exponent;
                    // });
                }
                var newPoly = new CM.Javascript.QRCode.QRCodeGenerator.Polynom();
                newPoly.PolyItems = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.PolynomItem))(ar);
                return newPoly;
            },
            CreateAlignmentPatternTable: function () {
                var $t;
                this.alignmentPatternTable = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.AlignmentPattern))();

                for (var i = 0; i < (280); i = (i + 7) | 0) {
                    var points = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.Point))();
                    for (var x = 0; x < 7; x = (x + 1) | 0) {
                        if (this.alignmentPatternBaseValues[System.Array.index(((i + x) | 0), this.alignmentPatternBaseValues)] !== 0) {
                            for (var y = 0; y < 7; y = (y + 1) | 0) {
                                if (this.alignmentPatternBaseValues[System.Array.index(((i + y) | 0), this.alignmentPatternBaseValues)] !== 0) {
                                    var p = new CM.Javascript.QRCode.QRCodeGenerator.Point(((this.alignmentPatternBaseValues[System.Array.index(((i + x) | 0), this.alignmentPatternBaseValues)] - 2) | 0), ((this.alignmentPatternBaseValues[System.Array.index(((i + y) | 0), this.alignmentPatternBaseValues)] - 2) | 0));
                                    if (!points.contains(p)) {
                                        points.add(p);
                                    }
                                }
                            }
                        }
                    }

                    this.alignmentPatternTable.add(($t = new CM.Javascript.QRCode.QRCodeGenerator.AlignmentPattern(), $t.Version = ((Bridge.Int.div((((i + 7) | 0)), 7)) | 0), $t.PatternPositions = points, $t));
                }
            },
            CreateAlphanumEncDict: function () {
                this.alphanumEncDict = new (System.Collections.Generic.Dictionary$2(System.Char,System.Int32))();
                //alphanumEncTable.ToList().Select((x, i) => new { Chr = x, Index = i }).ToList().ForEach(x => alphanumEncDict.Add(x.Chr, x.Index));
                for (var i = 0; i < this.alphanumEncTable.length; i = (i + 1) | 0) {
                    this.alphanumEncDict.set(this.alphanumEncTable[System.Array.index(i, this.alphanumEncTable)], i);
                }
            },
            CreateAntilogTable: function () {
                var $t;
                this.galoisField = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.Antilog))();
                var gfItem;

                for (var i = 0; i < 256; i = (i + 1) | 0) {
                    gfItem = Bridge.Int.clip32(Math.pow(2, i));

                    if (i > 7) {
                        gfItem = Bridge.Int.mul(this.galoisField.getItem(((i - 1) | 0)).$clone().IntegerValue, 2);
                    }
                    if (gfItem > 255) {
                        gfItem = gfItem ^ 285;
                    }
                    this.galoisField.add(($t = new CM.Javascript.QRCode.QRCodeGenerator.Antilog(), $t.ExponentAlpha = i, $t.IntegerValue = gfItem, $t));
                }
            },
            CreateCapacityECCTable: function () {
                var $t;
                this.capacityECCTable = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.ECCInfo))();
                for (var i = 0; i < (960); i = (i + (24)) | 0) {
                    this.capacityECCTable.addRange(System.Array.init([($t = new CM.Javascript.QRCode.QRCodeGenerator.ECCInfo(), $t.Version = ((Bridge.Int.div((((i + 24) | 0)), 24)) | 0), $t.ErrorCorrectionLevel = CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.L, $t.TotalDataCodewords = this.capacityECCBaseValues[System.Array.index(i, this.capacityECCBaseValues)], $t.ECCPerBlock = this.capacityECCBaseValues[System.Array.index(((i + 1) | 0), this.capacityECCBaseValues)], $t.BlocksInGroup1 = this.capacityECCBaseValues[System.Array.index(((i + 2) | 0), this.capacityECCBaseValues)], $t.CodewordsInGroup1 = this.capacityECCBaseValues[System.Array.index(((i + 3) | 0), this.capacityECCBaseValues)], $t.BlocksInGroup2 = this.capacityECCBaseValues[System.Array.index(((i + 4) | 0), this.capacityECCBaseValues)], $t.CodewordsInGroup2 = this.capacityECCBaseValues[System.Array.index(((i + 5) | 0), this.capacityECCBaseValues)], $t), ($t = new CM.Javascript.QRCode.QRCodeGenerator.ECCInfo(), $t.Version = ((Bridge.Int.div((((i + 24) | 0)), 24)) | 0), $t.ErrorCorrectionLevel = CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.M, $t.TotalDataCodewords = this.capacityECCBaseValues[System.Array.index(((i + 6) | 0), this.capacityECCBaseValues)], $t.ECCPerBlock = this.capacityECCBaseValues[System.Array.index(((i + 7) | 0), this.capacityECCBaseValues)], $t.BlocksInGroup1 = this.capacityECCBaseValues[System.Array.index(((i + 8) | 0), this.capacityECCBaseValues)], $t.CodewordsInGroup1 = this.capacityECCBaseValues[System.Array.index(((i + 9) | 0), this.capacityECCBaseValues)], $t.BlocksInGroup2 = this.capacityECCBaseValues[System.Array.index(((i + 10) | 0), this.capacityECCBaseValues)], $t.CodewordsInGroup2 = this.capacityECCBaseValues[System.Array.index(((i + 11) | 0), this.capacityECCBaseValues)], $t), ($t = new CM.Javascript.QRCode.QRCodeGenerator.ECCInfo(), $t.Version = ((Bridge.Int.div((((i + 24) | 0)), 24)) | 0), $t.ErrorCorrectionLevel = CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.Q, $t.TotalDataCodewords = this.capacityECCBaseValues[System.Array.index(((i + 12) | 0), this.capacityECCBaseValues)], $t.ECCPerBlock = this.capacityECCBaseValues[System.Array.index(((i + 13) | 0), this.capacityECCBaseValues)], $t.BlocksInGroup1 = this.capacityECCBaseValues[System.Array.index(((i + 14) | 0), this.capacityECCBaseValues)], $t.CodewordsInGroup1 = this.capacityECCBaseValues[System.Array.index(((i + 15) | 0), this.capacityECCBaseValues)], $t.BlocksInGroup2 = this.capacityECCBaseValues[System.Array.index(((i + 16) | 0), this.capacityECCBaseValues)], $t.CodewordsInGroup2 = this.capacityECCBaseValues[System.Array.index(((i + 17) | 0), this.capacityECCBaseValues)], $t), ($t = new CM.Javascript.QRCode.QRCodeGenerator.ECCInfo(), $t.Version = ((Bridge.Int.div((((i + 24) | 0)), 24)) | 0), $t.ErrorCorrectionLevel = CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.H, $t.TotalDataCodewords = this.capacityECCBaseValues[System.Array.index(((i + 18) | 0), this.capacityECCBaseValues)], $t.ECCPerBlock = this.capacityECCBaseValues[System.Array.index(((i + 19) | 0), this.capacityECCBaseValues)], $t.BlocksInGroup1 = this.capacityECCBaseValues[System.Array.index(((i + 20) | 0), this.capacityECCBaseValues)], $t.CodewordsInGroup1 = this.capacityECCBaseValues[System.Array.index(((i + 21) | 0), this.capacityECCBaseValues)], $t.BlocksInGroup2 = this.capacityECCBaseValues[System.Array.index(((i + 22) | 0), this.capacityECCBaseValues)], $t.CodewordsInGroup2 = this.capacityECCBaseValues[System.Array.index(((i + 23) | 0), this.capacityECCBaseValues)], $t)], CM.Javascript.QRCode.QRCodeGenerator.ECCInfo));
                }
            },
            CreateCapacityTable: function () {
                var $t;
                this.capacityTable = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.VersionInfo))();
                for (var i = 0; i < (640); i = (i + 16) | 0) {
                    this.capacityTable.add(($t = new CM.Javascript.QRCode.QRCodeGenerator.VersionInfo(), $t.Version = ((Bridge.Int.div((((i + 16) | 0)), 16)) | 0), $t.Details = Bridge.fn.bind(this, function (_o5) {
                            var $t1;
                            _o5.add(($t1 = new CM.Javascript.QRCode.QRCodeGenerator.VersionInfoDetails(), $t1.ErrorCorrectionLevel = CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.L, $t1.CapacityDict = Bridge.fn.bind(this, function (_o1) {
                                    _o1.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Numeric, this.capacityBaseValues[System.Array.index(i, this.capacityBaseValues)]);
                                    _o1.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Alphanumeric, this.capacityBaseValues[System.Array.index(((i + 1) | 0), this.capacityBaseValues)]);
                                    _o1.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Byte, this.capacityBaseValues[System.Array.index(((i + 2) | 0), this.capacityBaseValues)]);
                                    _o1.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Kanji, this.capacityBaseValues[System.Array.index(((i + 3) | 0), this.capacityBaseValues)]);
                                    return _o1;
                                })(new (System.Collections.Generic.Dictionary$2(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode,System.Int32))()), $t1));
                            _o5.add(($t1 = new CM.Javascript.QRCode.QRCodeGenerator.VersionInfoDetails(), $t1.ErrorCorrectionLevel = CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.M, $t1.CapacityDict = Bridge.fn.bind(this, function (_o2) {
                                    _o2.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Numeric, this.capacityBaseValues[System.Array.index(((i + 4) | 0), this.capacityBaseValues)]);
                                    _o2.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Alphanumeric, this.capacityBaseValues[System.Array.index(((i + 5) | 0), this.capacityBaseValues)]);
                                    _o2.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Byte, this.capacityBaseValues[System.Array.index(((i + 6) | 0), this.capacityBaseValues)]);
                                    _o2.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Kanji, this.capacityBaseValues[System.Array.index(((i + 7) | 0), this.capacityBaseValues)]);
                                    return _o2;
                                })(new (System.Collections.Generic.Dictionary$2(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode,System.Int32))()), $t1));
                            _o5.add(($t1 = new CM.Javascript.QRCode.QRCodeGenerator.VersionInfoDetails(), $t1.ErrorCorrectionLevel = CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.Q, $t1.CapacityDict = Bridge.fn.bind(this, function (_o3) {
                                    _o3.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Numeric, this.capacityBaseValues[System.Array.index(((i + 8) | 0), this.capacityBaseValues)]);
                                    _o3.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Alphanumeric, this.capacityBaseValues[System.Array.index(((i + 9) | 0), this.capacityBaseValues)]);
                                    _o3.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Byte, this.capacityBaseValues[System.Array.index(((i + 10) | 0), this.capacityBaseValues)]);
                                    _o3.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Kanji, this.capacityBaseValues[System.Array.index(((i + 11) | 0), this.capacityBaseValues)]);
                                    return _o3;
                                })(new (System.Collections.Generic.Dictionary$2(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode,System.Int32))()), $t1));
                            _o5.add(($t1 = new CM.Javascript.QRCode.QRCodeGenerator.VersionInfoDetails(), $t1.ErrorCorrectionLevel = CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.H, $t1.CapacityDict = Bridge.fn.bind(this, function (_o4) {
                                    _o4.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Numeric, this.capacityBaseValues[System.Array.index(((i + 12) | 0), this.capacityBaseValues)]);
                                    _o4.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Alphanumeric, this.capacityBaseValues[System.Array.index(((i + 13) | 0), this.capacityBaseValues)]);
                                    _o4.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Byte, this.capacityBaseValues[System.Array.index(((i + 14) | 0), this.capacityBaseValues)]);
                                    _o4.add(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Kanji, this.capacityBaseValues[System.Array.index(((i + 15) | 0), this.capacityBaseValues)]);
                                    return _o4;
                                })(new (System.Collections.Generic.Dictionary$2(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode,System.Int32))()), $t1));
                            return _o5;
                        })(new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.VersionInfoDetails))()), $t));
                }
            },
            DecToBin: function (decNum) {
                return System.Convert.toStringInBase(decNum, 2, 9);
            },
            DecToBin$1: function (decNum, padLeftUpTo) {
                var binStr = this.DecToBin(decNum);
                return System.String.alignString(binStr, padLeftUpTo, 48);
            },
            GetAlphaExpFromIntVal: function (intVal) {
                //return galoisField.Where(alog => alog.IntegerValue == intVal).Select(alog => alog.ExponentAlpha).First();
                for (var i = 0; i < this.galoisField.Count; i = (i + 1) | 0) {
                    if (this.galoisField.getItem(i).$clone().IntegerValue === intVal) {
                        return this.galoisField.getItem(i).$clone().ExponentAlpha;
                    }
                }
                throw new System.Exception();
            },
            GetCountIndicatorLength: function (version, encMode) {
                if (version < 10) {
                    if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Numeric, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                        return 10;
                    } else {
                        if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Alphanumeric, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                            return 9;
                        } else {
                            return 8;
                        }
                    }
                } else if (version < 27) {
                    if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Numeric, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                        return 12;
                    } else {
                        if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Alphanumeric, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                            return 11;
                        } else {
                            if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Byte, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                                return 16;
                            } else {
                                return 10;
                            }
                        }
                    }
                } else {
                    if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Numeric, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                        return 14;
                    } else {
                        if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Alphanumeric, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                            return 13;
                        } else {
                            if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Byte, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                                return 16;
                            } else {
                                return 12;
                            }
                        }
                    }
                }
            },
            GetEncodingFromPlaintext: function (plainText) {
                var enc = CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Numeric;
                for (var i = 0; i < plainText.length; i = (i + 1) | 0) {
                    var c = plainText.charCodeAt(i);
                    if (!System.Char.isDigit(c)) {
                        enc = CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Alphanumeric;
                    }
                    if (!(System.Char.isDigit(c) || System.Char.isLetter(c))) {
                        enc = CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Byte;
                    }
                }
                return enc;
                // if (plainText.All(c => "0123456789".Contains(c)))
                //     return EncodingMode.Numeric;
                // else if (plainText.All(c => alphanumEncTable.Contains(c)))
                //     return EncodingMode.Alphanumeric;
                // else
                //     return EncodingMode.Byte;
            },
            GetFormatString: function (level, maskVersion) {
                var generator = "10100110111";
                var fStrMask = "101010000010010";

                var fStr = (level === CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.L) ? "01" : (level === CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.M) ? "00" : (level === CM.Javascript.QRCode.QRCodeGenerator.ECCLevel.Q) ? "11" : "10";
                fStr = System.String.concat(fStr, (this.DecToBin$1(maskVersion, 3)));
                var fStrEcc = System.String.trimStart(System.String.alignString(fStr, -15, 48), [48]);
                while (fStrEcc.length > 10) {
                    var sb = new System.Text.StringBuilder();
                    generator = System.String.alignString(generator, -fStrEcc.length, 48);
                    for (var i = 0; i < fStrEcc.length; i = (i + 1) | 0) {
                        sb.append((System.Convert.toInt32(Bridge.box(fStrEcc.charCodeAt(i), System.Char, String.fromCharCode, System.Char.getHashCode)) ^ System.Convert.toInt32(Bridge.box(generator.charCodeAt(i), System.Char, String.fromCharCode, System.Char.getHashCode))).toString());
                    }
                    fStrEcc = System.String.trimStart(sb.toString(), [48]);
                }
                fStrEcc = System.String.alignString(fStrEcc, 10, 48);
                fStr = System.String.concat(fStr, fStrEcc);

                var sbMask = new System.Text.StringBuilder();
                for (var i1 = 0; i1 < fStr.length; i1 = (i1 + 1) | 0) {
                    sbMask.append((System.Convert.toInt32(Bridge.box(fStr.charCodeAt(i1), System.Char, String.fromCharCode, System.Char.getHashCode)) ^ System.Convert.toInt32(Bridge.box(fStrMask.charCodeAt(i1), System.Char, String.fromCharCode, System.Char.getHashCode))).toString());
                }
                return sbMask.toString();
            },
            GetIntValFromAlphaExp: function (exp) {
                //return galoisField.Where(alog => alog.ExponentAlpha == exp).Select(alog => alog.IntegerValue).First();
                for (var i = 0; i < this.galoisField.Count; i = (i + 1) | 0) {
                    if (this.galoisField.getItem(i).$clone().ExponentAlpha === exp) {
                        return this.galoisField.getItem(i).$clone().IntegerValue;
                    }
                }
                throw new System.Exception();
            },
            GetVersion: function (length, encMode, eccLevel) {
                //var version = capacityTable.Where(
                //    x => x.Details.Count(
                //        y => (y.ErrorCorrectionLevel == eccLevel
                //              && y.CapacityDict[encMode] >= Convert.ToInt32(length)
                //              )
                //        ) > 0
                //  ).Select(x => new {
                //      version = x.Version,
                //      capacity = x.Details.Single(y => y.ErrorCorrectionLevel == eccLevel)
                //                                .CapacityDict[encMode]
                //  }).Min(x => x.version);
                var version = 2147483647;
                for (var i = 0; i < this.capacityTable.Count; i = (i + 1) | 0) {
                    var details = this.capacityTable.getItem(i).$clone().Details;
                    if (version > this.capacityTable.getItem(i).$clone().Version) {
                        for (var x = 0; x < details.Count; x = (x + 1) | 0) {
                            if (details.getItem(x).$clone().ErrorCorrectionLevel === eccLevel && details.getItem(x).$clone().CapacityDict.get(encMode) >= length) {
                                version = this.capacityTable.getItem(i).$clone().Version;
                            }
                        }
                    }
                }
                return version;
            },
            GetVersionString: function (version) {
                var generator = "1111100100101";

                var vStr = this.DecToBin$1(version, 6);
                var vStrEcc = System.String.trimStart(System.String.alignString(vStr, -18, 48), [48]);
                while (vStrEcc.length > 12) {
                    var sb = new System.Text.StringBuilder();
                    generator = System.String.alignString(generator, -vStrEcc.length, 48);
                    for (var i = 0; i < vStrEcc.length; i = (i + 1) | 0) {
                        sb.append((System.Convert.toInt32(Bridge.box(vStrEcc.charCodeAt(i), System.Char, String.fromCharCode, System.Char.getHashCode)) ^ System.Convert.toInt32(Bridge.box(generator.charCodeAt(i), System.Char, String.fromCharCode, System.Char.getHashCode))).toString());
                    }
                    vStrEcc = System.String.trimStart(sb.toString(), [48]);
                }
                vStrEcc = System.String.alignString(vStrEcc, 12, 48);
                vStr = System.String.concat(vStr, vStrEcc);

                return vStr;
            },
            MultiplyAlphaPolynoms: function (polynomBase, polynomMultiplier) {
                var $t, $t1, $t2, $t3, $t4;
                var resultPolynom = new CM.Javascript.QRCode.QRCodeGenerator.Polynom();
                $t = Bridge.getEnumerator(polynomMultiplier.PolyItems);
                try {
                    while ($t.moveNext()) {
                        var polItemBase = $t.Current.$clone();
                        $t1 = Bridge.getEnumerator(polynomBase.PolyItems);
                        try {
                            while ($t1.moveNext()) {
                                var polItemMulti = $t1.Current.$clone();
                                var polItemRes = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem();
                                polItemRes.Coefficient = this.ShrinkAlphaExp(((polItemBase.Coefficient + polItemMulti.Coefficient) | 0));
                                polItemRes.Exponent = (((polItemBase.Exponent + polItemMulti.Exponent) | 0));
                                resultPolynom.PolyItems.add(polItemRes.$clone());
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }//var exponentsToGlue = resultPolynom.PolyItems.GroupBy(x => x.Exponent).Where(x => x.Count() > 1).Select(x => x.First().Exponent);
                var exponentsToGlue = new (System.Collections.Generic.List$1(System.Int32))();
                var dic = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.PolynomItem)))();
                for (var i = 0; i < resultPolynom.PolyItems.Count; i = (i + 1) | 0) {
                    var exp = resultPolynom.PolyItems.getItem(i).$clone().Exponent;
                    var ar = { };
                    if (!dic.tryGetValue(exp, ar)) {
                        ar.v = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.PolynomItem))();
                        dic.set(exp, ar.v);
                    }
                    ar.v.add(resultPolynom.PolyItems.getItem(i).$clone());
                }
                $t2 = Bridge.getEnumerator(dic.getValues(), System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.PolynomItem));
                try {
                    while ($t2.moveNext()) {
                        var dics = $t2.Current;
                        if (dics.Count > 1) {
                            exponentsToGlue.add(dics.getItem(0).$clone().Exponent);
                        }
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$dispose();
                    }
                }
                var gluedPolynoms = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.PolynomItem))();
                $t3 = Bridge.getEnumerator(exponentsToGlue);
                try {
                    while ($t3.moveNext()) {
                        var exponent = $t3.Current;
                        var polynomFixed = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem();
                        polynomFixed.Exponent = exponent;
                        var coefficient = 0;
                        $t4 = Bridge.getEnumerator(resultPolynom.PolyItems);
                        try {
                            while ($t4.moveNext()) {
                                var polynomOld = $t4.Current.$clone(); //.Where(x => x.Exponent == exponent)) {
                                if (polynomOld.Exponent === exponent) {
                                    coefficient = coefficient ^ (this.GetIntValFromAlphaExp(polynomOld.Coefficient));
                                }
                            }
                        } finally {
                            if (Bridge.is($t4, System.IDisposable)) {
                                $t4.System$IDisposable$dispose();
                            }
                        }polynomFixed.Coefficient = this.GetAlphaExpFromIntVal(coefficient);
                        gluedPolynoms.add(polynomFixed.$clone());
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$dispose();
                    }
                }//resultPolynom.PolyItems.RemoveAll(x => exponentsToGlue.Contains(x.Exponent));
                for (var i1 = 0; i1 < resultPolynom.PolyItems.Count; i1 = (i1 + 1) | 0) {
                    if (exponentsToGlue.contains(resultPolynom.PolyItems.getItem(i1).$clone().Exponent)) {
                        resultPolynom.PolyItems.removeAt(i1);
                        i1 = (i1 - 1) | 0;
                    }
                }
                resultPolynom.PolyItems.addRange(gluedPolynoms);
                //resultPolynom.PolyItems = resultPolynom.PolyItems.OrderByDescending(x => x.Exponent).ToList();
                resultPolynom.PolyItems.sort($asm.$.CM.Javascript.QRCode.QRCodeGenerator.f1);
                return resultPolynom;
            },
            MultiplyGeneratorPolynomByLeadterm: function (genPolynom, leadTerm, lowerExponentBy) {
                var $t;
                var resultPolynom = new CM.Javascript.QRCode.QRCodeGenerator.Polynom();
                $t = Bridge.getEnumerator(genPolynom.PolyItems);
                try {
                    while ($t.moveNext()) {
                        var polItemBase = $t.Current.$clone();
                        var polItemRes = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem();
                        polItemRes.Coefficient = (((polItemBase.Coefficient + leadTerm.Coefficient) | 0)) % 255;
                        polItemRes.Exponent = (polItemBase.Exponent - lowerExponentBy) | 0;
                        resultPolynom.PolyItems.add(polItemRes.$clone());
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }return resultPolynom;
            },
            PlainTextToBinary: function (plainText, encMode, utf8BOM) {
                if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Numeric, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                    return this.PlainTextToBinaryNumeric(plainText);
                } else {
                    if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Alphanumeric, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                        return this.PlainTextToBinaryAlphanumeric(plainText);
                    } else {
                        if (System.Enum.equals(encMode, Bridge.box(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode.Byte, CM.Javascript.QRCode.QRCodeGenerator.EncodingMode, System.Enum.toStringFn(CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)), CM.Javascript.QRCode.QRCodeGenerator.EncodingMode)) {
                            return this.PlainTextToBinaryByte(plainText, utf8BOM);
                        } else {
                            return "";
                        }
                    }
                }
            },
            PlainTextToBinaryAlphanumeric: function (plainText) {
                var codeText = "";
                while (plainText.length >= 2) {
                    var token = plainText.substr(0, 2);
                    var dec = (Bridge.Int.mul(this.alphanumEncDict.get(token.charCodeAt(0)), 45) + this.alphanumEncDict.get(token.charCodeAt(1))) | 0;
                    codeText = System.String.concat(codeText, (this.DecToBin$1(dec, 11)));
                    plainText = plainText.substr(2);
                }
                if (plainText.length > 0) {
                    codeText = System.String.concat(codeText, (this.DecToBin$1(this.alphanumEncDict.get(plainText.charCodeAt(0)), 6)));
                }
                return codeText;
            },
            PlainTextToBinaryByte: function (plainText, utf8BOM) {
                var $t;
                var codeBytes = System.Array.init(1, 0, System.Byte);
                var codeText = "";

                //if (IsValidISO(plainText))
                //    codeBytes = Encoding.GetEncoding("ISO-8859-1").GetBytes(plainText);
                //else
                //    codeBytes = utf8BOM ? Encoding.UTF8.GetPreamble().Concat(Encoding.UTF8.GetBytes(plainText)).ToArray() : Encoding.UTF8.GetBytes(plainText);
                var bytes = System.Text.Encoding.UTF8.GetBytes(plainText);
                if (utf8BOM) {
                    codeBytes = System.Array.init(((bytes.length + 3) | 0), 0, System.Byte);
                    System.Array.copy(System.Text.Encoding.UTF8.GetPreamble(), 0, codeBytes, 0, 3);
                    System.Array.copy(bytes, 0, codeBytes, 3, bytes.length);
                } else {
                    codeBytes = bytes;
                }
                $t = Bridge.getEnumerator(codeBytes);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        codeText = System.String.concat(codeText, (this.DecToBin$1(b, 8)));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }return codeText;
            },
            PlainTextToBinaryNumeric: function (plainText) {
                var codeText = "";
                while (plainText.length >= 3) {
                    var dec = System.Convert.toInt32(plainText.substr(0, 3));
                    codeText = System.String.concat(codeText, (this.DecToBin$1(dec, 10)));
                    plainText = plainText.substr(3);
                }
                if (plainText.length === 2) {
                    var dec1 = System.Convert.toInt32(plainText.substr(0, plainText.length));
                    codeText = System.String.concat(codeText, (this.DecToBin$1(dec1, 7)));
                } else if (plainText.length === 1) {
                    var dec2 = System.Convert.toInt32(plainText.substr(0, plainText.length));
                    codeText = System.String.concat(codeText, (this.DecToBin$1(dec2, 4)));
                }
                return codeText;
            },
            ShrinkAlphaExp: function (alphaExp) {
                return Bridge.Int.clip32((alphaExp % 256) + Math.floor(((Bridge.Int.div(alphaExp, 256)) | 0)));
            },
            XORPolynoms: function (messagePolynom, resPolynom) {
                var resultPolynom = new CM.Javascript.QRCode.QRCodeGenerator.Polynom();
                var longPoly, shortPoly;
                if (messagePolynom.PolyItems.Count >= resPolynom.PolyItems.Count) {
                    longPoly = messagePolynom.PolyItems;
                    shortPoly = resPolynom.PolyItems;
                } else {
                    longPoly = resPolynom.PolyItems;
                    shortPoly = messagePolynom.PolyItems;
                }
                var longCount = longPoly.Count;
                var shortCount = shortPoly.Count;
                var firstExponent = messagePolynom.PolyItems.getItem(0).$clone().Exponent;
                var polItemRes = new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem(); // bridge optimisation for slow struct setup
                for (var i = 0; i < longCount; i = (i + 1) | 0) {
                    polItemRes.Coefficient = longPoly.getItem(i).$clone().Coefficient ^ (shortCount > i ? shortPoly.getItem(i).$clone().Coefficient : 0);
                    polItemRes.Exponent = (firstExponent - i) | 0;
                    resultPolynom.PolyItems.add(polItemRes.$clone());
                }
                resultPolynom.PolyItems.removeAt(0);
                return resultPolynom;
            }
        }
    });

    Bridge.ns("CM.Javascript.QRCode.QRCodeGenerator", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.QRCode.QRCodeGenerator, {
        f1: function (a, b) {
            return Bridge.Int.mul(Bridge.compare(a.Exponent, b.Exponent), -1);
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.AlignmentPattern", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.Javascript.QRCode.QRCodeGenerator.AlignmentPattern(); }
            }
        },
        fields: {
            PatternPositions: null,
            Version: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([7392628631, this.PatternPositions, this.Version]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.Javascript.QRCode.QRCodeGenerator.AlignmentPattern)) {
                    return false;
                }
                return Bridge.equals(this.PatternPositions, o.PatternPositions) && Bridge.equals(this.Version, o.Version);
            },
            $clone: function (to) {
                var s = to || new CM.Javascript.QRCode.QRCodeGenerator.AlignmentPattern();
                s.PatternPositions = this.PatternPositions;
                s.Version = this.Version;
                return s;
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.Antilog", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.Javascript.QRCode.QRCodeGenerator.Antilog(); }
            }
        },
        fields: {
            ExponentAlpha: 0,
            IntegerValue: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1776016813, this.ExponentAlpha, this.IntegerValue]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.Javascript.QRCode.QRCodeGenerator.Antilog)) {
                    return false;
                }
                return Bridge.equals(this.ExponentAlpha, o.ExponentAlpha) && Bridge.equals(this.IntegerValue, o.IntegerValue);
            },
            $clone: function (to) {
                var s = to || new CM.Javascript.QRCode.QRCodeGenerator.Antilog();
                s.ExponentAlpha = this.ExponentAlpha;
                s.IntegerValue = this.IntegerValue;
                return s;
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.CodewordBlock", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.Javascript.QRCode.QRCodeGenerator.CodewordBlock(); }
            }
        },
        fields: {
            BitString: null,
            BlockNumber: 0,
            CodeWords: null,
            ECCWords: null,
            GroupNumber: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5054548839, this.BitString, this.BlockNumber, this.CodeWords, this.ECCWords, this.GroupNumber]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.Javascript.QRCode.QRCodeGenerator.CodewordBlock)) {
                    return false;
                }
                return Bridge.equals(this.BitString, o.BitString) && Bridge.equals(this.BlockNumber, o.BlockNumber) && Bridge.equals(this.CodeWords, o.CodeWords) && Bridge.equals(this.ECCWords, o.ECCWords) && Bridge.equals(this.GroupNumber, o.GroupNumber);
            },
            $clone: function (to) {
                var s = to || new CM.Javascript.QRCode.QRCodeGenerator.CodewordBlock();
                s.BitString = this.BitString;
                s.BlockNumber = this.BlockNumber;
                s.CodeWords = this.CodeWords;
                s.ECCWords = this.ECCWords;
                s.GroupNumber = this.GroupNumber;
                return s;
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.ECCInfo", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.Javascript.QRCode.QRCodeGenerator.ECCInfo(); }
            }
        },
        fields: {
            BlocksInGroup1: 0,
            BlocksInGroup2: 0,
            CodewordsInGroup1: 0,
            CodewordsInGroup2: 0,
            ECCPerBlock: 0,
            ErrorCorrectionLevel: 0,
            TotalDataCodewords: 0,
            Version: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1236445619, this.BlocksInGroup1, this.BlocksInGroup2, this.CodewordsInGroup1, this.CodewordsInGroup2, this.ECCPerBlock, this.ErrorCorrectionLevel, this.TotalDataCodewords, this.Version]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.Javascript.QRCode.QRCodeGenerator.ECCInfo)) {
                    return false;
                }
                return Bridge.equals(this.BlocksInGroup1, o.BlocksInGroup1) && Bridge.equals(this.BlocksInGroup2, o.BlocksInGroup2) && Bridge.equals(this.CodewordsInGroup1, o.CodewordsInGroup1) && Bridge.equals(this.CodewordsInGroup2, o.CodewordsInGroup2) && Bridge.equals(this.ECCPerBlock, o.ECCPerBlock) && Bridge.equals(this.ErrorCorrectionLevel, o.ErrorCorrectionLevel) && Bridge.equals(this.TotalDataCodewords, o.TotalDataCodewords) && Bridge.equals(this.Version, o.Version);
            },
            $clone: function (to) {
                var s = to || new CM.Javascript.QRCode.QRCodeGenerator.ECCInfo();
                s.BlocksInGroup1 = this.BlocksInGroup1;
                s.BlocksInGroup2 = this.BlocksInGroup2;
                s.CodewordsInGroup1 = this.CodewordsInGroup1;
                s.CodewordsInGroup2 = this.CodewordsInGroup2;
                s.ECCPerBlock = this.ECCPerBlock;
                s.ErrorCorrectionLevel = this.ErrorCorrectionLevel;
                s.TotalDataCodewords = this.TotalDataCodewords;
                s.Version = this.Version;
                return s;
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.ECCLevel", {
        $kind: "enum",
        statics: {
            fields: {
                L: 0,
                M: 1,
                Q: 2,
                H: 3
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.EncodingMode", {
        $kind: "enum",
        statics: {
            fields: {
                Numeric: 1,
                Alphanumeric: 2,
                Byte: 4,
                Kanji: 8,
                ECI: 7
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer", {
        statics: {
            methods: {
                AddQuietZone: function (qrCode) {
                    var quietLine = System.Array.init(((qrCode.v.ModuleMatrix.Count + 8) | 0), false, System.Boolean);
                    for (var i = 0; i < quietLine.length; i = (i + 1) | 0) {
                        quietLine[System.Array.index(i, quietLine)] = false;
                    }
                    for (var i1 = 0; i1 < 4; i1 = (i1 + 1) | 0) {
                        qrCode.v.ModuleMatrix.insert(0, new CM.Javascript.QRCode.BitArray.ctor(quietLine));
                    }
                    for (var i2 = 0; i2 < 4; i2 = (i2 + 1) | 0) {
                        qrCode.v.ModuleMatrix.add(new CM.Javascript.QRCode.BitArray.ctor(quietLine));
                    }
                    for (var i3 = 4; i3 < ((qrCode.v.ModuleMatrix.Count - 4) | 0); i3 = (i3 + 1) | 0) {
                        var quietPart = System.Array.init([false, false, false, false], System.Boolean);
                        var tmpLine = new (System.Collections.Generic.List$1(System.Boolean))(quietPart);
                        var ar = qrCode.v.ModuleMatrix.getItem(i3);
                        //foreach (bool module in qrCode.ModuleMatrix[i])
                        for (var x = 0; x < ar.Length; x = (x + 1) | 0) {
                            tmpLine.add(ar.getItem(x));
                        }
                        tmpLine.addRange(quietPart);
                        qrCode.v.ModuleMatrix.setItem(i3, new CM.Javascript.QRCode.BitArray.ctor(tmpLine.toArray()));
                    }
                },
                MaskCode: function (qrCode, version, blockedModules) {
                    // var patternName = string.Empty;
                    var patternScore = 0;

                    var size = qrCode.v.ModuleMatrix.Count;
                    var curPattern = null;
                    var patternIndex = -1;
                    //foreach (var pattern in typeof(MaskPattern).GetMethods()) {
                    //    if (pattern.Name.Length == 8 && pattern.Name.Substring(0, 7) == "Pattern") {
                    var rect = new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(0, 0, 1, 1);
                    for (var i = 0; i < CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Patterns.length; i = (i + 1) | 0) {
                        var pattern = CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Patterns[System.Array.index(i, CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Patterns)];
                        var qrTemp = { v : new CM.Javascript.QRCode.QRCodeData(version) };
                        for (var y = 0; y < size; y = (y + 1) | 0) {
                            var dst = qrTemp.v.ModuleMatrix.getItem(y);
                            var src = qrCode.v.ModuleMatrix.getItem(y);
                            for (var x = 0; x < size; x = (x + 1) | 0) {
                                dst.setItem(x, src.getItem(x));
                            }
                        }

                        for (var x1 = 0; x1 < size; x1 = (x1 + 1) | 0) {
                            for (var y1 = 0; y1 < size; y1 = (y1 + 1) | 0) {
                                rect.X = x1;
                                rect.Y = y1;
                                if (!CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.IsBlocked(rect, blockedModules.v)) {
                                    qrTemp.v.ModuleMatrix.getItem(y1).setItem(x1, qrTemp.v.ModuleMatrix.getItem(y1).getItem(x1)^(pattern(x1, y1)));
                                }
                            }
                        }

                        var score = CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Score(qrTemp);
                        //if (string.IsNullOrEmpty(patternName) || patternScore > score) {
                        if (patternIndex === -1 || patternScore > score) {
                            // patternName = pattern.Name;
                            curPattern = pattern;
                            patternIndex = i;
                            patternScore = score;
                            // break??
                        }
                    }
                    //    }
                    //}
                    // var patterMethod = typeof(MaskPattern).GetMethods().First(x => x.Name == patternName);
                    for (var x2 = 0; x2 < size; x2 = (x2 + 1) | 0) {
                        for (var y2 = 0; y2 < size; y2 = (y2 + 1) | 0) {
                            rect.X = x2;
                            rect.Y = y2;
                            if (!CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.IsBlocked(rect, blockedModules.v)) {
                                qrCode.v.ModuleMatrix.getItem(y2).setItem(x2, qrCode.v.ModuleMatrix.getItem(y2).getItem(x2)^(curPattern(x2, y2))); // (bool)patterMethod.Invoke(null, new object[] { x, y });
                            }
                        }
                    }
                    //return Convert.ToInt32(patterMethod.Name.Substring(patterMethod.Name.Length - 1, 1)) - 1;
                    return patternIndex;
                },
                PlaceAlignmentPatterns: function (qrCode, alignmentPatternLocations, blockedModules) {
                    var $t, $t1;
                    $t = Bridge.getEnumerator(alignmentPatternLocations);
                    try {
                        while ($t.moveNext()) {
                            var loc = $t.Current;
                            var alignmentPatternRect = new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(loc.X, loc.Y, 5, 5);
                            var blocked = false;
                            $t1 = Bridge.getEnumerator(blockedModules.v);
                            try {
                                while ($t1.moveNext()) {
                                    var blockedRect = $t1.Current;
                                    if (CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.Intersects(alignmentPatternRect, blockedRect)) {
                                        blocked = true;
                                        break;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$dispose();
                                }
                            }if (blocked) {
                                continue;
                            }

                            for (var x = 0; x < 5; x = (x + 1) | 0) {
                                for (var y = 0; y < 5; y = (y + 1) | 0) {
                                    if (y === 0 || y === 4 || x === 0 || x === 4 || (x === 2 && y === 2)) {
                                        qrCode.v.ModuleMatrix.getItem(((loc.Y + y) | 0)).setItem(((loc.X + x) | 0), true);
                                    }
                                }
                            }
                            blockedModules.v.add(new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(loc.X, loc.Y, 5, 5));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }},
                PlaceDarkModule: function (qrCode, version, blockedModules) {
                    qrCode.v.ModuleMatrix.getItem(((Bridge.Int.mul(4, version) + 9) | 0)).setItem(8, true);
                    blockedModules.v.add(new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(8, ((Bridge.Int.mul(4, version) + 9) | 0), 1, 1));
                },
                PlaceDataWords: function (qrCode, data, blockedModules) {
                    var size = qrCode.v.ModuleMatrix.Count;
                    var up = true;
                    //var datawords = new Queue<bool>();
                    //data.ToList().ForEach(x => datawords.Enqueue(x == '0' ? false : true));
                    var counter = 0;
                    var max = data.length;
                    for (var x = (size - 1) | 0; x >= 0; x = (x - 2) | 0) {
                        if (x === 7 || x === 6) {
                            x = 5;
                        }
                        for (var yMod = 1; yMod <= size; yMod = (yMod + 1) | 0) {
                            var y = 0;
                            if (up) {
                                y = (size - yMod) | 0;
                                if (counter < max && !CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.IsBlocked(new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(x, y, 1, 1), blockedModules.v)) {
                                    qrCode.v.ModuleMatrix.getItem(y).setItem(x, data.charCodeAt(Bridge.identity(counter, (counter = (counter + 1) | 0))) === 49);
                                } //datawords.Dequeue();
                                if (counter < max && x > 0 && !CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.IsBlocked(new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(((x - 1) | 0), y, 1, 1), blockedModules.v)) {
                                    qrCode.v.ModuleMatrix.getItem(y).setItem(((x - 1) | 0), data.charCodeAt(Bridge.identity(counter, (counter = (counter + 1) | 0))) === 49);
                                } //datawords.Dequeue();
                            } else {
                                y = (yMod - 1) | 0;
                                if (counter < max && !CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.IsBlocked(new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(x, y, 1, 1), blockedModules.v)) {
                                    qrCode.v.ModuleMatrix.getItem(y).setItem(x, data.charCodeAt(Bridge.identity(counter, (counter = (counter + 1) | 0))) === 49);
                                } //datawords.Dequeue();
                                if (counter < max && x > 0 && !CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.IsBlocked(new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(((x - 1) | 0), y, 1, 1), blockedModules.v)) {
                                    qrCode.v.ModuleMatrix.getItem(y).setItem(((x - 1) | 0), data.charCodeAt(Bridge.identity(counter, (counter = (counter + 1) | 0))) === 49);
                                } //datawords.Dequeue();
                            }
                        }
                        up = !up;
                    }
                },
                PlaceFinderPatterns: function (qrCode, blockedModules) {
                    var size = qrCode.v.ModuleMatrix.Count;
                    var locations = System.Array.init([
                        0, 
                        0, 
                        ((size - 7) | 0), 
                        0, 
                        0, 
                        ((size - 7) | 0)
                    ], System.Int32);

                    for (var i = 0; i < 6; i = (i + 2) | 0) {
                        for (var x = 0; x < 7; x = (x + 1) | 0) {
                            for (var y = 0; y < 7; y = (y + 1) | 0) {
                                if (!(((x === 1 || x === 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y === 1 || y === 5)))) {
                                    qrCode.v.ModuleMatrix.getItem(((y + locations[System.Array.index(((i + 1) | 0), locations)]) | 0)).setItem(((x + locations[System.Array.index(i, locations)]) | 0), true);
                                }
                            }
                        }
                        blockedModules.v.add(new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(locations[System.Array.index(i, locations)], locations[System.Array.index(((i + 1) | 0), locations)], 7, 7));
                    }
                },
                PlaceFormat: function (qrCode, formatStr) {
                    var size = qrCode.v.ModuleMatrix.Count;
                    var fStr = CM.Javascript.QRCode.Reverse(formatStr);
                    var modules = System.Array.create(0, [[
                        8, 
                        0, 
                        ((size - 1) | 0), 
                        8
                    ], [
                        8, 
                        1, 
                        ((size - 2) | 0), 
                        8
                    ], [
                        8, 
                        2, 
                        ((size - 3) | 0), 
                        8
                    ], [
                        8, 
                        3, 
                        ((size - 4) | 0), 
                        8
                    ], [
                        8, 
                        4, 
                        ((size - 5) | 0), 
                        8
                    ], [
                        8, 
                        5, 
                        ((size - 6) | 0), 
                        8
                    ], [
                        8, 
                        7, 
                        ((size - 7) | 0), 
                        8
                    ], [
                        8, 
                        8, 
                        ((size - 8) | 0), 
                        8
                    ], [
                        7, 
                        8, 
                        8, 
                        ((size - 7) | 0)
                    ], [
                        5, 
                        8, 
                        8, 
                        ((size - 6) | 0)
                    ], [
                        4, 
                        8, 
                        8, 
                        ((size - 5) | 0)
                    ], [
                        3, 
                        8, 
                        8, 
                        ((size - 4) | 0)
                    ], [
                        2, 
                        8, 
                        8, 
                        ((size - 3) | 0)
                    ], [
                        1, 
                        8, 
                        8, 
                        ((size - 2) | 0)
                    ], [
                        0, 
                        8, 
                        8, 
                        ((size - 1) | 0)
                    ]], System.Int32, 15, 4);
                    for (var i = 0; i < 15; i = (i + 1) | 0) {
                        var p1 = new CM.Javascript.QRCode.QRCodeGenerator.Point(modules.get([i, 0]), modules.get([i, 1]));
                        var p2 = new CM.Javascript.QRCode.QRCodeGenerator.Point(modules.get([i, 2]), modules.get([i, 3]));
                        qrCode.v.ModuleMatrix.getItem(p1.Y).setItem(p1.X, fStr.charCodeAt(i) === 49 ? true : false);
                        qrCode.v.ModuleMatrix.getItem(p2.Y).setItem(p2.X, fStr.charCodeAt(i) === 49 ? true : false);
                    }
                },
                PlaceTimingPatterns: function (qrCode, blockedModules) {
                    var size = qrCode.v.ModuleMatrix.Count;
                    for (var i = 8; i < ((size - 8) | 0); i = (i + 1) | 0) {
                        if (i % 2 === 0) {
                            qrCode.v.ModuleMatrix.getItem(6).setItem(i, true);
                            qrCode.v.ModuleMatrix.getItem(i).setItem(6, true);
                        }
                    }
                    blockedModules.v.addRange(System.Array.init([new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(6, 8, 1, ((size - 16) | 0)), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(8, 6, ((size - 16) | 0), 1)], CM.Javascript.QRCode.QRCodeGenerator.Rectangle));
                },
                PlaceVersion: function (qrCode, versionStr) {
                    var size = qrCode.v.ModuleMatrix.Count;
                    var vStr = CM.Javascript.QRCode.Reverse(versionStr);

                    for (var x = 0; x < 6; x = (x + 1) | 0) {
                        for (var y = 0; y < 3; y = (y + 1) | 0) {
                            qrCode.v.ModuleMatrix.getItem(((((y + size) | 0) - 11) | 0)).setItem(x, vStr.charCodeAt(((Bridge.Int.mul(x, 3) + y) | 0)) === 49 ? true : false);
                            qrCode.v.ModuleMatrix.getItem(x).setItem(((((y + size) | 0) - 11) | 0), vStr.charCodeAt(((Bridge.Int.mul(x, 3) + y) | 0)) === 49 ? true : false);
                        }
                    }
                },
                ReserveSeperatorAreas: function (size, blockedModules) {
                    blockedModules.v.addRange(System.Array.init([new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(7, 0, 1, 8), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(0, 7, 7, 1), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(0, ((size - 8) | 0), 8, 1), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(7, ((size - 7) | 0), 1, 7), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(((size - 8) | 0), 0, 1, 8), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(((size - 7) | 0), 7, 7, 1)], CM.Javascript.QRCode.QRCodeGenerator.Rectangle));
                },
                ReserveVersionAreas: function (size, version, blockedModules) {
                    blockedModules.v.addRange(System.Array.init([new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(8, 0, 1, 6), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(8, 7, 1, 1), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(0, 8, 6, 1), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(7, 8, 2, 1), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(((size - 8) | 0), 8, 8, 1), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(8, ((size - 7) | 0), 1, 7)], CM.Javascript.QRCode.QRCodeGenerator.Rectangle));

                    if (version >= 7) {
                        blockedModules.v.addRange(System.Array.init([new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(((size - 11) | 0), 0, 3, 6), new CM.Javascript.QRCode.QRCodeGenerator.Rectangle(0, ((size - 11) | 0), 6, 3)], CM.Javascript.QRCode.QRCodeGenerator.Rectangle));
                    }
                },
                Intersects: function (r1, r2) {
                    return r2.X < ((r1.X + r1.Width) | 0) && r1.X < ((r2.X + r2.Width) | 0) && r2.Y < ((r1.Y + r1.Height) | 0) && r1.Y < ((r2.Y + r2.Height) | 0);
                },
                IsBlocked: function (r1, blockedModules) {
                    var $t;
                    var isBlocked = false;
                    $t = Bridge.getEnumerator(blockedModules);
                    try {
                        while ($t.moveNext()) {
                            var blockedMod = $t.Current;
                            if (CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.Intersects(blockedMod, r1)) {
                                isBlocked = true;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }return isBlocked;
                }
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern", {
        statics: {
            fields: {
                Patterns: null
            },
            ctors: {
                init: function () {
                    this.Patterns = System.Array.init([CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern1, CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern2, CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern3, CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern4, CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern5, CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern6, CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern7, CM.Javascript.QRCode.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern8], Function);
                }
            },
            methods: {
                Pattern1: function (x, y) {
                    return (((x + y) | 0)) % 2 === 0;
                },
                Pattern2: function (x, y) {
                    return y % 2 === 0;
                },
                Pattern3: function (x, y) {
                    return x % 3 === 0;
                },
                Pattern4: function (x, y) {
                    return (((x + y) | 0)) % 3 === 0;
                },
                Pattern5: function (x, y) {
                    return (((((Bridge.Int.div(y, 2)) | 0) + ((Bridge.Int.div(x, 3)) | 0)) | 0)) % 2 === 0;
                },
                Pattern6: function (x, y) {
                    return ((((Bridge.Int.mul(x, y)) % 2) + ((Bridge.Int.mul(x, y)) % 3)) | 0) === 0;
                },
                Pattern7: function (x, y) {
                    return (((((Bridge.Int.mul(x, y)) % 2) + ((Bridge.Int.mul(x, y)) % 3)) | 0)) % 2 === 0;
                },
                Pattern8: function (x, y) {
                    return (((((((x + y) | 0)) % 2) + ((Bridge.Int.mul(x, y)) % 3)) | 0)) % 2 === 0;
                },
                Score: function (qrCode) {
                    var score = 0;
                    var size = qrCode.v.ModuleMatrix.Count;

                    //Penalty 1
                    for (var y = 0; y < size; y = (y + 1) | 0) {
                        var modInRow = 0;
                        var modInColumn = 0;
                        var lastValRow = qrCode.v.ModuleMatrix.getItem(y).getItem(0);
                        var lastValColumn = qrCode.v.ModuleMatrix.getItem(0).getItem(y);
                        for (var x = 0; x < size; x = (x + 1) | 0) {
                            if (qrCode.v.ModuleMatrix.getItem(y).getItem(x) === lastValRow) {
                                modInRow = (modInRow + 1) | 0;
                            } else {
                                modInRow = 1;
                            }
                            if (modInRow === 5) {
                                score = (score + 3) | 0;
                            } else {
                                if (modInRow > 5) {
                                    score = (score + 1) | 0;
                                }
                            }
                            lastValRow = qrCode.v.ModuleMatrix.getItem(y).getItem(x);

                            if (qrCode.v.ModuleMatrix.getItem(x).getItem(y) === lastValColumn) {
                                modInColumn = (modInColumn + 1) | 0;
                            } else {
                                modInColumn = 1;
                            }
                            if (modInColumn === 5) {
                                score = (score + 3) | 0;
                            } else {
                                if (modInColumn > 5) {
                                    score = (score + 1) | 0;
                                }
                            }
                            lastValColumn = qrCode.v.ModuleMatrix.getItem(x).getItem(y);
                        }
                    }

                    //Penalty 2
                    for (var y1 = 0; y1 < ((size - 1) | 0); y1 = (y1 + 1) | 0) {
                        for (var x1 = 0; x1 < ((size - 1) | 0); x1 = (x1 + 1) | 0) {
                            if (qrCode.v.ModuleMatrix.getItem(y1).getItem(x1) === qrCode.v.ModuleMatrix.getItem(y1).getItem(((x1 + 1) | 0)) && qrCode.v.ModuleMatrix.getItem(y1).getItem(x1) === qrCode.v.ModuleMatrix.getItem(((y1 + 1) | 0)).getItem(x1) && qrCode.v.ModuleMatrix.getItem(y1).getItem(x1) === qrCode.v.ModuleMatrix.getItem(((y1 + 1) | 0)).getItem(((x1 + 1) | 0))) {
                                score = (score + 3) | 0;
                            }
                        }
                    }

                    //Penalty 3
                    for (var y2 = 0; y2 < size; y2 = (y2 + 1) | 0) {
                        for (var x2 = 0; x2 < ((size - 10) | 0); x2 = (x2 + 1) | 0) {
                            if ((qrCode.v.ModuleMatrix.getItem(y2).getItem(x2) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 1) | 0)) && qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 2) | 0)) && qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 3) | 0)) && qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 4) | 0)) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 5) | 0)) && qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 6) | 0)) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 7) | 0)) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 8) | 0)) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 9) | 0)) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 10) | 0))) || (!qrCode.v.ModuleMatrix.getItem(y2).getItem(x2) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 1) | 0)) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 2) | 0)) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 3) | 0)) && qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 4) | 0)) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 5) | 0)) && qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 6) | 0)) && qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 7) | 0)) && qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 8) | 0)) && !qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 9) | 0)) && qrCode.v.ModuleMatrix.getItem(y2).getItem(((x2 + 10) | 0)))) {
                                score = (score + 40) | 0;
                            }

                            if ((qrCode.v.ModuleMatrix.getItem(x2).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 1) | 0)).getItem(y2) && qrCode.v.ModuleMatrix.getItem(((x2 + 2) | 0)).getItem(y2) && qrCode.v.ModuleMatrix.getItem(((x2 + 3) | 0)).getItem(y2) && qrCode.v.ModuleMatrix.getItem(((x2 + 4) | 0)).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 5) | 0)).getItem(y2) && qrCode.v.ModuleMatrix.getItem(((x2 + 6) | 0)).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 7) | 0)).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 8) | 0)).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 9) | 0)).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 10) | 0)).getItem(y2)) || (!qrCode.v.ModuleMatrix.getItem(x2).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 1) | 0)).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 2) | 0)).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 3) | 0)).getItem(y2) && qrCode.v.ModuleMatrix.getItem(((x2 + 4) | 0)).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 5) | 0)).getItem(y2) && qrCode.v.ModuleMatrix.getItem(((x2 + 6) | 0)).getItem(y2) && qrCode.v.ModuleMatrix.getItem(((x2 + 7) | 0)).getItem(y2) && qrCode.v.ModuleMatrix.getItem(((x2 + 8) | 0)).getItem(y2) && !qrCode.v.ModuleMatrix.getItem(((x2 + 9) | 0)).getItem(y2) && qrCode.v.ModuleMatrix.getItem(((x2 + 10) | 0)).getItem(y2))) {
                                score = (score + 40) | 0;
                            }
                        }
                    }

                    //Penalty 4
                    var blackModules = 0;
                    // foreach (var row in qrCode.ModuleMatrix)
                    //     foreach (bool bit in row)
                    //         if (bit)
                    //             blackModules++;

                    for (var i = 0; i < qrCode.v.ModuleMatrix.Count; i = (i + 1) | 0) {
                        var ar = qrCode.v.ModuleMatrix.getItem(i);
                        for (var x3 = 0; x3 < ar.Length; x3 = (x3 + 1) | 0) {
                            if (ar.getItem(x3)) {
                                blackModules = (blackModules + 1) | 0;
                            }
                        }
                    }

                    var percent = Bridge.Int.mul((((Bridge.Int.div(blackModules, (Bridge.Int.mul(qrCode.v.ModuleMatrix.Count, qrCode.v.ModuleMatrix.Count)))) | 0)), 100);
                    if (percent % 5 === 0) {
                        score = (score + (Bridge.Int.mul(Math.min((((Bridge.Int.div(Math.abs(((percent - 55) | 0)), 5)) | 0)), (((Bridge.Int.div(Math.abs(((percent - 45) | 0)), 5)) | 0))), 10))) | 0;
                    } else {
                        score = (score + (Bridge.Int.mul(Math.min((((Bridge.Int.div(Math.abs(((System.Decimal.toInt(System.Decimal(percent).div(System.Decimal(5)).floor(), System.Int32) - 50) | 0)), 5)) | 0)), (((Bridge.Int.div(Math.abs((((((System.Decimal.toInt(System.Decimal(percent).div(System.Decimal(5)).floor(), System.Int32) + 5) | 0)) - 50) | 0)), 5)) | 0))), 10))) | 0;
                    }

                    return score;
                }
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.Point", {
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.Polynom", {
        props: {
            PolyItems: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.PolyItems = new (System.Collections.Generic.List$1(CM.Javascript.QRCode.QRCodeGenerator.PolynomItem))();
            }
        },
        methods: {
            toString: function () {
                var sb = new System.Text.StringBuilder();
                //PolyItems.ForEach(x => sb.Append("a^" + x.Coefficient + "*x^" + x.Exponent + " + "));
                for (var i = 0; i < this.PolyItems.Count; i = (i + 1) | 0) {
                    sb.append("a^" + this.PolyItems.getItem(i).$clone().Coefficient + "*x^" + this.PolyItems.getItem(i).$clone().Exponent + " + ");
                }
                return System.String.trimEnd(sb.toString(), System.Array.init([32, 43], System.Char));
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.PolynomItem", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem(); }
            }
        },
        fields: {
            Coefficient: 0,
            Exponent: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3276227634, this.Coefficient, this.Exponent]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.Javascript.QRCode.QRCodeGenerator.PolynomItem)) {
                    return false;
                }
                return Bridge.equals(this.Coefficient, o.Coefficient) && Bridge.equals(this.Exponent, o.Exponent);
            },
            $clone: function (to) {
                var s = to || new CM.Javascript.QRCode.QRCodeGenerator.PolynomItem();
                s.Coefficient = this.Coefficient;
                s.Exponent = this.Exponent;
                return s;
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.Rectangle", {
        fields: {
            Height: 0,
            Width: 0,
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function (x, y, w, h) {
                this.$initialize();
                this.X = x;
                this.Y = y;
                this.Width = w;
                this.Height = h;
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.VersionInfo", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.Javascript.QRCode.QRCodeGenerator.VersionInfo(); }
            }
        },
        fields: {
            Details: null,
            Version: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3176151853, this.Details, this.Version]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.Javascript.QRCode.QRCodeGenerator.VersionInfo)) {
                    return false;
                }
                return Bridge.equals(this.Details, o.Details) && Bridge.equals(this.Version, o.Version);
            },
            $clone: function (to) {
                var s = to || new CM.Javascript.QRCode.QRCodeGenerator.VersionInfo();
                s.Details = this.Details;
                s.Version = this.Version;
                return s;
            }
        }
    });

    Bridge.define("CM.Javascript.QRCode.QRCodeGenerator.VersionInfoDetails", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new CM.Javascript.QRCode.QRCodeGenerator.VersionInfoDetails(); }
            }
        },
        fields: {
            CapacityDict: null,
            ErrorCorrectionLevel: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([6085026558, this.CapacityDict, this.ErrorCorrectionLevel]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, CM.Javascript.QRCode.QRCodeGenerator.VersionInfoDetails)) {
                    return false;
                }
                return Bridge.equals(this.CapacityDict, o.CapacityDict) && Bridge.equals(this.ErrorCorrectionLevel, o.ErrorCorrectionLevel);
            },
            $clone: function (to) {
                var s = to || new CM.Javascript.QRCode.QRCodeGenerator.VersionInfoDetails();
                s.CapacityDict = this.CapacityDict;
                s.ErrorCorrectionLevel = this.ErrorCorrectionLevel;
                return s;
            }
        }
    });

    Bridge.define("CM.Javascript.RegionsPage.RegionalDataList", {
        fields: {
            _Feedback: null,
            _IsQueryRunning: false,
            _PageSize: 0,
            _Region: null,
            _Results: null,
            _StartAt: 0,
            _Total: 0
        },
        props: {
            IsScrollAtBottom: {
                get: function () {
                    var bottom = (CM.BridgeHacks.Position(this._Results).Y + this._Results.scrollHeight) | 0;
                    var windowBottom = (window.scrollY + window.innerHeight) | 0;
                    return (bottom < windowBottom);
                }
            }
        },
        ctors: {
            ctor: function (parent, region) {
                this.$initialize();
                this._Results = CM.BridgeHacks.Div(parent);
                this._Feedback = new CM.Javascript.Feedback(parent);
                this._Total = 0;
                this._PageSize = 25;
                this._Region = region;
            }
        },
        methods: {
            UpdateResults: function (force) {
                var $t;
                if (force === void 0) { force = false; }
                if (this._StartAt > this._Total && !force) {
                    return;
                }
                if (this._IsQueryRunning) {
                    return;
                }
                this._IsQueryRunning = true;
                this._Feedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);
                CM.Javascript.App.Identity.Client.QueryAuthoritiveServer(($t = new (CM.AsyncRequest$1(CM.Javascript.Client.HttpRequest))(), $t.Item = new CM.Javascript.Client.HttpRequest(System.String.concat("/api/get-revenue-data/", this._Region, "?from=", CM.Helpers.DateToISO8601(System.DateTime.addMonths(System.DateTime.getDate(System.DateTime.getUtcNow()), -1)), "&to=", CM.Helpers.DateToISO8601(System.DateTime.addDays(System.DateTime.getDate(System.DateTime.getUtcNow()), 1)), "&max=", this._PageSize, "&startat=", this._StartAt)), $t.OnComplete = Bridge.fn.bind(this, $asm.$.CM.Javascript.RegionsPage.RegionalDataList.f1), $t));
            }
        }
    });

    Bridge.ns("CM.Javascript.RegionsPage.RegionalDataList", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.RegionsPage.RegionalDataList, {
        f1: function (e) {
            var $t1;
            this._IsQueryRunning = false;

            if (CM.CMResult.op_Equality(e.Result.$clone(), CM.CMResult.S_OK.$clone()) && e.Item.Content != null) {
                this._Feedback.Hide();
                //
                var lines = System.String.split(e.Item.Content, [10].map(function(i) {{ return String.fromCharCode(i); }}));
                var hadData = false;
                for (var i = 0; i < lines.length; i = (i + 1) | 0) {
                    // {Updated Utc} (ID: {Created Utc} {Payee} {Payer}) {Revenue} {NT|OK}
                    var parts = System.String.split(lines[System.Array.index(i, lines)].trim(), [32].map(function(i) {{ return String.fromCharCode(i); }}));
                    if (parts.length !== 6 || !CM.Helpers.IsIDValid(parts[System.Array.index(2, parts)]) || !CM.Helpers.IsIDValid(parts[System.Array.index(3, parts)])) {
                        continue;
                    }
                    var d = ($t1 = document.createElement('div'), $t1.className = "res", $t1);
                    var row = CM.BridgeHacks.Div(CM.BridgeHacks.Div(d, "summary"), "hitregion");
                    CM.BridgeHacks.Div(row);
                    CM.BridgeHacks.Div(row, null, System.DateTime.format(CM.Helpers.DateFromISO8601$1(parts[System.Array.index(0, parts)]), "yyyy-MM-dd"));
                    var id = System.String.concat(parts[System.Array.index(1, parts)], " ", parts[System.Array.index(2, parts)], " ", parts[System.Array.index(3, parts)]);
                    var url = System.String.concat("/", System.String.replaceAll(id, " ", "+"));
                    CM.BridgeHacks.A$1(CM.BridgeHacks.Div(row, "link"), System.String.concat((Bridge.referenceEquals(parts[System.Array.index(5, parts)], "OK") ? CM.Javascript.Assets.SVG.CircleTick.ToString(16, 16, CM.Javascript.Assets.SVG.STATUS_GREEN_COLOR) : CM.Javascript.Assets.SVG.CircleError.ToString(16, 16, "#cccccc")), CM.Javascript.Page.HtmlEncode(id)), url);
                    CM.BridgeHacks.Amount(CM.BridgeHacks.Div(row), System.Decimal(parts[System.Array.index(4, parts)]), "", false);
                    this._Results.appendChild(d);
                    hadData = true;
                }
                this._StartAt = (this._StartAt + this._PageSize) | 0;
                this._Total = (hadData ? ((this._StartAt + 1) | 0) : this._Total);
            } else {
                this._Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_PROBLEM_REACHING_A_SERVER);
            }
        }
    });

    /**
     * Provides a friendly graphic progress indicator during DHT commit phases.
     *
     * @class CM.Javascript.ServerProgressIndicator
     */
    Bridge.define("CM.Javascript.ServerProgressIndicator", {
        fields: {
            _Element: null,
            _MainGlyph: null,
            _PeerHolder: null,
            _Peers: null
        },
        ctors: {
            ctor: function (parent) {
                this.$initialize();
                this._Peers = new (System.Collections.Generic.List$1(CM.Javascript.ServerProgressIndicator.PeerVisual))();

                this._Element = CM.BridgeHacks.Div(parent, "server-prog");
                this._PeerHolder = CM.BridgeHacks.Div(this._Element);

                var earth = CM.BridgeHacks.Div(this._Element, "earth popin", "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"full\" width=\"177.702\" height=\"177.288\" viewBox=\"0 0 177.70 177.29\" enable-background=\"new 0 0 177.70 177.29\" xml:space=\"preserve\">\r\n\t<radialGradient id=\"SVGID_Fill1_\" cx=\"87.9305\" cy=\"87.4448\" r=\"88.3971\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"rotate(44.933121 87.930481 87.444778)\">\r\n\t\t<stop offset=\"0.88787\" stop-color=\"#ADF8FF\" stop-opacity=\"0.388235\"/>\r\n\t\t<stop offset=\"0.924567\" stop-color=\"#E2FAFF\" stop-opacity=\"0.376471\"/>\r\n\t\t<stop offset=\"1\" stop-color=\"#88DAFF\" stop-opacity=\"0.0509804\"/>\r\n\t</radialGradient>\r\n\t<ellipse fill=\"url(#SVGID_Fill1_)\" stroke-width=\"0.2\" stroke-linejoin=\"round\" cx=\"88.8512\" cy=\"88.6438\" rx=\"88.8511\" ry=\"88.6439\"/>\r\n\t<ellipse fill=\"#56B5C4\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#006A6E\" stroke-opacity=\"1\" cx=\"89.3228\" cy=\"85.8663\" rx=\"71.7361\" ry=\"71.5688\"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 68.0865,20.1499C 68.0867,20.1497 45.3448,28.8453 47.1844,30.8519C 49.024,32.8582 54.8764,28.3436 55.3782,31.0189C 55.8799,33.6943 54.0403,57.7738 51.6994,55.2652C 49.3584,52.7569 44.0073,52.9244 47.1846,58.2752C 50.362,63.6258 53.5387,77.0037 57.0504,80.6822C 60.562,84.3609 67.9193,84.5284 68.2539,86.2003C 68.5883,87.8725 69.7587,90.0465 71.0966,90.7153C 72.4343,91.3841 75.2769,99.4107 77.1164,98.2401C 78.9557,97.0694 73.7719,92.8892 75.277,90.5479C 76.7819,88.207 73.7719,87.371 72.4343,87.8725C 71.0966,88.3741 73.103,80.8496 74.2737,80.8494C 75.4442,80.8494 69.257,80.0135 67.4178,81.8529C 65.5784,83.6922 60.3945,67.8067 67.0834,68.6427C 73.772,69.4786 69.0898,71.8199 71.9327,71.1508C 74.7753,70.482 74.7752,65.1313 76.2803,68.977C 77.7852,72.8231 79.1229,74.6626 78.2869,76.3345C 77.4508,78.0068 82.2999,79.3447 83.3034,76.3345C 84.3067,73.3247 78.7884,69.9805 83.1362,67.305C 87.4838,64.6293 93.3362,59.2786 94.5069,60.4491C 95.6774,61.6196 95.3428,53.2589 97.0152,54.7636C 98.6873,56.2685 99.5233,58.2753 101.363,56.9375C 103.202,55.5997 106.379,53.9277 103.369,53.0914C 100.36,52.2553 96.6806,49.2457 99.8578,48.9111C 103.035,48.5766 105.71,51.4194 106.881,49.0782C 108.052,46.7373 104.54,46.2358 103.704,42.7241C 102.868,39.2125 102.032,37.7076 103.202,37.3731C 104.373,37.0387 104.205,35.5338 103.369,33.3598C 102.533,31.186 104.54,31.1861 105.209,30.8516C 105.878,30.5172 98.0183,25.3336 96.5135,25.1663C 95.0086,24.999 94.5068,24.832 96.3463,27.6744C 98.1857,30.5172 95.5101,32.3568 94.3397,32.3565C 93.1692,32.3565 97.1823,31.1861 99.0218,33.3598C 100.861,35.5336 102.533,37.875 101.028,39.2125C 99.5234,40.5503 97.8511,43.393 97.684,41.2191C 97.5168,39.0452 97.8511,35.0322 96.6807,35.0321C 95.5103,35.0321 91.497,38.2091 91.497,38.2091C 91.497,38.2091 91.4969,40.0488 91.3298,40.8847C 91.1626,41.7207 91.1624,42.3897 89.8249,43.3929C 88.4871,44.3961 88.4871,47.7406 88.4871,47.7406L 88.1527,50.416C 88.1527,50.416 87.1492,45.7342 86.6478,42.5567C 86.1461,39.3797 80.795,38.8783 79.959,38.878C 79.123,38.878 82.4672,32.0223 83.8051,32.5239C 85.1428,33.0255 89.4904,33.6943 89.4904,33.6943C 89.4904,33.6943 90.1591,30.5174 92.8348,29.514C 95.5103,28.5106 95.3428,26.6713 94.6741,26.3368C 94.0053,26.0024 93.8379,24.3304 94.6741,24.163C 95.5103,23.9957 101.864,20.8188 103.035,22.4908C 104.206,24.163 107.215,30.3502 108.888,31.3534C 110.56,32.3565 109.556,36.0355 112.232,37.8748C 114.907,39.7142 115.074,41.3866 115.743,41.3863C 116.412,41.3863 116.078,33.5273 118.085,34.1959C 120.091,34.8648 122.265,32.8584 120.76,31.186C 119.255,29.514 117.415,22.9926 112.901,22.1563C 108.386,21.3203 100.192,17.976 94.0053,17.8087C 87.8183,17.6416 87.8181,21.9893 87.6511,22.658C 87.4838,23.327 84.4738,26.1698 83.9723,24.163C 83.4706,22.1563 77.4508,24.163 77.4508,24.163L 74.1065,25.3335L 70.9294,21.1532L 68.0865,20.1499 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 107.362,48.1383C 108.003,48.7237 108.156,51.9425 109.285,49.894C 110.414,47.8457 115.074,50.4163 114.573,48.744C 114.071,47.0717 106.86,48.6397 107.362,48.1383 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 79.1229,82.02C 79.123,82.0199 84.808,84.1939 86.1459,86.2003C 87.4838,88.2069 89.3231,87.8725 88.9888,86.5346C 88.6544,85.1969 85.9789,81.8526 85.9789,81.8526L 79.4575,79.5116L 79.1229,82.02 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 89.8245,88.7086C 89.8246,88.7085 90.8276,90.8826 91.8311,90.7152C 92.8345,90.5478 93.336,89.2103 94.0051,89.3773C 94.674,89.5445 94.3395,87.2034 94.3395,87.2034L 90.4935,87.2034L 89.8245,88.7086 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 85.8113,90.0463L 87.4835,91.2169L 87.6508,89.7117L 86.4803,88.5413L 85.8113,90.0463 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 79.6242,97.9057C 79.6243,97.9056 83.1356,100.08 81.798,102.588C 80.4604,105.096 75.2766,109.444 75.1095,111.952C 74.9423,114.46 75.4438,120.146 77.6177,122.486C 79.7916,124.827 84.9752,128.005 83.4703,133.021C 81.9654,138.038 79.1226,142.051 78.2866,143.723C 77.4506,145.395 77.9522,148.071 77.9522,148.071L 76.1129,151.582L 78.4539,155.261L 83.3032,148.74L 85.8114,148.74L 87.818,143.221L 91.8312,143.723L 102.867,136.533C 102.867,136.533 107.215,138.205 108.553,134.192C 109.891,130.179 110.894,125.497 113.402,124.66C 115.91,123.824 117.583,120.814 117.583,120.814L 108.72,114.126L 109.723,111.785L 104.54,113.791C 104.54,113.791 106.044,108.775 104.874,107.939C 103.704,107.102 102.7,104.26 102.533,103.591C 102.366,102.922 95.8444,96.5678 95.8444,96.5678L 92.1656,99.2432L 88.4869,94.7285C 88.4869,94.7285 84.6407,92.2203 84.4737,95.3974C 84.3065,98.5745 83.972,97.7384 83.972,97.7384L 79.6242,97.9057 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 122.265,45.5667C 122.265,45.5665 123.77,49.0784 125.275,49.2454C 126.78,49.4126 127.783,48.075 127.616,47.4058C 127.449,46.7371 123.435,44.5633 123.435,44.5633L 122.265,45.5667 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 125.943,36.2026C 125.944,36.2025 126.779,39.8814 128.452,40.5503C 130.124,41.2188 132.131,39.2124 132.131,39.2124L 126.445,35.0318L 125.943,36.2026 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 137.649,57.1045C 138.318,57.1043 140.659,56.2684 140.659,56.2684L 142.498,57.7733L 144.672,56.6026L 140.993,48.7435L 143.669,44.5631L 138.151,40.0482L 136.144,45.0648L 137.816,48.5763C 137.816,48.5763 138.819,51.2519 137.482,51.9205C 136.144,52.5894 137.315,57.1043 137.649,57.1045 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-width=\"0.2\" stroke-linejoin=\"round\" d=\"M 135.14,45.2325C 135.14,45.2325 136.812,47.741 136.311,48.577C 135.809,49.4129 134.639,50.5833 134.639,50.5833\"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 140.826,37.8751C 140.847,37.4862 140.826,38.7113 143.668,42.5571C 146.511,46.4029 144.672,50.0819 145.006,51.4194C 145.341,52.7572 147.013,58.1082 147.013,58.1082L 149.354,64.7968L 145.174,70.8165L 148.852,72.3216C 148.852,72.3216 151.528,74.83 148.183,74.4954C 144.839,74.161 144.504,71.8201 143.836,71.8199C 143.167,71.8199 141.495,75.4986 141.495,75.4986L 145.675,83.6923L 151.528,82.6889L 154.538,79.5118C 154.538,79.5118 156.544,77.0037 157.046,78.1741C 157.548,79.3447 159.052,82.8563 159.052,82.8563C 159.052,82.8563 160.39,76.6694 158.216,70.4823C 156.043,64.2952 151.528,51.5869 149.521,48.4095C 147.515,45.2324 143.502,38.7108 140.826,37.8751 Z \"/>\r\n\t<path fill=\"#99C21D\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#8DD7FA\" stroke-opacity=\"1\" d=\"M 155.875,86.368C 153.367,84.8627 150.19,85.3647 148.852,86.368C 147.515,87.371 145.675,86.8696 145.675,89.5449C 145.675,92.2203 145.173,94.3944 146.01,95.0631C 146.846,95.7319 149.354,95.5649 149.354,96.2335C 149.354,96.9024 147.682,99.2436 145.174,100.08C 142.665,100.916 140.659,104.427 141.328,104.762C 141.996,105.096 147.18,103.758 147.849,103.926C 148.518,104.093 145.341,106.768 143.167,109.109C 140.993,111.45 141.495,115.296 141.996,116.132C 142.498,116.968 145.006,117.972 144.337,120.647C 143.669,123.323 142.163,127.002 141.328,127.837C 140.491,128.674 137.649,134.359 136.311,135.362C 134.973,136.366 130.96,140.212 130.96,140.212C 130.96,140.212 142.163,134.861 148.016,123.824C 153.869,112.788 159.721,94.3944 159.554,86.3678C 159.387,78.3413 157.046,86.8696 156.544,83.0234C 156.043,79.1773 156.21,86.2005 155.875,86.368 Z \"/>\r\n</svg>");
                this._MainGlyph = CM.BridgeHacks.Div(CM.BridgeHacks.Div(this._Element, "main-glyph"));
                CM.BridgeHacks.Div(earth, "cloud cloud1", "<svg viewBox=\"0 0 177.70 177.29\"><path fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#B4B4B4\" stroke-opacity=\"1\" d=\"M 22.7842,38.1269C 22.8304,38.1051 17.4141,38.8305 16.8556,41.085C 16.297,43.3398 16.1895,47.728 19.5955,48.646C 23.0013,49.564 29.9646,49.4085 36.591,48.3675C 43.3164,47.3109 49.4358,45.8221 53.24,44.5318C 56.0728,43.5711 61.4343,40.3867 56.6062,36.4002C 51.778,32.414 42.4907,34.6141 41.9322,36.8687C 41.3738,39.1231 44.5297,33.8419 39.6714,32.1297C 34.813,30.4176 33.1757,36.1254 33.1757,36.1254C 33.1757,36.1254 35.427,29.5409 30.3889,28.4039C 25.3507,27.2674 25.4506,31.7689 24.0536,32.3526C 22.6565,32.9365 20.8806,35.1997 22.7842,38.1269 Z \"/></svg>");
                CM.BridgeHacks.Div(earth, "cloud cloud2", "<svg viewBox=\"0 0 177.70 177.29\"><path fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#B4B4B4\" stroke-opacity=\"1\" d=\"M 20.7643,104.428C 21.4315,104.395 18.016,97.0376 22.4366,96.2337C 26.1156,95.5648 29.794,100.08 28.4564,101.417C 27.1187,102.755 31.1317,97.4044 32.804,100.08C 34.4762,102.755 31.4663,104.595 31.4663,104.595C 31.4663,104.595 36.4827,104.929 35.6467,107.27C 34.8107,109.611 21.266,111.952 19.4267,109.945C 17.5873,107.939 15.9153,104.929 20.7643,104.428 Z \"/></svg>");
                CM.BridgeHacks.Div(earth, "cloud cloud3", "<svg viewBox=\"0 0 177.70 177.29\"><path fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#B4B4B4\" stroke-opacity=\"1\" d=\"M 63.4048,113.959C 64.5314,115.183 71.431,114.461 75.7788,112.119C 80.1266,109.778 89.3234,117.638 92.6679,106.601C 96.0122,95.5648 85.8118,103.926 88.4875,106.434C 91.1633,108.942 87.8184,99.0765 82.6349,101.25C 77.4515,103.424 78.9561,100.247 78.9561,100.247C 78.9561,100.247 77.1165,92.7221 71.7658,96.5679C 66.4149,100.414 66.2475,105.932 68.2542,107.103C 70.2608,108.273 54.877,106.601 63.4048,113.959 Z \"/></svg>");
                CM.BridgeHacks.Div(earth, "cloud cloud4", "<svg viewBox=\"0 0 177.70 177.29\"><path fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#B4B4B4\" stroke-opacity=\"1\" d=\"M 88.7766,63.2114C 88.9969,63.3701 81.2516,60.2017 81.0846,64.5493C 80.9175,68.8966 80.2485,69.7329 87.1046,69.7327C 93.9605,69.7327 111.852,67.2247 112.856,65.5523C 113.859,63.8802 115.197,56.3555 111.853,57.3587C 108.508,58.3619 109.01,59.6997 109.01,59.6997C 109.01,59.6997 109.177,54.5162 106.669,56.021C 104.161,57.5257 104.161,58.5293 104.161,58.5293C 104.161,58.5293 107.17,49.3325 98.4753,47.493C 89.7801,45.6536 93.2914,55.0179 94.9638,56.857C 96.6359,58.6964 93.4587,54.349 89.7801,57.526C 86.1013,60.7031 88.2753,61.2045 88.7766,63.2114 Z \"/></svg>");
                CM.BridgeHacks.Div(earth, "cloud cloud5", "<svg viewBox=\"0 0 177.70 177.29\"><path fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#B4B4B4\" stroke-opacity=\"1\" d=\"M 143.836,89.7124C 144.511,90.0341 143.669,80.014 149.354,80.6827C 155.04,81.3514 154.538,85.0302 154.538,85.0302C 154.538,85.0302 159.721,82.8565 161.059,85.5318C 162.397,88.2074 161.394,89.2105 161.394,89.2105C 161.394,89.2105 164.571,87.3714 165.742,89.3778C 164.905,98.9091 150.358,95.3975 150.358,95.3975C 150.079,95.9549 147.18,96.2337 143.669,98.2403C 140.157,100.247 140.993,100.414 134.974,97.7386C 128.954,95.0631 136.813,86.535 143.836,89.7124 Z \"/></svg>");
                CM.BridgeHacks.Div(earth, "cloud cloud6", "<svg viewBox=\"0 0 177.70 177.29\"><path fill=\"#FFFFFF\" fill-opacity=\"1\" stroke-linejoin=\"round\" stroke=\"#B4B4B4\" stroke-opacity=\"1\" d=\"M 128.425,150.2C 128.205,150.359 135.95,147.191 136.117,151.538C 136.284,155.886 136.953,156.722 130.097,156.722C 123.241,156.722 105.349,154.214 104.346,152.541C 103.342,150.869 102.005,143.345 105.349,144.348C 108.693,145.351 108.192,146.689 108.192,146.689C 108.192,146.689 108.025,141.505 110.533,143.01C 113.041,144.515 113.041,145.518 113.041,145.518C 113.041,145.518 110.031,136.321 118.726,134.482C 127.422,132.643 123.91,142.007 122.238,143.846C 120.566,145.685 123.743,141.338 127.422,144.515C 131.1,147.692 128.926,148.193 128.425,150.2 Z \"/></svg>");
            }
        },
        methods: {
            AppendPeer: function (p) {
                if (this.PeerExists(p)) {
                    return;
                }
                this._Peers.add(new CM.Javascript.ServerProgressIndicator.PeerVisual(this._PeerHolder, p, ((this._Peers.Count + 1) | 0)));
                this.Arrange();
            },
            AppendPeers: function (ar) {
                for (var i = 0; i < ar.Count; i = (i + 1) | 0) {
                    if (!this.PeerExists(ar.getItem(i))) {
                        this._Peers.add(new CM.Javascript.ServerProgressIndicator.PeerVisual(this._PeerHolder, ar.getItem(i), ((this._Peers.Count + 1) | 0)));
                    }
                }
                this.Arrange();
            },
            Arrange: function () {
                var width = 160; // this might change
                var height = 160;
                var padding = 20;
                var size = Math.min(width, height);
                var centerY = (Bridge.Int.div(size, 2)) | 0;
                var centerX = (Bridge.Int.div(size, 2)) | 0;
                var radius = (Bridge.Int.div((((size - 40) | 0)), 2)) | 0;
                for (var i = 0; i < this._Peers.Count; i = (i + 1) | 0) {
                    var visual = this._Peers.getItem(i);
                    var peerEl = visual.Element;
                    var pos = this.Pos(i);
                    var x = centerX + radius * Math.cos(pos);
                    var y = centerY + radius * Math.sin(pos);
                    peerEl.style.position = "absolute";
                    x -= 16;
                    y -= 16;
                    peerEl.style.marginTop = System.Single.format(y) + "px";
                    peerEl.style.marginLeft = System.Single.format(x) + "px";
                }
            },
            Remove: function () {
                window.setTimeout(Bridge.fn.bind(this, $asm.$.CM.Javascript.ServerProgressIndicator.f2), 500);
            },
            SetMainGlyph: function (glyph) {
                this._MainGlyph.innerHTML = (glyph != null ? System.String.concat(glyph.ToString(32, 32, "#000000"), " ") : "");
            },
            Show: function () {
                this._Element.style.display = "block";
            },
            Update: function (peer, glyph, summary, details) {
                if (details === void 0) { details = null; }
                for (var i = 0; i < this._Peers.Count; i = (i + 1) | 0) {
                    var p = this._Peers.getItem(i);
                    if (Bridge.referenceEquals(p.Peer.EndPoint, peer.EndPoint)) {
                        p.Update(glyph, summary, details);
                        return;
                    }
                }
            },
            PeerExists: function (p) {
                for (var i = 0; i < this._Peers.Count; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this._Peers.getItem(i).Peer, p)) {
                        return true;
                    }
                }
                return false;
            },
            Pos: function (i) {
                var toRadian = 0.017453292519943295;
                return (-90 + ((i / this._Peers.Count) * 360)) * toRadian;
            }
        }
    });

    Bridge.ns("CM.Javascript.ServerProgressIndicator", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.ServerProgressIndicator, {
        f1: function () {
            CM.BridgeHacks.RemoveEx(this._Element);
        },
        f2: function () {
            CM.BridgeHacks.AddClass(this._Element, "popout");
            window.setTimeout(Bridge.fn.bind(this, $asm.$.CM.Javascript.ServerProgressIndicator.f1), 1000);
        }
    });

    Bridge.define("CM.Javascript.ServerProgressIndicator.PeerVisual", {
        fields: {
            Element: null,
            Peer: null,
            _Details: null,
            _Glyph: null,
            _Summary: null
        },
        ctors: {
            ctor: function (parent, peer, number) {
                this.$initialize();
                this.Peer = peer;
                this.Element = CM.BridgeHacks.Div(parent, "peer popin");
                CM.BridgeHacks.Div(this.Element, "icon", CM.Javascript.Assets.SVG.Computer.ToString(32, 32, "#000000"));
                this._Glyph = CM.BridgeHacks.Div(this.Element, "glyph");
                this.Element.onclick = Bridge.fn.bind(this, function (e) {
                    CM.Javascript.App.Identity.PopupBubble.Show(this.Element, "Computer #" + number, this._Summary, this._Details);
                });
            }
        },
        methods: {
            Update: function (glyph, summary, details) {
                this._Summary = summary;
                this._Details = details;
                var colour = Bridge.referenceEquals(glyph, CM.Javascript.Assets.SVG.CircleTick) ? "#288600" : Bridge.referenceEquals(glyph, CM.Javascript.Assets.SVG.CircleError) ? "#cc0000" : "#cccccc";
                this._Glyph.innerHTML = glyph.ToString(12, 12, colour);
            }
        }
    });

    /**
     * String resources. All actual text is stored in a *.CSV format dictionary for easy translation
     by professional services, if the need arises.
     *
     * @class CM.Javascript.SR
     */
    Bridge.define("CM.Javascript.SR", {
        statics: {
            fields: {
                Langauges: null,
                CurrentLanguage: null,
                CHAR_DECIMAL: null,
                CHAR_THOUSAND_SEPERATOR: null,
                /**
                 * Civil Money Provides
                 • A universal basic income
                 • Implicit taxation
                 • Seeding based on regional productivity
                 • Transparent transactions and accountability
                 • A more civilised, cash-free society
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                HTML_CIVIL_MONEY_PROVIDES: null,
                /**
                 * Account Name
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ACCOUNT_NAME: null,
                /**
                 * We apologise that not all languages are available. If you are interested in helping out, please contact us.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_CHOOSE_YOUR_LANGUAGE: null,
                /**
                 * Go
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_GO: null,
                /**
                 * Create my account
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_CREATE_MY_ACCOUNT: null,
                /**
                 * Please Select
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PLEASE_SELECT: null,
                /**
                 * Re-enter the pass phrase
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_REENTER_PASS_PHRASE: null,
                /**
                 * Region
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_REGION: null,
                /**
                 * Civil Money is not like traditional online banking systems...
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                HTML_REGISTER_INTRO: null,
                /**
                 * Secret pass phrase
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_SECRET_PASS_PHRASE: null,
                /**
                 * A more civilised fiat alternative.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_CIVIL_MONEY_SUB_HEADING: null,
                /**
                 * Account age
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ACCOUNT_AGE: null,
                /**
                 * Income eligibility
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_INCOME_ELIGIBILITY: null,
                /**
                 * Working
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_INCOME_ELIGIBILITY_WORKING: null,
                /**
                 * Looking for Working
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_INCOME_ELIGIBILITY_LOOKING_FOR_WORK: null,
                /**
                 * Health Problem
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_INCOME_ELIGIBILITY_HEALTH_PROBLEM: null,
                /**
                 * Retired
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_INCOME_ELIGIBILITY_RETIRED: null,
                /**
                 * Attributes
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ACCOUNT_ATTRIBUTES: null,
                /**
                 * Not set
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_VALUE_NOT_SET: null,
                /**
                 * {0} day(s)
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_DAYS_OLD: null,
                /**
                 * {0} year(s)
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_YEARS_OLD: null,
                /**
                 * Request a payment
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_REQUEST_A_PAYMENT: null,
                /**
                 * Acceptance logos
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ACCEPTANCE_LOGOS: null,
                /**
                 * Make a payment
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_MAKE_A_PAYMENT: null,
                /**
                 * Edit account
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_EDIT_ACCOUNT: null,
                
                LABEL_SKILLS_AND_SERVICES: null,
                /**
                 * Loading, please wait...
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_LOADING_PLEASE_WAIT: null,
                /**
                 * Good Standing
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_REPUTATION_GOOD: null,
                /**
                 * Overspent
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_REPUTATION_OVERSPENT: null,
                /**
                 * Bad
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_REPUTATION_BAD: null,
                /**
                 * Please select your current region.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PLEASE_SELECT_YOUR_REGION: null,
                /**
                 * Your re-entered pass phrase doesn't match.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PASSWORD_REENTRY_MISMATCH: null,
                /**
                 * Please enter a secret pass phrase.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PASSWORD_REQUIRED: null,
                /**
                 * Please enter an account name.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ACCOUNT_NAME_REQUIRED: null,
                /**
                 * Cancel
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_CANCEL: null,
                /**
                 * Retry
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_RETRY: null,
                /**
                 * Please wait
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PLEASE_WAIT: null,
                /**
                 * Generating a new secret key
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_GENERATING_NEW_SECRET_KEY: null,
                /**
                 * Processing your pass phrase
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_PROCESSING_PASS_PHRASE: null,
                /**
                 * Encrypting your secret key
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_ENCRYPTING_SECRET_KEY: null,
                /**
                 * Signing your information
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_SIGNING_INFORMATION: null,
                /**
                 * We were unable to sign the information. This usually means an incorrect password was entered.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_SIGNING_FAILED: null,
                /**
                 * Contacting computers on the network
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_CONTACTING_NETWORK: null,
                /**
                 * Account created successfully
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_ACCOUNT_CREATED_SUCCESFULLY: null,
                /**
                 * Account updated successfully
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_ACCOUNT_UPDATED_SUCCESSFULLY: null,
                /**
                 * A problem occurred
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_A_PROBLEM_OCCURRED: null,
                /**
                 * Error (click for details)
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_ERROR_CLICK_FOR_DETAILS: null,
                /**
                 * Checking account name
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_CHECKING_ACCOUNT_NAME: null,
                /**
                 * We can't find account '{0}'. If this is unexpected, please try again later.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_ACCOUNT_NOT_FOUND: null,
                /**
                 * Connecting
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_CONNECTING: null,
                /**
                 * Corroborating
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_CORROBORATING: null,
                /**
                 * Committing data
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_COMITTING_DATA: null,
                /**
                 * OK
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_OK: null,
                /**
                 * Go to your account
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_GO_TO_YOUR_ACCOUNT: null,
                /**
                 * Go to {0}
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_GO_TO_ACCOUNT_BLANK: null,
                /**
                 * Account name '{0}' is already taken.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ACCOUNT_BLANK_IS_ALREADY_TAKEN: null,
                /**
                 * Account name '{0}' looks OK!
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ACCOUNT_BLANK_LOOKS_OK: null,
                /**
                 * A valid payee account name is required.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_A_VALID_PAYEE_ACCOUNT_NAME_IS_REQUIRED: null,
                /**
                 * Your account name is required.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_YOUR_ACCOUNT_NAME_IS_REQUIRED: null,
                /**
                 * Your account name
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_YOUR_ACCOUNT_NAME: null,
                /**
                 * The amount is invalid.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_THE_AMOUNT_IS_INVALID: null,
                /**
                 * Unfortunately we can't reach a server right now.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_PROBLEM_REACHING_A_SERVER: null,
                /**
                 * You'll need to re-enter this any time you do anything. Use multiple words to make up a memorable phrase. Complixity is not as important as overall length - an all lowercase sentence with spaces is fine.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_NEW_PASSWORD_INSTRUCTIONS: null,
                /**
                 * Account names contain only letters, numbers periods and dashes and must be at least three characters in length.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ACCOUNT_NAME_INSTRUCTIONS: null,
                /**
                 * This is roughly equal to USD${0} or {1} hour(s) of somebody's time.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_AMOUNT_HINT: null,
                /**
                 * You will have a //c {0} balance and {1} reputation after payment.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_REMAINING_BALANCE_HINT: null,
                /**
                 * Sent transaction
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ALERT_SENT_TRANSACTION: null,
                /**
                 * Refunded transaction
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ALERT_REFUNDED_TRANSACTION: null,
                /**
                 * Cancelled transaction
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ALERT_CANCELLED_TRANSACTION: null,
                /**
                 * Declined transaction
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ALERT_DECLINED_TRANSACTION: null,
                /**
                 * Accepted transaction
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ALERT_ACCEPTED_TRANSACTION: null,
                /**
                 * Disputed transaction
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ALERT_DISPUTED_TRANSACTION: null,
                /**
                 * Account {0} has been modified
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ALERT_ACCOUNT_BLANK_MODIFIED: null,
                /**
                 * Clear
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_CLEAR: null,
                /**
                 * Please pay
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_PLEASE_PAY: null,
                /**
                 * Matching transaction received from
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_MATCHING_TRANSACTION_RECEIVED_FROM: null,
                /**
                 * Point of Sale
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_POINT_OF_SALE: null,
                /**
                 * Confirmation(s) (as in '5 confirmation(s)')
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_CONFIRMATIONS: null,
                /**
                 * Notification(s) (as in '5 Notification(s)')
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_NOTIFICATIONS: null,
                /**
                 * Dismiss All
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_DISMISS_ALL: null,
                /**
                 * Refunded
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYEE_STATUS_REFUND: null,
                /**
                 * Pending
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYEE_STATUS_NOTSET: null,
                /**
                 * Accepted
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYEE_STATUS_ACCEPT: null,
                /**
                 * Declined
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYEE_STATUS_DECLINE: null,
                /**
                 * Accepted
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYER_STATUS_ACCEPT: null,
                /**
                 * Pending
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYER_STATUS_NOTSET: null,
                /**
                 * Disputed
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYER_STATUS_DISPUTE: null,
                /**
                 * Cancelled
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYER_STATUS_CANCEL: null,
                /**
                 * Refund
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYEE_STATUS_REFUND_VERB: null,
                /**
                 * Accept
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYEE_STATUS_ACCEPT_VERB: null,
                /**
                 * Decline
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYEE_STATUS_DECLINE_VERB: null,
                /**
                 * Accept
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYER_STATUS_ACCEPT_VERB: null,
                /**
                 * Dispute
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYER_STATUS_DISPUTE_VERB: null,
                /**
                 * Cancel
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAYER_STATUS_CANCEL_VERB: null,
                /**
                 * Amateur
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_SKILL_LEVEL_AMATEUR: null,
                /**
                 * Qualified
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_SKILL_LEVEL_QUALIFIED: null,
                /**
                 * Experienced
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_SKILL_LEVEL_EXPERIENCED: null,
                /**
                 * Certified
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_SKILL_LEVEL_CERTIFIED: null,
                /**
                 * I promise to follow the Civil Money Honour Code
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                HTML_I_PROMISE_TO_FOLLOW_THE_HONOUR_CODE: null,
                /**
                 * <b>I promise to try and not be an jerk.</b> If somebody else is being one to me, I will ignore them or <b>politely</b> remind them about the Civil Money Honour Code.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                HTML_CIVIL_MONEY_HONOUR_CODE: null,
                /**
                 * If your web browser's address bar is not visible or its URL does not begin with
                 https://civil.money/ or if in the future you don't receive this reminder, please
                 do not type in your pass phrase, as the page you are on might be trying to
                 steal your account.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_CIVIL_MONEY_SECURITY_REMINDER: null,
                /**
                 * I've checked my web browser's address and it definitely begins with <b>https://civil.money/</b>
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                HTML_IVE_CHECKED_MY_WEB_BROWSER_ADDRESS: null,
                /**
                 * Own this account?
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_OWN_THIS_ACCOUNT: null,
                /**
                 * Transaction History
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_TRANSACTION_HISTORY: null,
                /**
                 * Transaction Details
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_TRANSACTION_DETAILS: null,
                /**
                 * Choose your language
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_CHOOSE_YOUR_LANGUAGE: null,
                /**
                 * Civil Money
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_CIVIL_MONEY: null,
                /**
                 * History
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_HISTORY: null,
                /**
                 * Any accounts that have been viewed on this device are listed here for quick access.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_HISTORY_INTRO: null,
                /**
                 * There are no items in your viewing history.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_HISTORY_NO_ITEMS: null,
                /**
                 * Home
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_HOMEPAGE: null,
                /**
                 * Help
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_HELP: null,
                /**
                 * Peers
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_PEERS: null,
                /**
                 * Regions
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_REGIONS: null,
                /**
                 * Register
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_REGISTER: null,
                /**
                 * Not Found
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_NOT_FOUND: null,
                /**
                 * The link you have followed appears to be invalid.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_LINK_APPEARS_TO_BE_INVALID: null,
                /**
                 * If you're having trouble with the Civil Money service or have a question, please email us for assistance.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_HELP_INTRO: null,
                /**
                 * We regret that help is presently only available in English. If you would like to volunteer to help people in your native tongue please reach out.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_HELP_IN_ENGLISH_ONLY: null,
                /**
                 * Votes
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_VOTING: null,
                /**
                 * When fundamental changes to the monetary system become necessary, 
                 everybody has an opportunity to vote for or against those changes.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                HTML_VOTES_INTRO: null,
                /**
                 * There are currently no propositions to display.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_VOTES_NO_PROPOSITIONS: null,
                /**
                 * Voting close date
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_VOTING_CLOSE_DATE: null,
                /**
                 * Eligible participants
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_VOTING_ELIGIBLE_PARTICIPANTS: null,
                /**
                 * Ineligible or unverified participants
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_VOTING_INELIGIBLE_UNVERIFIED_PARTICIPANTS: null,
                /**
                 * For
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_VOTE_FOR: null,
                /**
                 * Against
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_VOTE_AGAINST: null,
                /**
                 * Ineligible
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_VOTE_INELIGIBLE: null,
                /**
                 * Learn more or vote
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_LEARN_MORE_OR_VOTE: null,
                /**
                 * Download data
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_DOWNLOAD_DATA: null,
                /**
                 * Current Propositions
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_CURRENT_PROPOSITIONS: null,
                /**
                 * Closed Propositions
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_CLOSED_PROPOSITIONS: null,
                /**
                 * Proposition #{0}
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_PROPOSITION_NUMBER: null,
                /**
                 * Known Negative Impacts
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_KNOWN_NEGATIVE_IMPACTS: null,
                /**
                 * Known Positive Impacts
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_KNOWN_POSITIVE_IMPACTS: null,
                /**
                 * My account
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_MY_ACCOUNT: null,
                /**
                 * My vote
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_MY_VOTE: null,
                /**
                 * Your vote selection is required.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_YOUR_VOTE_SELECTION_IS_REQUIRED: null,
                /**
                 * Your vote has been stored successfully :)
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_VOTE_SUBMITTED_SUCCESSFULLY: null,
                /**
                 * Your last vote '{0}' was on {1}.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_YOUR_LAST_VOTE_OF_BLANK_WAS_ON_BLANK: null,
                /**
                 * You are not presently eligible for voting, however you may submit an ineligible vote for testing.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_YOU_ARE_NOT_PRESENTLY_ELIGIBLE_FOR_VOTING: null,
                /**
                 * Get Involved
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_GET_INVOLVED: null,
                /**
                 * Civil Money is built and maintained by unpaid volunteers. The intention 
                 is to establish a steering group comprised of experts from all corners of
                 the world in applicable fields -- network and software security, finance,
                 business development, law and politics.If you're passionate about 
                 rebuilding the world's monetary system for a better society, please 
                 reach out.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_GET_INVOLVED_INTRO: null,
                /**
                 * Install a Server
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_INSTALL_A_SERVER: null,
                /**
                 * Download
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_DOWNLOAD: null,
                /**
                 * Source Code
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_SOURCE_CODE: null,
                /**
                 * The Civil Money system is completely open source. Access to
                 the repository will be made a available after our initial pilot phase.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_SOURCE_CODE_INTRO: null,
                /**
                 * Learn more
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_LEARN_MORE: null,
                /**
                 * or (as in do X or Y.)
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_OR: null,
                /**
                 * Balance
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_BALANCE: null,
                /**
                 * Don't have an account?
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_DONT_HAVE_AN_ACCOUNT: null,
                /**
                 * About Civil Money
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_ABOUT: null,
                /**
                 * Civil Money is a debt-free monetary system.
                 etc..
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                HTML_ABOUT: null,
                /**
                 * Account Settings
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_ACCOUNT_SETTINGS: null,
                /**
                 * Account settings are designed to show minimal personally identifying information
                 whilst still providing some sort of context about your role in the community.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ACCOUNT_SETTINGS_INTRO: null,
                /**
                 * There is no reason to lie here...
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_INCOME_ELIGIBILITY_INTRO: null,
                /**
                 * List your skills, services or anything you can do...
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_SKILLS_AND_SERVICES_INTRO: null,
                /**
                 * Add another
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ADD_ANOTHER_ITEM: null,
                /**
                 * Push Notifications
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PUSH_NOTIFICATIONS: null,
                /**
                 * Specify one or more HTTP end-points...
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PUSH_NOTIFICATIONS_INTRO: null,
                /**
                 * Change my secret pass phrase
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_CHANGE_MY_PASS_PHRASE: null,
                /**
                 * Continue
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_CONTINUE: null,
                /**
                 * Skill or server
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_ENTER_SKILL_OR_SERVICE: null,
                /**
                 * Label
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_LABEL: null,
                /**
                 * Security
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_SECURITY: null,
                /**
                 * There were no items returned by the network...
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_NO_ITEMS_FOUND: null,
                /**
                 * Civil Money Regions
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_CIVIL_MONEY_REGIONS: null,
                /**
                 * Instead of traditional taxation, geographical regions generate...
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_REGIONS_INTRO: null,
                /**
                 * Instead of traditional taxation, geographical regions generate...
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_BROWSE_REGIONS: null,
                /**
                 * Recent revenue
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_RECENT_REVENUE: null,
                /**
                 * Revenue reports are updated periodically...
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_REVENUE_REPORT_HINT: null,
                /**
                 * Last updated
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_TIME_LAST_UPDATED: null,
                /**
                 * Pay To
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAY_TO: null,
                /**
                 * From
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PAY_FROM: null,
                /**
                 * Memo
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_MEMO: null,
                /**
                 * Amount
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_AMOUNT: null,
                /**
                 * Optional
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_OPTIONAL: null,
                /**
                 * Tag/Order #
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_TAG: null,
                /**
                 * Transaction created successfully.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_TRANSACTION_CREATED_SUCCESSFULLY: null,
                /**
                 * Transaction updated successfully.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_TRANSACTION_UPDATED_SUCCESSFULLY: null,
                /**
                 * None of the transactions could be updated.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_NO_TRANSACTIONS_UPDATED: null,
                /**
                 * All transaction were updated successfully
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_ALL_TRANSACTIONS_UPDATED: null,
                /**
                 * Some of the transactions could not be updated.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_STATUS_SOME_TRANSACTIONS_FAILED: null,
                /**
                 * Link for payment to {0}
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_LINK_FOR_PAYMENT_TO: null,
                /**
                 * Read only
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_READONLY: null,
                /**
                 * Preview
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                LABEL_PREVIEW: null,
                /**
                 * The Civil Money Honour Code
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.SR
                 * @type string
                 */
                TITLE_THE_CIVIL_MONEY_HONOUR_CODE: null,
                /**
                 * The US dictionary.
                 *
                 * @static
                 * @private
                 * @readonly
                 * @memberof CM.Javascript.SR
                 * @default "\r\nKEY,REFERENCE,NATIVE\r\nLABEL_CIVIL_MONEY_SUB_HEADING,A civilized monetary framework.,\r\nHTML_CIVIL_MONEY_PROVIDES,\"<h3>Civil Money is free to join, accepts no personally identifying information and gives you:</h3>\r\n<ul>\r\n<li>A <b>generous</b> universal basic income</li>\r\n<li>Easy dispute resolution</li>\r\n<li>Automatic taxation/funding for your country and region</li>\r\n<li>Transparent transactions, honesty and accountability</li>\r\n<li>A more civilized cash-free society</li>\r\n</ul>\",\r\nLABEL_CHOOSE_YOUR_LANGUAGE,\"We apologize that not all languages are available. If you are interested in helping out, please contact us.\",\r\nHTML_I_PROMISE_TO_FOLLOW_THE_HONOUR_CODE, \"I promise to follow the <b>Civil Money Honor Code</b>\",\r\nHTML_CIVIL_MONEY_HONOUR_CODE,\"<ol>\r\n<li>I will try my best to not be a jerk. If somebody is being one to me, I will either ignore them or politely remind them about the Civil Money Honor Code.</li>\r\n<li>I will respect any person's decision to decline my payment, regardless of reason or for no reason at all.</li>\r\n<li>I will hold in the highest regard any person doing an unpleasant job in exchange for Civil Money and endeavor to eliminate unpleasant jobs through the sharing of ideas, science and ingenuity.</li>\r\n<li>I accept that Civil Money is backed only by the community at large and holds no intrinsic value, and is also an imperfect system. As such, the higher the cost of a good or service, the closer I will scrutinize a person's credit rating and transaction history, just as banks do today for a loan.</li>\r\n<li>I accept that the value of all Civil Money transactions begin to depreciate to zero after 12 months, which helps to stimulate the economy, aids in the prevention of inflation, over accumulation of money, and forgives people of their debts to society.</li>\r\n</ol>\",\r\nTITLE_THE_CIVIL_MONEY_HONOUR_CODE,The Civil Money Honor Code,\r\n\r\n\r\n"
                 * @type string
                 */
                EN_US: null,
                /**
                 * The default English dictionary.
                 *
                 * @static
                 * @private
                 * @readonly
                 * @memberof CM.Javascript.SR
                 * @default "\r\nKEY,REFERENCE,NATIVE\r\nCHAR_DECIMAL,.,\r\nCHAR_THOUSAND_SEPERATOR,\",\",\r\nTITLE_CIVIL_MONEY,Civil Money,Civil Money\r\nLABEL_CIVIL_MONEY_SUB_HEADING,A civilised monetary framework.,\r\nLABEL_ACCOUNT_NAME,Account Name,\r\nLABEL_GO,Go,\r\nHTML_CIVIL_MONEY_PROVIDES,\"<h3>Civil Money is free to join, accepts no personally identifying information and gives you:</h3>\r\n<ul>\r\n<li>A <b>generous</b> universal basic income</li>\r\n<li>Easy dispute resolution</li>\r\n<li>Automatic taxation/funding for your country and region</li>\r\n<li>Transparent transactions, honesty and accountability</li>\r\n<li>A more civilised cash-free society</li>\r\n</ul>\",\r\nLABEL_CREATE_MY_ACCOUNT,Create my account,\r\nTITLE_PEERS,Peers,\r\nTITLE_REGIONS,Regions,\r\nTITLE_HISTORY,History,\r\nTITLE_HOMEPAGE,Home,\r\nTITLE_REGISTER,Register,\r\nTITLE_HELP,Help,\r\nTITLE_CHOOSE_YOUR_LANGUAGE,Choose your language,\r\nLABEL_CHOOSE_YOUR_LANGUAGE,\"We apologise that not all languages are available. If you are interested in helping out, please contact us.\",\r\nHTML_REGISTER_INTRO,\"Civil Money is not like traditional websites. It does not want even so much as your e-mail address, let alone any of your personally identifying information.\r\n<br/>\r\n<br/>The authenticity and reputation of your account is established only between yourself and the people or businesses in real life that you do business with.\r\n<br/>\r\n<br/>Please choose an account name and a secret pass phrase below to get started.\r\n\",\r\nLABEL_HISTORY_INTRO,Any accounts that have been viewed on this device are listed here for quick access.,\r\nLABEL_HISTORY_NO_ITEMS,There are no items in your viewing history.,\r\nLABEL_SECRET_PASS_PHRASE,Secret pass phrase,\r\nLABEL_REENTER_PASS_PHRASE,Re-enter the pass phrase,\r\nLABEL_REGION,Region,\r\nLABEL_PLEASE_SELECT,Please select,\r\nLABEL_DAYS_OLD,{0} day(s) old,\r\nLABEL_YEARS_OLD,{0} year(s) old,\r\nLABEL_ACCOUNT_AGE,Account age,\r\nLABEL_INCOME_ELIGIBILITY,Income eligibility,\r\nLABEL_ACCOUNT_ATTRIBUTES,Attributes,\r\nLABEL_INCOME_ELIGIBILITY_WORKING,Working,\r\nLABEL_INCOME_ELIGIBILITY_LOOKING_FOR_WORK,Looking for work,\r\nLABEL_INCOME_ELIGIBILITY_HEALTH_PROBLEM,Health Problem,\r\nLABEL_INCOME_ELIGIBILITY_RETIRED,Retired,\r\nLABEL_VALUE_NOT_SET,Not set,\r\nTITLE_OWN_THIS_ACCOUNT,Own this account?,\r\nLABEL_MAKE_A_PAYMENT,Make a payment,\r\nLABEL_REQUEST_A_PAYMENT,Point of Sale / Generate link,\r\nLABEL_EDIT_ACCOUNT,Edit account,\r\nLABEL_ACCEPTANCE_LOGOS,Acceptance logos,\r\nLABEL_SKILLS_AND_SERVICES,Skills & Services,\r\nTITLE_TRANSACTION_HISTORY,Transaction History,\r\nTITLE_TRANSACTION_DETAILS,Transaction Details,\r\nLABEL_LOADING_PLEASE_WAIT,\"Loading, please wait...\",\r\nLABEL_REPUTATION_GOOD,Good Standing,\r\nLABEL_REPUTATION_OVERSPENT,Overspent,\r\nLABEL_REPUTATION_BAD,Bad,\r\nLABEL_NEW_PASSWORD_INSTRUCTIONS,\"Your pass phrase is never transmitted over the internet or stored on any servers. It is irrecoverable if forgotten. Please use multiple words to make up a unique but memorable sentence. Complexity isn't as important as overall length. An all lower-cased sentence with spaces is ideal, keeping in mind that computers can do millions of guesses per second. \",\r\nHTML_I_PROMISE_TO_FOLLOW_THE_HONOUR_CODE, \"I promise to follow the <b>Civil Money Honour Code</b>\",\r\nHTML_CIVIL_MONEY_HONOUR_CODE,\"<ol>\r\n<li>I will try my best to not be a jerk. If somebody is being one to me, I will either ignore them or politely remind them about the Civil Money Honour Code.</li>\r\n<li>I will respect any person's decision to decline my payment, regardless of reason or for no reason at all.</li>\r\n<li>I will hold in the highest regard any person doing an unpleasant job in exchange for Civil Money and endeavour to eliminate unpleasant jobs through the sharing of ideas, science and ingenuity.</li>\r\n<li>I accept that Civil Money is backed only by the community at large and holds no intrinsic value, and is also an imperfect system. As such, the higher the cost of a good or service, the closer I will scrutinise a person's credit rating and transaction history, just as banks do today for a loan.</li>\r\n<li>I accept that the value of all Civil Money transactions begin to depreciate to zero after 12 months, which helps to stimulate the economy, aids in the prevention of inflation, over accumulation of money, and forgives people of their debts to society.</li>\r\n</ol>\r\n\",\r\nLABEL_PLEASE_SELECT_YOUR_REGION,Please select your current region.,\r\nLABEL_PASSWORD_REENTRY_MISMATCH,Your re-entered pass phrase doesn't match.,\r\nLABEL_PLEASE_WAIT,Please wait,\r\nLABEL_STATUS_GENERATING_NEW_SECRET_KEY,Generating new secret key,\r\nLABEL_STATUS_PROCESSING_PASS_PHRASE,Processing your pass phrase,\r\nLABEL_STATUS_ENCRYPTING_SECRET_KEY,Encrypting your secret key,\r\nLABEL_STATUS_SIGNING_INFORMATION,Signing your information,\r\nLABEL_STATUS_CONTACTING_NETWORK,Contacting computers on the network,\r\nLABEL_STATUS_ACCOUNT_CREATED_SUCCESFULLY,Account created successfully.,\r\nLABEL_STATUS_A_PROBLEM_OCCURRED,A problem occurred,\r\nLABEL_GO_TO_YOUR_ACCOUNT,Go to your account,\r\nLABEL_GO_TO_ACCOUNT_BLANK,Go to {0},\r\nLABEL_ACCOUNT_NAME_INSTRUCTIONS,\"Account names contain only letters, numbers and must be at least three characters in length.\",\r\nLABEL_ACCOUNT_BLANK_IS_ALREADY_TAKEN,Account name '{0}' is already taken.,\r\nLABEL_ACCOUNT_BLANK_LOOKS_OK,Account name '{0}' looks OK!,\r\nLABEL_STATUS_CHECKING_ACCOUNT_NAME,Checking account name,\r\nLABEL_STATUS_PROBLEM_REACHING_A_SERVER,Unfortunately we can't reach a server right now.,\r\nLABEL_CIVIL_MONEY_SECURITY_REMINDER,\"If your web browser's address bar is not visible or its URL does not begin with\rhttps://civil.money/ or if in the future you don't receive this reminder, please\rdo not type in your pass phrase, as the page you are on might be trying to \rharvest your secret pass phrase.\",\r\nHTML_IVE_CHECKED_MY_WEB_BROWSER_ADDRESS,I've checked my web browser's address and it definitely begins with <b>https://civil.money/</b>,\r\nLABEL_A_VALID_PAYEE_ACCOUNT_NAME_IS_REQUIRED,A valid payee account name is required.,\r\nLABEL_YOUR_ACCOUNT_NAME_IS_REQUIRED,Your account name is required.,\r\nLABEL_THE_AMOUNT_IS_INVALID,The amount is invalid.,\r\nLABEL_STATUS_SIGNING_FAILED,We were unable to sign the information. This usually means an incorrect password was entered.,\r\nLABEL_CANCEL,Cancel,\r\nLABEL_AMOUNT_HINT,This is roughly equal to USD${0} or {1} hour(s) of somebody's time.,\r\nLABEL_REMAINING_BALANCE_HINT,You will have a //c {0} balance and {1} reputation after payment.,\r\nLABEL_STATUS_ACCOUNT_NOT_FOUND,\"We can't find account '{0}'. If this is unexpected, please try again later.\",\r\nLABEL_RETRY,Retry,\r\nLABEL_STATUS_CONNECTING,Connecting,\r\nLABEL_STATUS_OK,OK,\r\nLABEL_STATUS_CORROBORATING,Corroborating,\r\nLABEL_STATUS_COMITTING_DATA,Committing data,\r\nLABEL_PAYEE_STATUS_NOTSET,Pending,\r\nLABEL_PAYEE_STATUS_REFUND,Refunded,\r\nLABEL_PAYEE_STATUS_DECLINE,Declined,\r\nLABEL_PAYEE_STATUS_ACCEPT,Accepted,\r\n\r\nLABEL_PAYER_STATUS_NOTSET,Pending,\r\nLABEL_PAYER_STATUS_ACCEPT,Accepted,\r\nLABEL_PAYER_STATUS_DISPUTE,Disputed,\r\nLABEL_PAYER_STATUS_CANCEL,Cancelled,\r\n\r\nLABEL_PAYEE_STATUS_REFUND_VERB,Refund,\r\nLABEL_PAYEE_STATUS_DECLINE_VERB,Decline,\r\nLABEL_PAYEE_STATUS_ACCEPT_VERB,Accept,\r\n\r\nLABEL_PAYER_STATUS_CANCEL_VERB,Cancel,\r\nLABEL_PAYER_STATUS_ACCEPT_VERB,Accept,\r\nLABEL_PAYER_STATUS_DISPUTE_VERB,Dispute,\r\n\r\nLABEL_SKILL_LEVEL_AMATEUR,Amateur,\r\nLABEL_SKILL_LEVEL_QUALIFIED,Qualified,\r\nLABEL_SKILL_LEVEL_EXPERIENCED,Experienced,\r\nLABEL_SKILL_LEVEL_CERTIFIED,Certified,\r\nLABEL_STATUS_ACCOUNT_UPDATED_SUCCESSFULLY,Account updated successfully.,\r\nLABEL_PASSWORD_REQUIRED,Please enter a secret pass phrase.,\r\nLABEL_ACCOUNT_NAME_REQUIRED,Please enter an account name.,\r\nTITLE_NOT_FOUND,Not Found,\r\nLABEL_LINK_APPEARS_TO_BE_INVALID,The link you have followed appears to be invalid.,\r\nLABEL_HELP_INTRO,\"If you're having trouble with the Civil Money service or have a question, please email us for assistance.\",\r\nLABEL_HELP_IN_ENGLISH_ONLY,\"We regret that help is presently only available in English. If you would like to volunteer to help people in your native tongue please reach out.\",\r\nTITLE_VOTING,Voting,\r\nHTML_VOTES_INTRO,\"When fundamental changes to the monetary system become necessary, everybody has an opportunity to vote for or against those changes.<br/><br/>\r\nPropositions that are up for voting are listed below. There are a few things that we do to help minimise votes coming from accounts that were specifically created in order to influence an outcome. \r<ol>\r<li>The minimum requirement for voting is a good standing and at least one settled transaction for every 30 day period, for the past year.</li>\r<li>You can change your vote at any time, however votes created or updated after the closing date will be considered ineligible.</li>\r<li>A two-thirds majority of the eligible votes is required for any proposition to pass, meaning a significant winning margin is needed before proposed changes are introduced.</li>\r<li>Voting outcomes follow the scientific method and are not locked in stone until a consensus with a reasonably low margin of error has been established.</li>\r<li>Researchers are encouraged to collect, analyse, validate and calculate results independently and report their findings to the Civil Money steering group.</li>\r<li>Everybody is welcome to download the latest voting data to confirm whether or not their vote has been counted.</li>\r</ol>\",\r\nLABEL_VOTES_NO_PROPOSITIONS,\"There are currently no propositions to display.\",\r\nLABEL_VOTING_CLOSE_DATE,Voting close date,\r\nLABEL_VOTING_ELIGIBLE_PARTICIPANTS,Eligible participants,\r\nLABEL_VOTING_INELIGIBLE_UNVERIFIED_PARTICIPANTS,Ineligible or unverified participants,\r\nLABEL_VOTE_FOR,For,\r\nLABEL_VOTE_AGAINST,Against,\r\nLABEL_VOTE_INELIGIBLE,Ineligible,\r\nLABEL_LEARN_MORE_OR_VOTE,Learn more or vote,\r\nLABEL_DOWNLOAD_DATA,Download data,\r\nLABEL_STATUS_ERROR_CLICK_FOR_DETAILS,Error (click for details),\r\nLABEL_YOUR_LAST_VOTE_OF_BLANK_WAS_ON_BLANK,Your last vote '{0}' was on {1}.,\r\nLABEL_YOU_ARE_NOT_PRESENTLY_ELIGIBLE_FOR_VOTING,\"You are not presently eligible for voting, however you may submit an ineligible vote for testing purposes.\",\r\nTITLE_CURRENT_PROPOSITIONS,Current Propositions,\r\nTITLE_CLOSED_PROPOSITIONS,Closed Propositions,\r\nTITLE_PROPOSITION_NUMBER,Proposition #{0},\r\nTITLE_KNOWN_NEGATIVE_IMPACTS,Known Negative Impacts,\r\nTITLE_KNOWN_POSITIVE_IMPACTS,Known Positive Impacts,\r\nLABEL_MY_ACCOUNT,My account,\r\nLABEL_MY_VOTE,My vote\r\nLABEL_YOUR_VOTE_SELECTION_IS_REQUIRED,Your vote selection is required.,\r\nLABEL_VOTE_SUBMITTED_SUCCESSFULLY,Your vote has been stored successfully :),\r\nTITLE_GET_INVOLVED,Get Involved,\r\nLABEL_GET_INVOLVED_INTRO,\"Civil Money is built and maintained by unpaid volunteers. The intention \ris to establish a steering group comprised of experts from all corners of\rthe world in applicable fields -- network and software security, finance, \rbusiness development, law and politics. If you're passionate about \rrebuilding the world's economy for a better society, please \rreach out.\",\r\nTITLE_INSTALL_A_SERVER,Install a Server,\r\nLABEL_DOWNLOAD,Download,\r\nTITLE_SOURCE_CODE,Source Code,\r\nLABEL_SOURCE_CODE_INTRO,\"Civil Money is free and unencumbered software released into the public domain. The reference implementation and API has been published on GitHub.\",\r\nTITLE_ABOUT,About Civil Money,\r\n\r\nTITLE_ACCOUNT_SETTINGS,Account Settings,\r\nLABEL_ACCOUNT_SETTINGS_INTRO,\"Account settings are designed to show minimal personally identifying information\rwhilst still providing some sort of context about your role in the community.\",\r\nLABEL_INCOME_ELIGIBILITY_INTRO,\"There is no reason to lie here. Good sellers should accept your payment for \ressential items if your transaction history is reasonable regardless of balance. \rHealth Problem and Retired status does not give you a free pass to overspend \ryour basic income.\",\r\nLABEL_SKILLS_AND_SERVICES_INTRO,\"List your skills, services or anything you can do within your community, even if \ronly in an amateur capacity.\",\r\nLABEL_ADD_ANOTHER_ITEM,Add another,\r\nLABEL_PUSH_NOTIFICATIONS,Push Notifications,\r\nLABEL_PUSH_NOTIFICATIONS_INTRO,\"Specify one or more HTTP end-points to receive push notifications\r\nany time your account is changed or a transaction is updated.\",\r\nLABEL_CHANGE_MY_PASS_PHRASE,Change my secret pass phrase,\r\nLABEL_CONTINUE,Continue,\r\nLABEL_ENTER_SKILL_OR_SERVICE,Skill or service,\r\nLABEL_LABEL,Label,\r\nLABEL_SECURITY,Security,\r\nLABEL_NO_ITEMS_FOUND,\"There were no items returned by the network. If this is unexpected, please check again in a few hours time.\",\r\nTITLE_CIVIL_MONEY_REGIONS,Civil Money Regions,\r\nLABEL_REGIONS_INTRO,\"Instead of traditional taxation, geographical regions generate new money\r\nbased on productivity. You can think of it as an inverse-tax where instead of us subtracting your income\r\nout of pocket, 10% of every transaction generates new money for your region, which is then used\r\nto fund government services, infrastructure and all manner of other necessities for a modern civilised\r\nlifestyle. This way money gets distributed fairly based on who is actually being most productive,\r\nand it is impossible for individuals or corporations to evade tax.\",\r\nTITLE_BROWSE_REGIONS,Browse regions,\r\nLABEL_RECENT_REVENUE,Recent revenue,\r\nLABEL_REVENUE_REPORT_HINT,\"Revenue reports are updated periodically by the authoritative Civil Money service.\",\r\nLABEL_TIME_LAST_UPDATED,Last updated,\r\nLABEL_PAY_TO,Pay to,\r\nLABEL_PAY_FROM,From,\r\nLABEL_MEMO,Memo,\r\nLABEL_AMOUNT,Amount,\r\nLABEL_OPTIONAL,Optional,\r\nLABEL_TAG,Tag/Label,\r\nLABEL_STATUS_TRANSACTION_CREATED_SUCCESSFULLY,Transaction created successfully.,\r\nLABEL_STATUS_TRANSACTION_UPDATED_SUCCESSFULLY,Transaction updated successfully.,\r\nLABEL_STATUS_NO_TRANSACTIONS_UPDATED,None of the transactions could be updated.,\r\nLABEL_STATUS_ALL_TRANSACTIONS_UPDATED,All transaction were updated successfully.,\r\nLABEL_STATUS_SOME_TRANSACTIONS_FAILED,Some of the transactions could not be updated.,\r\nLABEL_LINK_FOR_PAYMENT_TO,Generate link for payment to {0},\r\nLABEL_READONLY,Read only,\r\nLABEL_PREVIEW,Preview,\r\nLABEL_OR,or,\r\nLABEL_BALANCE,Balance,\r\nLABEL_LEARN_MORE,Learn more,\r\nLABEL_DONT_HAVE_AN_ACCOUNT,Don't have an account?,\r\nLABEL_YOUR_ACCOUNT_NAME,Your account name,\r\nLABEL_ALERT_SENT_TRANSACTION,Sent transaction,\r\nLABEL_ALERT_REFUNDED_TRANSACTION,Refunded transaction,\r\nLABEL_ALERT_CANCELLED_TRANSACTION,Cancelled transaction,\r\nLABEL_ALERT_DECLINED_TRANSACTION,Declined transaction,\r\nLABEL_ALERT_ACCEPTED_TRANSACTION,Accepted transaction,\r\nLABEL_ALERT_DISPUTED_TRANSACTION,Disputed transaction,\r\nLABEL_CONFIRMATIONS,Confirmation(s),\r\nLABEL_NOTIFICATIONS,Notification(s),\r\nLABEL_ALERT_ACCOUNT_BLANK_MODIFIED,Account {0} has been modified,\r\nLABEL_DISMISS_ALL,Dismiss All,\r\nLABEL_CLEAR,Clear,\r\nTITLE_PLEASE_PAY,Please pay,\r\nLABEL_MATCHING_TRANSACTION_RECEIVED_FROM,Matching transaction received from,\r\nLABEL_POINT_OF_SALE,Point of Sale,\r\nTITLE_THE_CIVIL_MONEY_HONOUR_CODE,The Civil Money Honour Code,\r\nHTML_ABOUT,\"\r<h1>A society built on a minted currency is a toxic one.</h1>\r<p>People are killing one another, working multiple jobs and neglecting their children. All because of nothing more than imaginary computer data sitting on bank servers. For many people their entire life's existence revolves around undoing database entries that were created each time they needed a loan in order to buy a house, car, or even food. Let's fix it.</p>\r\r<img src=/ubi.svg>\r<h2>Every human whether retired, studying, disabled or working receives a generous basic income.</h2>\r<p>Roughly equivalent to USD $60,000 /yr. The idea is that <b>if</b> you work, it is gravy. Work on something because you're passionate about it, not because you have to. Raise your kids properly. Go to school. Do something amazing. If the people and local businesses that you rely on for day-to-day living all choose to accept payment in Civil Money, the decision will be up to you.</p>\r\r\n<img src=/taxation.svg>\r\n<h2>An automatic, inverted taxation system generates money for regions based on their actual contribution to humanity.</h2>\r\n<p>Tax evasion is impossible, we don't subtract money out of pocket and there is never any tax filing. In other words - <b>tax is dead.</b></p>\r\n<p>10% of every settled transaction is automatically generated and placed into an authoritative Civil Money account for the seller's geographical region. Any change to the inverse-taxation algorithm will not directly impact people's account balances. Inverse-taxation is a data analysis/computer sciences problem. Specifically, we want to exclude transactions for inverse-tax when a money trail or account looks like it might have been deliberately created to generate false revenue.</p>\r\n\r\n<img src=/datadistribution.svg>\r\n<h2>All account and transaction information is public and distributed around the world.</h2>\r\n<p>Data is stored on random untrusted computers and authenticity is established through a consensus model and well-established cryptographic signing techniques.</p>\r\n<p>There is nothing novel or unique about Civil Money's technology.</p>\r\n<p>Because all data is public, it cannot be used for crime. Not that crime need exist in the first place, given the generous basic income. Predatory or deceitful users should be declined, ignored and politely reminded of the Civil Money Honour Code.</p>\r\n\r\n<img src=/nobanks.svg>\r\n<h2>There are no more banks, foreign exchange rates or financial speculation markets.</h2>\r\n<p>Every user of Civil Money is a money lender. You will get paid no matter what by simply clicking 'accept' on any payment, but the question you should ask yourself is, <em>&quot;should I?&quot;</em> <b>You are a bank</b>, and a willingness to cooperate and support an exciting sounding business venture, or the level of compassion toward a person's unfortunate life circumstance is up to each individual seller. </p>\r\n<p>The ultimate aim of Civil Money is to gradually repair broken relationships and guide everybody into behaving openly and honestly with one another, at the same time empowering people to cooperate more easily by completely removing our counter-productive and toxic notion of debt and artificial scarcity from our social fabric. It aims to supplant the traditional economics <em>\"\"it's every man for himself\"\"</em> way of thinking, which is the root cause of most of the world's maladies.</p>\r\n\r\n<img src=/valuetime.svg>\r\n<h2>The value of one Civil Money is always equal to one hour of a person's time, but also 50 bucks.</h2>\r\n<p>The mathematical constant of time can help somewhat to prevent inflation, however goods and services must be priced appropriately. Civil Money only works if we spend wisely and scrutinise the fair value of items and services that we're purchasing (labour + materials + a reasonable margin) to stop things getting out of hand.</p>\r\n<p>A reasonable exchange rate in traditional currency is <b>//c 1.00 = USD $50</b>. This is based on an upper-middle class USD$ 80,000/yr income over an 8hr work day, 200 days a year (excludes 165 days of weekends/personal/sick/vacation time.)</p>\r\n<blockquote>USD$ 80,000 / 1600hrs = $50/hr.<br />\r\nSince 1hr = //p 1.00 it follows that //p 1.00 = USD$50</blockquote>\r\n<p>This means that a person making designer T-shirts in Bangladesh, which might take a few hours, can no longer be expected to sell their time for a pittance or be compelled to work for a slave wage. Provided that they have access to materials and a personal website, that person can now sell their shirts directly to anybody in the world for a fair value of //p 3.00, equivalent to USD$150, or about what a retail chain might charge in western countries today.</p>\r\n\r\n<img src=/disputes.svg>\r\n<h2>Dispute resolution is built-in.</h2>\r\n<p>In the event of a dispute, a customer can always get their money back whilst the seller keeps their payment as well. Arguments are always settled amicably by default.</p>\r\n<p>Rampant use of the dispute system would lead to inflation, so <b>the catch is</b>, it reflects badly on anyone who abuses it, or any seller who routinely does not volunteer a refund during disputes. </p>\r\n<p>This system enables access to a fair dispute resolution process to people in countries that currently have no reliable legal system in place, whilst simultaneously reducing the burden on small-claims courts in the countries that do.</p>\r\n\r\n<img src=/demurrage.svg>\r\n<h2>Payments start to depreciate after 12 months.</h2>\r\n<p>This is difficult to grasp at first, and people are going to baulk at the idea. But it's super important and ultimately a non-issue once you've discarded your traditional understanding of money and savings.</p>\r\n<p><b>You never need to save, there is no debt, and investment and interest do not exist because every individual is a bank.</b></p>\r\n<p>A fundamental problem with money today is that those who have some of it, can make more of it, simply by moving it.</p>\r\n<p>Under Civil Money it is impossible for a minority to hoard cash or use it as a tool to make more money. Instead, everyone is encouraged to spend their money soon, which ensures the <b>distribution</b> of wealth and a happy and healthy global economy. Accounts that ping-pong money in order to circumvent depreciation can be openly identified and declined.</p>\r\n<p><b>Capitalism is not prohibited.</b> But your capital must no longer be held onto long-term in the form of money. Instead it must be converted into physical assets and property. You know... real things.</p>\r\n\r\n<img src=/hardtimes.svg>\r\n<h2>Because payments depreciate, your credit score automatically restores itself if you fall on hard times.</h2>\r\n<p>Depreciation of account debits along with a perpetually replenishing basic income ensures that people retain their dignity in the event of financial disaster. Nobody needs to struggle without access to essential goods and services for an extended period of time, if at all.</p>\r\n\r\n<h2>The barrier to entry is virtually non-existent, and personally identifying information is disallowed.</h2>\r\n<p>Civil Money is designed to work just as effectively for a remote village in Africa sharing a single smartphone, as it does a person standing in a shopping mall at a point of sale terminal. All you ever need is <b>temporary</b> access to a reasonably up-to-date web browser to create an account or complete a transaction.</p>\r\n<p>Because all data is public and poorly implemented business processes sometimes use bills or receipt numbers as a proof of identity, we do not permit storage of anything that traditionally has been used as a source of ID. Civil Money does not allow storage of even so much as your e-mail address.</p>\r\n\r\n<img src=/voting.svg>\r\n<h2>Every person can vote on changes to the system.</h2>\r\n<p>People can digitally sign votes in the same manner as regular transactions. A two-thirds majority is needed for any proposition to pass, meaning a significant winning margin is required before any changes are introduced. No vote counts more than another, however the minimum requirement for voting is a good standing and at least one settled transaction for every 30 day period, for the past year. This is simply to deter casual vote stuffing.</p>\r\n<p>Because Civil Money is a completely transparent system, researchers are encouraged to collect, validate and calculate results independently and report their findings. Voting outcomes are a scientific process and not locked in stone until a consensus with a reasonably low margin of error is established.</p>\r\n\r\n<h2>Identity verification is not a feature of Civil Money.</h2>\r\n<p><b>The value and authenticity of your account only exists through pre-established relationships with people and companies that you choose to associate with.</b></p>\r\n<p>Any idiot can make a bunch of fake accounts and send themselves money -- however it's a worthless pursuit and they're just wasting their time. The Civil Money design is such that illegitimate transactions and accounts are deemed worthless by the community at large, who may easily run a credit report in order to trace a corroborated money trail and determine a customer's legitimacy.</p>\r\n<p>At the end of the day money doesn't matter any more, only real relationships. Let's build people homes and sell people cars based on what they're truly contributing to society, by putting everyone on an even playing field and taking the imaginary value of cash out of existence.</p>\r\n\",\r\n\r\n"
                 * @type string
                 */
                EN_GB: null
            },
            ctors: {
                init: function () {
                    this.Langauges = $asm.$.CM.Javascript.SR.f1(new (System.Collections.Generic.Dictionary$2(System.String,System.String))());
                    this.CurrentLanguage = "EN-UK";
                    this.CHAR_DECIMAL = ".";
                    this.CHAR_THOUSAND_SEPERATOR = ",";
                    this.EN_US = "\r\nKEY,REFERENCE,NATIVE\r\nLABEL_CIVIL_MONEY_SUB_HEADING,A civilized monetary framework.,\r\nHTML_CIVIL_MONEY_PROVIDES,\"<h3>Civil Money is free to join, accepts no personally identifying information and gives you:</h3>\r\n<ul>\r\n<li>A <b>generous</b> universal basic income</li>\r\n<li>Easy dispute resolution</li>\r\n<li>Automatic taxation/funding for your country and region</li>\r\n<li>Transparent transactions, honesty and accountability</li>\r\n<li>A more civilized cash-free society</li>\r\n</ul>\",\r\nLABEL_CHOOSE_YOUR_LANGUAGE,\"We apologize that not all languages are available. If you are interested in helping out, please contact us.\",\r\nHTML_I_PROMISE_TO_FOLLOW_THE_HONOUR_CODE, \"I promise to follow the <b>Civil Money Honor Code</b>\",\r\nHTML_CIVIL_MONEY_HONOUR_CODE,\"<ol>\r\n<li>I will try my best to not be a jerk. If somebody is being one to me, I will either ignore them or politely remind them about the Civil Money Honor Code.</li>\r\n<li>I will respect any person's decision to decline my payment, regardless of reason or for no reason at all.</li>\r\n<li>I will hold in the highest regard any person doing an unpleasant job in exchange for Civil Money and endeavor to eliminate unpleasant jobs through the sharing of ideas, science and ingenuity.</li>\r\n<li>I accept that Civil Money is backed only by the community at large and holds no intrinsic value, and is also an imperfect system. As such, the higher the cost of a good or service, the closer I will scrutinize a person's credit rating and transaction history, just as banks do today for a loan.</li>\r\n<li>I accept that the value of all Civil Money transactions begin to depreciate to zero after 12 months, which helps to stimulate the economy, aids in the prevention of inflation, over accumulation of money, and forgives people of their debts to society.</li>\r\n</ol>\",\r\nTITLE_THE_CIVIL_MONEY_HONOUR_CODE,The Civil Money Honor Code,\r\n\r\n\r\n";
                    this.EN_GB = "\r\nKEY,REFERENCE,NATIVE\r\nCHAR_DECIMAL,.,\r\nCHAR_THOUSAND_SEPERATOR,\",\",\r\nTITLE_CIVIL_MONEY,Civil Money,Civil Money\r\nLABEL_CIVIL_MONEY_SUB_HEADING,A civilised monetary framework.,\r\nLABEL_ACCOUNT_NAME,Account Name,\r\nLABEL_GO,Go,\r\nHTML_CIVIL_MONEY_PROVIDES,\"<h3>Civil Money is free to join, accepts no personally identifying information and gives you:</h3>\r\n<ul>\r\n<li>A <b>generous</b> universal basic income</li>\r\n<li>Easy dispute resolution</li>\r\n<li>Automatic taxation/funding for your country and region</li>\r\n<li>Transparent transactions, honesty and accountability</li>\r\n<li>A more civilised cash-free society</li>\r\n</ul>\",\r\nLABEL_CREATE_MY_ACCOUNT,Create my account,\r\nTITLE_PEERS,Peers,\r\nTITLE_REGIONS,Regions,\r\nTITLE_HISTORY,History,\r\nTITLE_HOMEPAGE,Home,\r\nTITLE_REGISTER,Register,\r\nTITLE_HELP,Help,\r\nTITLE_CHOOSE_YOUR_LANGUAGE,Choose your language,\r\nLABEL_CHOOSE_YOUR_LANGUAGE,\"We apologise that not all languages are available. If you are interested in helping out, please contact us.\",\r\nHTML_REGISTER_INTRO,\"Civil Money is not like traditional websites. It does not want even so much as your e-mail address, let alone any of your personally identifying information.\r\n<br/>\r\n<br/>The authenticity and reputation of your account is established only between yourself and the people or businesses in real life that you do business with.\r\n<br/>\r\n<br/>Please choose an account name and a secret pass phrase below to get started.\r\n\",\r\nLABEL_HISTORY_INTRO,Any accounts that have been viewed on this device are listed here for quick access.,\r\nLABEL_HISTORY_NO_ITEMS,There are no items in your viewing history.,\r\nLABEL_SECRET_PASS_PHRASE,Secret pass phrase,\r\nLABEL_REENTER_PASS_PHRASE,Re-enter the pass phrase,\r\nLABEL_REGION,Region,\r\nLABEL_PLEASE_SELECT,Please select,\r\nLABEL_DAYS_OLD,{0} day(s) old,\r\nLABEL_YEARS_OLD,{0} year(s) old,\r\nLABEL_ACCOUNT_AGE,Account age,\r\nLABEL_INCOME_ELIGIBILITY,Income eligibility,\r\nLABEL_ACCOUNT_ATTRIBUTES,Attributes,\r\nLABEL_INCOME_ELIGIBILITY_WORKING,Working,\r\nLABEL_INCOME_ELIGIBILITY_LOOKING_FOR_WORK,Looking for work,\r\nLABEL_INCOME_ELIGIBILITY_HEALTH_PROBLEM,Health Problem,\r\nLABEL_INCOME_ELIGIBILITY_RETIRED,Retired,\r\nLABEL_VALUE_NOT_SET,Not set,\r\nTITLE_OWN_THIS_ACCOUNT,Own this account?,\r\nLABEL_MAKE_A_PAYMENT,Make a payment,\r\nLABEL_REQUEST_A_PAYMENT,Point of Sale / Generate link,\r\nLABEL_EDIT_ACCOUNT,Edit account,\r\nLABEL_ACCEPTANCE_LOGOS,Acceptance logos,\r\nLABEL_SKILLS_AND_SERVICES,Skills & Services,\r\nTITLE_TRANSACTION_HISTORY,Transaction History,\r\nTITLE_TRANSACTION_DETAILS,Transaction Details,\r\nLABEL_LOADING_PLEASE_WAIT,\"Loading, please wait...\",\r\nLABEL_REPUTATION_GOOD,Good Standing,\r\nLABEL_REPUTATION_OVERSPENT,Overspent,\r\nLABEL_REPUTATION_BAD,Bad,\r\nLABEL_NEW_PASSWORD_INSTRUCTIONS,\"Your pass phrase is never transmitted over the internet or stored on any servers. It is irrecoverable if forgotten. Please use multiple words to make up a unique but memorable sentence. Complexity isn't as important as overall length. An all lower-cased sentence with spaces is ideal, keeping in mind that computers can do millions of guesses per second. \",\r\nHTML_I_PROMISE_TO_FOLLOW_THE_HONOUR_CODE, \"I promise to follow the <b>Civil Money Honour Code</b>\",\r\nHTML_CIVIL_MONEY_HONOUR_CODE,\"<ol>\r\n<li>I will try my best to not be a jerk. If somebody is being one to me, I will either ignore them or politely remind them about the Civil Money Honour Code.</li>\r\n<li>I will respect any person's decision to decline my payment, regardless of reason or for no reason at all.</li>\r\n<li>I will hold in the highest regard any person doing an unpleasant job in exchange for Civil Money and endeavour to eliminate unpleasant jobs through the sharing of ideas, science and ingenuity.</li>\r\n<li>I accept that Civil Money is backed only by the community at large and holds no intrinsic value, and is also an imperfect system. As such, the higher the cost of a good or service, the closer I will scrutinise a person's credit rating and transaction history, just as banks do today for a loan.</li>\r\n<li>I accept that the value of all Civil Money transactions begin to depreciate to zero after 12 months, which helps to stimulate the economy, aids in the prevention of inflation, over accumulation of money, and forgives people of their debts to society.</li>\r\n</ol>\r\n\",\r\nLABEL_PLEASE_SELECT_YOUR_REGION,Please select your current region.,\r\nLABEL_PASSWORD_REENTRY_MISMATCH,Your re-entered pass phrase doesn't match.,\r\nLABEL_PLEASE_WAIT,Please wait,\r\nLABEL_STATUS_GENERATING_NEW_SECRET_KEY,Generating new secret key,\r\nLABEL_STATUS_PROCESSING_PASS_PHRASE,Processing your pass phrase,\r\nLABEL_STATUS_ENCRYPTING_SECRET_KEY,Encrypting your secret key,\r\nLABEL_STATUS_SIGNING_INFORMATION,Signing your information,\r\nLABEL_STATUS_CONTACTING_NETWORK,Contacting computers on the network,\r\nLABEL_STATUS_ACCOUNT_CREATED_SUCCESFULLY,Account created successfully.,\r\nLABEL_STATUS_A_PROBLEM_OCCURRED,A problem occurred,\r\nLABEL_GO_TO_YOUR_ACCOUNT,Go to your account,\r\nLABEL_GO_TO_ACCOUNT_BLANK,Go to {0},\r\nLABEL_ACCOUNT_NAME_INSTRUCTIONS,\"Account names contain only letters, numbers and must be at least three characters in length.\",\r\nLABEL_ACCOUNT_BLANK_IS_ALREADY_TAKEN,Account name '{0}' is already taken.,\r\nLABEL_ACCOUNT_BLANK_LOOKS_OK,Account name '{0}' looks OK!,\r\nLABEL_STATUS_CHECKING_ACCOUNT_NAME,Checking account name,\r\nLABEL_STATUS_PROBLEM_REACHING_A_SERVER,Unfortunately we can't reach a server right now.,\r\nLABEL_CIVIL_MONEY_SECURITY_REMINDER,\"If your web browser's address bar is not visible or its URL does not begin with\rhttps://civil.money/ or if in the future you don't receive this reminder, please\rdo not type in your pass phrase, as the page you are on might be trying to \rharvest your secret pass phrase.\",\r\nHTML_IVE_CHECKED_MY_WEB_BROWSER_ADDRESS,I've checked my web browser's address and it definitely begins with <b>https://civil.money/</b>,\r\nLABEL_A_VALID_PAYEE_ACCOUNT_NAME_IS_REQUIRED,A valid payee account name is required.,\r\nLABEL_YOUR_ACCOUNT_NAME_IS_REQUIRED,Your account name is required.,\r\nLABEL_THE_AMOUNT_IS_INVALID,The amount is invalid.,\r\nLABEL_STATUS_SIGNING_FAILED,We were unable to sign the information. This usually means an incorrect password was entered.,\r\nLABEL_CANCEL,Cancel,\r\nLABEL_AMOUNT_HINT,This is roughly equal to USD${0} or {1} hour(s) of somebody's time.,\r\nLABEL_REMAINING_BALANCE_HINT,You will have a //c {0} balance and {1} reputation after payment.,\r\nLABEL_STATUS_ACCOUNT_NOT_FOUND,\"We can't find account '{0}'. If this is unexpected, please try again later.\",\r\nLABEL_RETRY,Retry,\r\nLABEL_STATUS_CONNECTING,Connecting,\r\nLABEL_STATUS_OK,OK,\r\nLABEL_STATUS_CORROBORATING,Corroborating,\r\nLABEL_STATUS_COMITTING_DATA,Committing data,\r\nLABEL_PAYEE_STATUS_NOTSET,Pending,\r\nLABEL_PAYEE_STATUS_REFUND,Refunded,\r\nLABEL_PAYEE_STATUS_DECLINE,Declined,\r\nLABEL_PAYEE_STATUS_ACCEPT,Accepted,\r\n\r\nLABEL_PAYER_STATUS_NOTSET,Pending,\r\nLABEL_PAYER_STATUS_ACCEPT,Accepted,\r\nLABEL_PAYER_STATUS_DISPUTE,Disputed,\r\nLABEL_PAYER_STATUS_CANCEL,Cancelled,\r\n\r\nLABEL_PAYEE_STATUS_REFUND_VERB,Refund,\r\nLABEL_PAYEE_STATUS_DECLINE_VERB,Decline,\r\nLABEL_PAYEE_STATUS_ACCEPT_VERB,Accept,\r\n\r\nLABEL_PAYER_STATUS_CANCEL_VERB,Cancel,\r\nLABEL_PAYER_STATUS_ACCEPT_VERB,Accept,\r\nLABEL_PAYER_STATUS_DISPUTE_VERB,Dispute,\r\n\r\nLABEL_SKILL_LEVEL_AMATEUR,Amateur,\r\nLABEL_SKILL_LEVEL_QUALIFIED,Qualified,\r\nLABEL_SKILL_LEVEL_EXPERIENCED,Experienced,\r\nLABEL_SKILL_LEVEL_CERTIFIED,Certified,\r\nLABEL_STATUS_ACCOUNT_UPDATED_SUCCESSFULLY,Account updated successfully.,\r\nLABEL_PASSWORD_REQUIRED,Please enter a secret pass phrase.,\r\nLABEL_ACCOUNT_NAME_REQUIRED,Please enter an account name.,\r\nTITLE_NOT_FOUND,Not Found,\r\nLABEL_LINK_APPEARS_TO_BE_INVALID,The link you have followed appears to be invalid.,\r\nLABEL_HELP_INTRO,\"If you're having trouble with the Civil Money service or have a question, please email us for assistance.\",\r\nLABEL_HELP_IN_ENGLISH_ONLY,\"We regret that help is presently only available in English. If you would like to volunteer to help people in your native tongue please reach out.\",\r\nTITLE_VOTING,Voting,\r\nHTML_VOTES_INTRO,\"When fundamental changes to the monetary system become necessary, everybody has an opportunity to vote for or against those changes.<br/><br/>\r\nPropositions that are up for voting are listed below. There are a few things that we do to help minimise votes coming from accounts that were specifically created in order to influence an outcome. \r<ol>\r<li>The minimum requirement for voting is a good standing and at least one settled transaction for every 30 day period, for the past year.</li>\r<li>You can change your vote at any time, however votes created or updated after the closing date will be considered ineligible.</li>\r<li>A two-thirds majority of the eligible votes is required for any proposition to pass, meaning a significant winning margin is needed before proposed changes are introduced.</li>\r<li>Voting outcomes follow the scientific method and are not locked in stone until a consensus with a reasonably low margin of error has been established.</li>\r<li>Researchers are encouraged to collect, analyse, validate and calculate results independently and report their findings to the Civil Money steering group.</li>\r<li>Everybody is welcome to download the latest voting data to confirm whether or not their vote has been counted.</li>\r</ol>\",\r\nLABEL_VOTES_NO_PROPOSITIONS,\"There are currently no propositions to display.\",\r\nLABEL_VOTING_CLOSE_DATE,Voting close date,\r\nLABEL_VOTING_ELIGIBLE_PARTICIPANTS,Eligible participants,\r\nLABEL_VOTING_INELIGIBLE_UNVERIFIED_PARTICIPANTS,Ineligible or unverified participants,\r\nLABEL_VOTE_FOR,For,\r\nLABEL_VOTE_AGAINST,Against,\r\nLABEL_VOTE_INELIGIBLE,Ineligible,\r\nLABEL_LEARN_MORE_OR_VOTE,Learn more or vote,\r\nLABEL_DOWNLOAD_DATA,Download data,\r\nLABEL_STATUS_ERROR_CLICK_FOR_DETAILS,Error (click for details),\r\nLABEL_YOUR_LAST_VOTE_OF_BLANK_WAS_ON_BLANK,Your last vote '{0}' was on {1}.,\r\nLABEL_YOU_ARE_NOT_PRESENTLY_ELIGIBLE_FOR_VOTING,\"You are not presently eligible for voting, however you may submit an ineligible vote for testing purposes.\",\r\nTITLE_CURRENT_PROPOSITIONS,Current Propositions,\r\nTITLE_CLOSED_PROPOSITIONS,Closed Propositions,\r\nTITLE_PROPOSITION_NUMBER,Proposition #{0},\r\nTITLE_KNOWN_NEGATIVE_IMPACTS,Known Negative Impacts,\r\nTITLE_KNOWN_POSITIVE_IMPACTS,Known Positive Impacts,\r\nLABEL_MY_ACCOUNT,My account,\r\nLABEL_MY_VOTE,My vote\r\nLABEL_YOUR_VOTE_SELECTION_IS_REQUIRED,Your vote selection is required.,\r\nLABEL_VOTE_SUBMITTED_SUCCESSFULLY,Your vote has been stored successfully :),\r\nTITLE_GET_INVOLVED,Get Involved,\r\nLABEL_GET_INVOLVED_INTRO,\"Civil Money is built and maintained by unpaid volunteers. The intention \ris to establish a steering group comprised of experts from all corners of\rthe world in applicable fields -- network and software security, finance, \rbusiness development, law and politics. If you're passionate about \rrebuilding the world's economy for a better society, please \rreach out.\",\r\nTITLE_INSTALL_A_SERVER,Install a Server,\r\nLABEL_DOWNLOAD,Download,\r\nTITLE_SOURCE_CODE,Source Code,\r\nLABEL_SOURCE_CODE_INTRO,\"Civil Money is free and unencumbered software released into the public domain. The reference implementation and API has been published on GitHub.\",\r\nTITLE_ABOUT,About Civil Money,\r\n\r\nTITLE_ACCOUNT_SETTINGS,Account Settings,\r\nLABEL_ACCOUNT_SETTINGS_INTRO,\"Account settings are designed to show minimal personally identifying information\rwhilst still providing some sort of context about your role in the community.\",\r\nLABEL_INCOME_ELIGIBILITY_INTRO,\"There is no reason to lie here. Good sellers should accept your payment for \ressential items if your transaction history is reasonable regardless of balance. \rHealth Problem and Retired status does not give you a free pass to overspend \ryour basic income.\",\r\nLABEL_SKILLS_AND_SERVICES_INTRO,\"List your skills, services or anything you can do within your community, even if \ronly in an amateur capacity.\",\r\nLABEL_ADD_ANOTHER_ITEM,Add another,\r\nLABEL_PUSH_NOTIFICATIONS,Push Notifications,\r\nLABEL_PUSH_NOTIFICATIONS_INTRO,\"Specify one or more HTTP end-points to receive push notifications\r\nany time your account is changed or a transaction is updated.\",\r\nLABEL_CHANGE_MY_PASS_PHRASE,Change my secret pass phrase,\r\nLABEL_CONTINUE,Continue,\r\nLABEL_ENTER_SKILL_OR_SERVICE,Skill or service,\r\nLABEL_LABEL,Label,\r\nLABEL_SECURITY,Security,\r\nLABEL_NO_ITEMS_FOUND,\"There were no items returned by the network. If this is unexpected, please check again in a few hours time.\",\r\nTITLE_CIVIL_MONEY_REGIONS,Civil Money Regions,\r\nLABEL_REGIONS_INTRO,\"Instead of traditional taxation, geographical regions generate new money\r\nbased on productivity. You can think of it as an inverse-tax where instead of us subtracting your income\r\nout of pocket, 10% of every transaction generates new money for your region, which is then used\r\nto fund government services, infrastructure and all manner of other necessities for a modern civilised\r\nlifestyle. This way money gets distributed fairly based on who is actually being most productive,\r\nand it is impossible for individuals or corporations to evade tax.\",\r\nTITLE_BROWSE_REGIONS,Browse regions,\r\nLABEL_RECENT_REVENUE,Recent revenue,\r\nLABEL_REVENUE_REPORT_HINT,\"Revenue reports are updated periodically by the authoritative Civil Money service.\",\r\nLABEL_TIME_LAST_UPDATED,Last updated,\r\nLABEL_PAY_TO,Pay to,\r\nLABEL_PAY_FROM,From,\r\nLABEL_MEMO,Memo,\r\nLABEL_AMOUNT,Amount,\r\nLABEL_OPTIONAL,Optional,\r\nLABEL_TAG,Tag/Label,\r\nLABEL_STATUS_TRANSACTION_CREATED_SUCCESSFULLY,Transaction created successfully.,\r\nLABEL_STATUS_TRANSACTION_UPDATED_SUCCESSFULLY,Transaction updated successfully.,\r\nLABEL_STATUS_NO_TRANSACTIONS_UPDATED,None of the transactions could be updated.,\r\nLABEL_STATUS_ALL_TRANSACTIONS_UPDATED,All transaction were updated successfully.,\r\nLABEL_STATUS_SOME_TRANSACTIONS_FAILED,Some of the transactions could not be updated.,\r\nLABEL_LINK_FOR_PAYMENT_TO,Generate link for payment to {0},\r\nLABEL_READONLY,Read only,\r\nLABEL_PREVIEW,Preview,\r\nLABEL_OR,or,\r\nLABEL_BALANCE,Balance,\r\nLABEL_LEARN_MORE,Learn more,\r\nLABEL_DONT_HAVE_AN_ACCOUNT,Don't have an account?,\r\nLABEL_YOUR_ACCOUNT_NAME,Your account name,\r\nLABEL_ALERT_SENT_TRANSACTION,Sent transaction,\r\nLABEL_ALERT_REFUNDED_TRANSACTION,Refunded transaction,\r\nLABEL_ALERT_CANCELLED_TRANSACTION,Cancelled transaction,\r\nLABEL_ALERT_DECLINED_TRANSACTION,Declined transaction,\r\nLABEL_ALERT_ACCEPTED_TRANSACTION,Accepted transaction,\r\nLABEL_ALERT_DISPUTED_TRANSACTION,Disputed transaction,\r\nLABEL_CONFIRMATIONS,Confirmation(s),\r\nLABEL_NOTIFICATIONS,Notification(s),\r\nLABEL_ALERT_ACCOUNT_BLANK_MODIFIED,Account {0} has been modified,\r\nLABEL_DISMISS_ALL,Dismiss All,\r\nLABEL_CLEAR,Clear,\r\nTITLE_PLEASE_PAY,Please pay,\r\nLABEL_MATCHING_TRANSACTION_RECEIVED_FROM,Matching transaction received from,\r\nLABEL_POINT_OF_SALE,Point of Sale,\r\nTITLE_THE_CIVIL_MONEY_HONOUR_CODE,The Civil Money Honour Code,\r\nHTML_ABOUT,\"\r<h1>A society built on a minted currency is a toxic one.</h1>\r<p>People are killing one another, working multiple jobs and neglecting their children. All because of nothing more than imaginary computer data sitting on bank servers. For many people their entire life's existence revolves around undoing database entries that were created each time they needed a loan in order to buy a house, car, or even food. Let's fix it.</p>\r\r<img src=/ubi.svg>\r<h2>Every human whether retired, studying, disabled or working receives a generous basic income.</h2>\r<p>Roughly equivalent to USD $60,000 /yr. The idea is that <b>if</b> you work, it is gravy. Work on something because you're passionate about it, not because you have to. Raise your kids properly. Go to school. Do something amazing. If the people and local businesses that you rely on for day-to-day living all choose to accept payment in Civil Money, the decision will be up to you.</p>\r\r\n<img src=/taxation.svg>\r\n<h2>An automatic, inverted taxation system generates money for regions based on their actual contribution to humanity.</h2>\r\n<p>Tax evasion is impossible, we don't subtract money out of pocket and there is never any tax filing. In other words - <b>tax is dead.</b></p>\r\n<p>10% of every settled transaction is automatically generated and placed into an authoritative Civil Money account for the seller's geographical region. Any change to the inverse-taxation algorithm will not directly impact people's account balances. Inverse-taxation is a data analysis/computer sciences problem. Specifically, we want to exclude transactions for inverse-tax when a money trail or account looks like it might have been deliberately created to generate false revenue.</p>\r\n\r\n<img src=/datadistribution.svg>\r\n<h2>All account and transaction information is public and distributed around the world.</h2>\r\n<p>Data is stored on random untrusted computers and authenticity is established through a consensus model and well-established cryptographic signing techniques.</p>\r\n<p>There is nothing novel or unique about Civil Money's technology.</p>\r\n<p>Because all data is public, it cannot be used for crime. Not that crime need exist in the first place, given the generous basic income. Predatory or deceitful users should be declined, ignored and politely reminded of the Civil Money Honour Code.</p>\r\n\r\n<img src=/nobanks.svg>\r\n<h2>There are no more banks, foreign exchange rates or financial speculation markets.</h2>\r\n<p>Every user of Civil Money is a money lender. You will get paid no matter what by simply clicking 'accept' on any payment, but the question you should ask yourself is, <em>&quot;should I?&quot;</em> <b>You are a bank</b>, and a willingness to cooperate and support an exciting sounding business venture, or the level of compassion toward a person's unfortunate life circumstance is up to each individual seller. </p>\r\n<p>The ultimate aim of Civil Money is to gradually repair broken relationships and guide everybody into behaving openly and honestly with one another, at the same time empowering people to cooperate more easily by completely removing our counter-productive and toxic notion of debt and artificial scarcity from our social fabric. It aims to supplant the traditional economics <em>\"\"it's every man for himself\"\"</em> way of thinking, which is the root cause of most of the world's maladies.</p>\r\n\r\n<img src=/valuetime.svg>\r\n<h2>The value of one Civil Money is always equal to one hour of a person's time, but also 50 bucks.</h2>\r\n<p>The mathematical constant of time can help somewhat to prevent inflation, however goods and services must be priced appropriately. Civil Money only works if we spend wisely and scrutinise the fair value of items and services that we're purchasing (labour + materials + a reasonable margin) to stop things getting out of hand.</p>\r\n<p>A reasonable exchange rate in traditional currency is <b>//c 1.00 = USD $50</b>. This is based on an upper-middle class USD$ 80,000/yr income over an 8hr work day, 200 days a year (excludes 165 days of weekends/personal/sick/vacation time.)</p>\r\n<blockquote>USD$ 80,000 / 1600hrs = $50/hr.<br />\r\nSince 1hr = //p 1.00 it follows that //p 1.00 = USD$50</blockquote>\r\n<p>This means that a person making designer T-shirts in Bangladesh, which might take a few hours, can no longer be expected to sell their time for a pittance or be compelled to work for a slave wage. Provided that they have access to materials and a personal website, that person can now sell their shirts directly to anybody in the world for a fair value of //p 3.00, equivalent to USD$150, or about what a retail chain might charge in western countries today.</p>\r\n\r\n<img src=/disputes.svg>\r\n<h2>Dispute resolution is built-in.</h2>\r\n<p>In the event of a dispute, a customer can always get their money back whilst the seller keeps their payment as well. Arguments are always settled amicably by default.</p>\r\n<p>Rampant use of the dispute system would lead to inflation, so <b>the catch is</b>, it reflects badly on anyone who abuses it, or any seller who routinely does not volunteer a refund during disputes. </p>\r\n<p>This system enables access to a fair dispute resolution process to people in countries that currently have no reliable legal system in place, whilst simultaneously reducing the burden on small-claims courts in the countries that do.</p>\r\n\r\n<img src=/demurrage.svg>\r\n<h2>Payments start to depreciate after 12 months.</h2>\r\n<p>This is difficult to grasp at first, and people are going to baulk at the idea. But it's super important and ultimately a non-issue once you've discarded your traditional understanding of money and savings.</p>\r\n<p><b>You never need to save, there is no debt, and investment and interest do not exist because every individual is a bank.</b></p>\r\n<p>A fundamental problem with money today is that those who have some of it, can make more of it, simply by moving it.</p>\r\n<p>Under Civil Money it is impossible for a minority to hoard cash or use it as a tool to make more money. Instead, everyone is encouraged to spend their money soon, which ensures the <b>distribution</b> of wealth and a happy and healthy global economy. Accounts that ping-pong money in order to circumvent depreciation can be openly identified and declined.</p>\r\n<p><b>Capitalism is not prohibited.</b> But your capital must no longer be held onto long-term in the form of money. Instead it must be converted into physical assets and property. You know... real things.</p>\r\n\r\n<img src=/hardtimes.svg>\r\n<h2>Because payments depreciate, your credit score automatically restores itself if you fall on hard times.</h2>\r\n<p>Depreciation of account debits along with a perpetually replenishing basic income ensures that people retain their dignity in the event of financial disaster. Nobody needs to struggle without access to essential goods and services for an extended period of time, if at all.</p>\r\n\r\n<h2>The barrier to entry is virtually non-existent, and personally identifying information is disallowed.</h2>\r\n<p>Civil Money is designed to work just as effectively for a remote village in Africa sharing a single smartphone, as it does a person standing in a shopping mall at a point of sale terminal. All you ever need is <b>temporary</b> access to a reasonably up-to-date web browser to create an account or complete a transaction.</p>\r\n<p>Because all data is public and poorly implemented business processes sometimes use bills or receipt numbers as a proof of identity, we do not permit storage of anything that traditionally has been used as a source of ID. Civil Money does not allow storage of even so much as your e-mail address.</p>\r\n\r\n<img src=/voting.svg>\r\n<h2>Every person can vote on changes to the system.</h2>\r\n<p>People can digitally sign votes in the same manner as regular transactions. A two-thirds majority is needed for any proposition to pass, meaning a significant winning margin is required before any changes are introduced. No vote counts more than another, however the minimum requirement for voting is a good standing and at least one settled transaction for every 30 day period, for the past year. This is simply to deter casual vote stuffing.</p>\r\n<p>Because Civil Money is a completely transparent system, researchers are encouraged to collect, validate and calculate results independently and report their findings. Voting outcomes are a scientific process and not locked in stone until a consensus with a reasonably low margin of error is established.</p>\r\n\r\n<h2>Identity verification is not a feature of Civil Money.</h2>\r\n<p><b>The value and authenticity of your account only exists through pre-established relationships with people and companies that you choose to associate with.</b></p>\r\n<p>Any idiot can make a bunch of fake accounts and send themselves money -- however it's a worthless pursuit and they're just wasting their time. The Civil Money design is such that illegitimate transactions and accounts are deemed worthless by the community at large, who may easily run a credit report in order to trace a corroborated money trail and determine a customer's legitimacy.</p>\r\n<p>At the end of the day money doesn't matter any more, only real relationships. Let's build people homes and sell people cars based on what they're truly contributing to society, by putting everyone on an even playing field and taking the imaginary value of cash out of existence.</p>\r\n\",\r\n\r\n";
                }
            },
            methods: {
                Load: function (lang, onReady) {
                    var dic = CM.Javascript.SR;
                    // Always load the reference language (English UK)
                    CM.Javascript.SR.Populate(CM.Javascript.SR.EN_GB);
                    if (!Bridge.referenceEquals(lang, "EN-GB")) {
                        var key = System.String.replaceAll(lang, "-", "_").toUpperCase();
                        var csv = Bridge.as(dic[System.Array.index(key, dic)], System.String);
                        if (csv != null) {
                            CM.Javascript.SR.Populate(csv);
                        }
                    }
                    CM.Javascript.SR.CurrentLanguage = lang;
                    onReady();
                },
                Populate: function (csv) {
                    var $t;
                    var cursor = { v : 0 };
                    var line;
                    var dic = CM.Javascript.SR;
                    while (((line = CM.Extensions.NextCsvLine(csv, cursor))) != null) {
                        if (line.length > 1) {
                            dic[System.Array.index(line[System.Array.index(0, line)], dic)] = line[System.Array.index(1, line)];
                        }
                    }
                    // Validation
                    var keys = Object.getOwnPropertyNames(dic);
                    var missing = "";
                    $t = Bridge.getEnumerator(keys);
                    try {
                        while ($t.moveNext()) {
                            var key = $t.Current;
                            if (System.String.indexOf(key, String.fromCharCode(95)) === -1) {
                                continue;
                            }
                            if (dic[System.Array.index(key, dic)] == null) {
                                missing = System.String.concat(missing, (System.String.concat(key, " ")));
                            } else if ((CM.BridgeHacks.StartsWith(key, "LABEL_", 5) || CM.BridgeHacks.StartsWith(key, "TITLE_", 5)) && System.String.indexOf(dic[System.Array.index(key, dic)].toString(), String.fromCharCode(60)) > -1) {
                                throw new System.Exception(System.String.concat("BUG! DISALLOWED HTML on Key ", key));
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }if (missing.length > 0) {
                        throw new System.Exception(System.String.concat("BUG! MISSING LANGUAGE KEYS: ", missing));
                    }
                }
            }
        }
    });

    Bridge.ns("CM.Javascript.SR", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.SR, {
        f1: function (_o6) {
            _o6.add("EN-GB", "English (UK)");
            _o6.add("EN-CA", "English (Canada)");
            _o6.add("EN-AU", "English (Australia)");
            _o6.add("EN-US", "English (US)");
            return _o6;
        }
    });

    Bridge.define("CM.Javascript.StatusPage.PeerVisual", {
        fields: {
            Element: null,
            _Content: null,
            _Glyph: null,
            _Peer: null,
            _Status: null,
            _Title: null
        },
        ctors: {
            ctor: function (p) {
                this.$initialize();                var $t;

                this._Peer = p;
                this.Element = ($t = document.createElement('div'), $t.className = "peer", $t);
                this._Glyph = CM.BridgeHacks.Div(this.Element, "glyph");
                this._Title = CM.BridgeHacks.H2(this.Element, CM.Javascript.Page.HtmlEncode(p.toString()));
                this._Status = CM.BridgeHacks.H3(this.Element, null);
                this._Content = CM.BridgeHacks.Div(this.Element);
                this.Refresh();
                this.Element.onclick = Bridge.fn.bind(this, $asm.$.CM.Javascript.StatusPage.PeerVisual.f1);
        }
    },
    methods: {
        Refresh: function () {

            // TODO: We will make all of this a bit tidier and functional if Civil Money gains traction.

            CM.BridgeHacks.Clear(this._Content);
            this._Title.innerHTML = CM.Javascript.Page.HtmlEncode(this._Peer.toString());
            var glyph = null;
            var statusName = System.Enum.toString(CM.Javascript.PeerState, this._Peer.State);
            switch (this._Peer.State) {
                case CM.Javascript.PeerState.Disconnected: 
                case CM.Javascript.PeerState.Broken: 
                    glyph = CM.Javascript.Assets.SVG.CircleError;
                    break;
                case CM.Javascript.PeerState.Connected: 
                    glyph = CM.Javascript.Assets.SVG.CircleTick;
                    break;
                case CM.Javascript.PeerState.Connecting: 
                    glyph = CM.Javascript.Assets.SVG.Wait;
                    break;
                default: 
                case CM.Javascript.PeerState.Unknown: 
                    glyph = CM.Javascript.Assets.SVG.CircleUnknown;
                    statusName = "Not connected";
                    break;
            }
            this._Glyph.innerHTML = glyph.ToString(16, 16, "#000000");
            this._Status.innerHTML = statusName;
            var conns = CM.BridgeHacks.Div(this._Content, "conns");

            if (this._Peer.PredecessorEndpoint != null) {
                CM.BridgeHacks.Span(conns, System.String.concat("◄ ", CM.Javascript.Page.HtmlEncode(this._Peer.PredecessorEndpoint)), "pred");
            }
            if (this._Peer.SuccessorEndpoint != null) {
                CM.BridgeHacks.Span(conns, System.String.concat(CM.Javascript.Page.HtmlEncode(this._Peer.SuccessorEndpoint), " ►"), "succ");
            }
        }
    }
    });

    Bridge.ns("CM.Javascript.StatusPage.PeerVisual", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.StatusPage.PeerVisual, {
        f1: function (e) {
            if (this._Peer.State !== CM.Javascript.PeerState.Connected) {
                this._Peer.BeginConnect(null);
            } else {
                this._Peer.Ping();
            }
        }
    });

    /**
     * A UI component which display transaction information and buttons for performing actions.
     *
     * @class CM.Javascript.TransactionInfo
     */
    Bridge.define("CM.Javascript.TransactionInfo", {
        fields: {
            OnButtonClick: null,
            Transaction: null
        },
        ctors: {
            ctor: function (parent, t, includeAmount, showPayerButtons) {
                if (showPayerButtons === void 0) { showPayerButtons = true; }

                this.$initialize();
                this.Transaction = t;
                var container = CM.BridgeHacks.Div(parent, "transinfo");
                var idHolder = CM.BridgeHacks.Div(container, "id"); // Page.HtmlEncode("ID: " + t.ID));
                var url = System.String.concat("/", System.String.replaceAll(t.ID, " ", "+"));
                CM.BridgeHacks.Span(idHolder, "ID: ");
                CM.BridgeHacks.A$1(idHolder, t.ID, url).addEventListener("click", Bridge.fn.cacheBind(this, this.RaiseOnButtonClick));

                if (includeAmount) {
                    CM.BridgeHacks.Amount(CM.BridgeHacks.H2(container, ""), t.Amount, CM.Constants.Symbol, false);
                }
                if (!System.String.isNullOrWhiteSpace(t.Memo)) {
                    CM.BridgeHacks.Div(container, "memo", CM.Javascript.Page.HtmlEncode(t.Memo));
                }
                var row = CM.BridgeHacks.Div(container, "row");

                var right = CM.BridgeHacks.Div(row, "cell-third qr-cell");
                CM.BridgeHacks.Div(right, null, CM.Javascript.QRCode.GenerateQRCode(System.String.concat(CM.Constants.TrustedSite, url), 128, 128));

                var left = CM.BridgeHacks.Div(row, "cell-third");
                CM.BridgeHacks.H4(left, CM.Javascript.SR.LABEL_PAY_FROM);

                CM.BridgeHacks.A$1(CM.BridgeHacks.Div(left), CM.Javascript.Page.HtmlEncode(t.PayerID), System.String.concat("/", t.PayerID));
                var status = "";
                switch (t.PayerStatus) {
                    case CM.Schema.PayerStatus.Accept: 
                        status = System.String.concat(CM.Javascript.Assets.SVG.CircleTick.ToString(16, 16, CM.Javascript.Assets.SVG.STATUS_GREEN_COLOR), " ", CM.Javascript.SR.LABEL_PAYER_STATUS_ACCEPT);
                        break;
                    case CM.Schema.PayerStatus.Cancel: 
                        status = System.String.concat(CM.Javascript.Assets.SVG.CircleRemove.ToString(16, 16, "#cccccc"), " ", CM.Javascript.SR.LABEL_PAYER_STATUS_CANCEL);
                        break;
                    case CM.Schema.PayerStatus.NotSet: 
                        status = System.String.concat(CM.Javascript.Assets.SVG.CircleUnknown.ToString(16, 16, "#cccccc"), " ", CM.Javascript.SR.LABEL_PAYER_STATUS_NOTSET);
                        break;
                    case CM.Schema.PayerStatus.Dispute: 
                        status = System.String.concat(CM.Javascript.Assets.SVG.Warning.ToString(16, 16, "#cc0000"), " ", CM.Javascript.SR.LABEL_PAYER_STATUS_DISPUTE);
                        break;
                }
                CM.BridgeHacks.Div(left, "status", status);
                CM.BridgeHacks.Div(left, "tag", !System.String.isNullOrWhiteSpace(t.PayerTag) ? System.String.concat(CM.Javascript.Assets.SVG.Tag.ToString(16, 16, "#cccccc"), " ", CM.Javascript.Page.HtmlEncode(t.PayerTag)) : "");
                var butts = CM.BridgeHacks.Div(left, "button-row");
                if (showPayerButtons) {
                    switch (t.PayerStatus) {
                        case CM.Schema.PayerStatus.Accept: 
                            if (t.PayeeStatus === CM.Schema.PayeeStatus.Accept) {
                                CM.BridgeHacks.Button(butts, CM.Javascript.SR.LABEL_PAYER_STATUS_DISPUTE_VERB, Bridge.fn.bind(this, function (e) {
                                    CM.Javascript.App.Identity.CurrentPage = new CM.Javascript.AuthorisePage.$ctor1(t.PayerID, CM.Schema.PayerStatus.Dispute, t);
                                    this.RaiseOnButtonClick();
                                }));
                            } else if (t.PayeeStatus === CM.Schema.PayeeStatus.NotSet) {
                                CM.BridgeHacks.Button(butts, CM.Javascript.SR.LABEL_PAYER_STATUS_CANCEL_VERB, Bridge.fn.bind(this, function (e) {
                                    CM.Javascript.App.Identity.CurrentPage = new CM.Javascript.AuthorisePage.$ctor1(t.PayerID, CM.Schema.PayerStatus.Cancel, t);
                                    this.RaiseOnButtonClick();
                                }));
                            }
                            break;
                    }
                }
                var mid = CM.BridgeHacks.Div(row, "cell-third");
                CM.BridgeHacks.H4(mid, CM.Javascript.SR.LABEL_PAY_TO);
                CM.BridgeHacks.A$1(CM.BridgeHacks.Div(mid), CM.Javascript.Page.HtmlEncode(t.PayeeID), System.String.concat("/", t.PayeeID));
                status = "";
                switch (t.PayeeStatus) {
                    case CM.Schema.PayeeStatus.Accept: 
                        status = System.String.concat(CM.Javascript.Assets.SVG.CircleTick.ToString(16, 16, CM.Javascript.Assets.SVG.STATUS_GREEN_COLOR), " ", CM.Javascript.SR.LABEL_PAYEE_STATUS_ACCEPT);
                        break;
                    default: 
                    case CM.Schema.PayeeStatus.NotSet: 
                        status = System.String.concat(CM.Javascript.Assets.SVG.CircleUnknown.ToString(16, 16, "#cccccc"), " ", CM.Javascript.SR.LABEL_PAYEE_STATUS_NOTSET);
                        break;
                    case CM.Schema.PayeeStatus.Refund: 
                        status = System.String.concat(CM.Javascript.Assets.SVG.Warning.ToString(16, 16, "#cccccc"), " ", CM.Javascript.SR.LABEL_PAYEE_STATUS_REFUND);
                        break;
                    case CM.Schema.PayeeStatus.Decline: 
                        status = System.String.concat(CM.Javascript.Assets.SVG.CircleError.ToString(16, 16, "#cc0000"), " ", CM.Javascript.SR.LABEL_PAYEE_STATUS_DECLINE);
                        break;
                }
                CM.BridgeHacks.Div(mid, "status", status);
                CM.BridgeHacks.Div(mid, "tag", !System.String.isNullOrWhiteSpace(t.PayeeTag) ? System.String.concat(CM.Javascript.Assets.SVG.Tag.ToString(16, 16, "#cccccc"), " ", CM.Javascript.Page.HtmlEncode(t.PayeeTag)) : "");
                butts = CM.BridgeHacks.Div(mid, "button-row");
                switch (t.PayeeStatus) {
                    case CM.Schema.PayeeStatus.NotSet: 
                        if (t.PayerStatus !== CM.Schema.PayerStatus.Cancel) {
                            CM.BridgeHacks.Button(butts, CM.Javascript.SR.LABEL_PAYEE_STATUS_ACCEPT_VERB, Bridge.fn.bind(this, function (e) {
                                CM.Javascript.App.Identity.CurrentPage = new CM.Javascript.AuthorisePage.$ctor1(t.PayeeID, CM.Schema.PayeeStatus.Accept, t);
                                this.RaiseOnButtonClick();
                            }));
                            CM.BridgeHacks.Button(butts, CM.Javascript.SR.LABEL_PAYEE_STATUS_DECLINE_VERB, Bridge.fn.bind(this, function (e) {
                                CM.Javascript.App.Identity.CurrentPage = new CM.Javascript.AuthorisePage.$ctor1(t.PayeeID, CM.Schema.PayeeStatus.Decline, t);
                                this.RaiseOnButtonClick();
                            }));
                        }
                        break;
                    case CM.Schema.PayeeStatus.Accept: 
                        CM.BridgeHacks.Button(butts, CM.Javascript.SR.LABEL_PAYEE_STATUS_REFUND_VERB, Bridge.fn.bind(this, function (e) {
                            CM.Javascript.App.Identity.CurrentPage = new CM.Javascript.AuthorisePage.$ctor1(t.PayeeID, CM.Schema.PayeeStatus.Refund, t);
                            this.RaiseOnButtonClick();
                        }));
                        break;
                    case CM.Schema.PayeeStatus.Refund: 
                    case CM.Schema.PayeeStatus.Decline: 
                        break;
                }
            }
        },
        methods: {
            RaiseOnButtonClick: function () {
                if (!Bridge.staticEquals(this.OnButtonClick, null)) {
                    this.OnButtonClick();
                }
            }
        }
    });

    /**
     * Describes a CM WebSocket request or response payload
     *
     * @public
     * @class CM.Message
     */
    Bridge.define("CM.Message", {
        fields: {
            Request: null,
            Response: null,
            RawContent: null,
            _Values: null
        },
        props: {
            Values: {
                get: function () {
                    return this._Values;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this._Values = new CM.NamedValueList();
            },
            $ctor1: function (payload) {
                this.$initialize();
                this._Values = CM.NamedValueList.FromContentString(payload);
            }
        },
        methods: {
            getItem: function (key) {
                return this._Values.getItem$1(key);
            },
            setItem: function (key, value) {
                this._Values.setItem$1(key, value);
            },
            toString: function () {
                return this.Request != null ? System.String.concat(this.Request.Action, " (", this.Request.NOnce, ")") : this.Response != null ? System.String.concat("(", this.Response.NOnce, ") ", this.Response.Code.toString()) : "Message";
            },
            ToContent: function () {
                return System.Text.Encoding.UTF8.GetBytes(this._Values.ToContentString());
            },
            ToContentString: function () {
                return this._Values.ToContentString();
            },
            ToRequestString: function () {
                return this.ToRequestString$1(this.Request);
            },
            ToRequestString$1: function (request) {
                if (request == null) {
                    throw new System.InvalidOperationException("No request specified.");
                }
                var s = new System.Text.StringBuilder();
                s.append(System.String.concat(request, "\r\n"));
                s.append(this._Values.ToContentString());
                s.append(System.String.concat("END ", request.NOnce, "\r\n"));
                return s.toString();
            },
            ToResponseString: function () {
                if (this.Response == null) {
                    throw new System.InvalidOperationException("No response specified.");
                }
                var s = new System.Text.StringBuilder();
                s.append(System.String.concat(this.Response, "\r\n"));
                s.append(this._Values.ToContentString());
                s.append(System.String.concat("END ", this.Response.NOnce, "\r\n"));
                return s.toString();
            },
            Cast: function (T) {
                if (Bridge.referenceEquals(T, Bridge.getType(this))) {
                    return Bridge.cast(this, T);
                }
                var t = Bridge.createInstance(T);
                t._Values = this._Values;
                t.Request = this.Request;
                t.Response = this.Response;
                t.RawContent = this.RawContent;
                return t;
            },
            Clone: function () {
                var t = Bridge.cast(Bridge.createInstance(Bridge.getType(this)), CM.Message);
                t._Values = this._Values;
                t.Request = this.Request;
                t.Response = this.Response;
                t.RawContent = this.RawContent;
                return t;
            }
        }
    });

    Bridge.define("CM.Message.RequestHeader", {
        statics: {
            fields: {
                PREFIX: null
            },
            ctors: {
                init: function () {
                    this.PREFIX = "CMD";
                }
            }
        },
        fields: {
            OriginalLine: null,
            Action: null,
            NOnce: null,
            Arguments: null,
            IsValid: false
        },
        props: {
            /**
             * All commands presently have at most 1x argument. This saves some code.
             *
             * @instance
             * @public
             * @readonly
             * @memberof CM.Message.RequestHeader
             * @function FirstArgument
             * @type string
             */
            FirstArgument: {
                get: function () {
                    return this.Arguments != null && this.Arguments.length > 0 ? this.Arguments[System.Array.index(0, this.Arguments)] : null;
                }
            },
            AllArguments: {
                get: function () {
                    return this.Arguments != null && this.Arguments.length > 0 ? this.Arguments.join(" ") : null;
                }
            }
        },
        ctors: {
            ctor: function (line) {
                this.$initialize();
                // CMD [PUT-ACCOUNT | GET-ACCOUNT | PUT-TRANSACTION | GET-TRANSACTION | FIND-TRANSACTIONS ] [NOnce] [Command specific args]
                this.OriginalLine = line;
                var args = System.String.split(line, [32].map(function(i) {{ return String.fromCharCode(i); }}));
                if (args.length < 3 || !Bridge.referenceEquals(args[System.Array.index(0, args)], CM.Message.RequestHeader.PREFIX)) {
                    this.IsValid = false;
                    return;
                }
                this.Action = args[System.Array.index(1, args)];
                this.NOnce = args[System.Array.index(2, args)];
                this.IsValid = this.Action.length > 0 && this.NOnce.length > 0;
                this.Arguments = System.Linq.Enumerable.from(args).skip(3).toArray(System.String);
            },
            $ctor1: function (action, nonce, args) {
                if (args === void 0) { args = []; }

                this.$initialize();
                this.Action = action;
                this.NOnce = nonce;
                this.Arguments = args;
                this.OriginalLine = System.String.concat("CMD ", action, " ", nonce);
                if (args != null && args.length > 0) {
                    this.OriginalLine = System.String.concat(this.OriginalLine, (System.String.concat(" ", args.join(" "))));
                }
                this.IsValid = true;
            }
        },
        methods: {
            toString: function () {
                return this.OriginalLine;
            }
        }
    });

    Bridge.define("CM.Message.ResponseHeader", {
        statics: {
            fields: {
                PREFIX: null
            },
            ctors: {
                init: function () {
                    this.PREFIX = "RES";
                }
            }
        },
        fields: {
            OriginalLine: null,
            Code: null,
            NOnce: null,
            Arguments: null,
            IsValid: false
        },
        props: {
            /**
             * Returns true if the response is valid and the CMResult code is &gt;= 0.
             *
             * @instance
             * @public
             * @readonly
             * @memberof CM.Message.ResponseHeader
             * @function IsSuccessful
             * @type boolean
             */
            IsSuccessful: {
                get: function () {
                    return this.IsValid && this.Code.Code >= 0;
                }
            }
        },
        ctors: {
            init: function () {
                this.Code = new CM.CMResult();
            },
            ctor: function (res, nonce, args) {
                if (args === void 0) { args = []; }

                this.$initialize();
                this.Code = res.$clone();
                this.NOnce = nonce;
                // uint cast for Bridge bug
                this.OriginalLine = System.String.concat("RES 0x", System.UInt32.format((res.Code >>> 0), "x"), " ", nonce);
                for (var i = 0; i < args.length; i = (i + 1) | 0) {
                    this.OriginalLine = System.String.concat(this.OriginalLine, (System.String.concat(" ", args[System.Array.index(i, args)])));
                }
                this.IsValid = true;
            },
            $ctor1: function (line) {
                this.$initialize();
                //RES 0x[hexadecimal CMResult Code] [NOnce] [Command specific arguments]
                this.OriginalLine = line;
                var args = System.String.split(line, [32].map(function(i) {{ return String.fromCharCode(i); }}));
                if (args.length < 3 || !Bridge.referenceEquals(args[System.Array.index(0, args)], CM.Message.ResponseHeader.PREFIX)) {
                    this.IsValid = false;
                    return;
                }
                var code = -1;
                // Workaround for Bridge int.parse bug.
                // parseInt handles 0x OK, but it comes out as a long..
                code = parseInt(args[1]);
                // ..convert back to signed int.
                code = System.Int64.clip32(System.Int64.parse(code.toString()));

                this.Code.Code = code;
                this.NOnce = args[System.Array.index(2, args)];
                this.Arguments = System.Linq.Enumerable.from(args).skip(3).toArray(System.String);
                this.IsValid = true;
            }
        },
        methods: {
            toString: function () {
                return this.OriginalLine;
            }
        }
    });

    /**
     * A reader which emits Messages from raw UTF-8 bytes.
     *
     * @public
     * @class CM.MessageReader
     */
    Bridge.define("CM.MessageReader", {
        fields: {
            _Current: null,
            _CurrentLine: null,
            _CurrentLinePos: 0,
            _NOnce: null,
            _OnError: null,
            _OnMessage: null
        },
        ctors: {
            init: function () {
                this._CurrentLine = System.Array.init(1024, 0, System.Byte);
            },
            ctor: function (onMessage, onError) {
                this.$initialize();
                this._OnMessage = onMessage;
                this._OnError = onError;
            }
        },
        methods: {
            Write: function (b, offset, count) {
                for (var i = offset; i < ((offset + count) | 0); i = (i + 1) | 0) {
                    if (this._CurrentLine.length === this._CurrentLinePos) {
                        System.Array.resize(Bridge.ref(this, "_CurrentLine"), Bridge.Int.mul(this._CurrentLinePos, 2), 0);
                    }
                    if (b[System.Array.index(i, b)] === 10) {
                        // End of line
                        this.AppendLine(System.String.trimEnd(System.Text.Encoding.UTF8.GetString(this._CurrentLine, 0, this._CurrentLinePos), CM.Constants.NewLineChars));
                        this._CurrentLinePos = 0;
                    } else {
                        this._CurrentLine[System.Array.index(Bridge.identity(this._CurrentLinePos, (this._CurrentLinePos = (this._CurrentLinePos + 1) | 0)), this._CurrentLine)] = b[System.Array.index(i, b)];
                    }
                }
            },
            Write$1: function (payload) {
                var lines = System.String.split(System.String.trimEnd(payload, CM.Constants.NewLineChars), [10].map(function(i) {{ return String.fromCharCode(i); }}));
                for (var i = 0; i < lines.length; i = (i + 1) | 0) {
                    this.AppendLine(System.String.trimEnd(lines[System.Array.index(i, lines)], CM.Constants.NewLineChars));
                }
            },
            AppendLine: function (s) {
                if (this._Current == null) {
                    // New message, expect CMD or RES.
                    if (System.String.startsWith(s, "CMD ")) {
                        this._Current = new CM.Message.ctor();
                        this._Current.Request = new CM.Message.RequestHeader.ctor(s);
                        if (!this._Current.Request.IsValid) {
                            this.OnError(System.String.concat("Invalid request header: ", s));
                            this._Current = null;
                        } else {
                            this._NOnce = this._Current.Request.NOnce;
                        }
                    } else if (System.String.startsWith(s, "RES ")) {
                        this._Current = new CM.Message.ctor();
                        this._Current.Response = new CM.Message.ResponseHeader.$ctor1(s);
                        if (!this._Current.Response.IsValid) {
                            this.OnError(System.String.concat("Invalid response header: ", s));
                            this._Current = null;
                        } else {
                            this._NOnce = this._Current.Response.NOnce;
                        }
                    } else {
                        this.OnError(System.String.concat("Expect CMD or RES - got '", s, "'"));
                    }
                } else {
                    if (System.String.equals(s, System.String.concat("END ", this._NOnce))) {
                        // End of message
                        this._OnMessage(this._Current);
                        this._Current = null;
                    } else {
                        this._Current.Values.Append$1(s);
                    }
                }
            },
            OnError: function (msg) {
                if (!Bridge.staticEquals(this._OnError, null)) {
                    this._OnError(msg);
                }
            }
        }
    });

    Bridge.define("CM.MessageValueException", {
        inherits: [System.Exception],
        ctors: {
            ctor: function (fieldName) {
                this.$initialize();
                System.Exception.ctor.call(this, System.String.concat(fieldName, " is invalid"));
            }
        }
    });

    Bridge.define("CM.NamedValueList", {
        statics: {
            methods: {
                FromContentString: function (payload) {
                    var ar = new CM.NamedValueList();
                    var lines = System.String.split(payload, [10].map(function(i) {{ return String.fromCharCode(i); }}));
                    for (var i = 0; i < lines.length; i = (i + 1) | 0) {
                        ar.Append$1(System.String.trimEnd(lines[System.Array.index(i, lines)], CM.Constants.NewLineChars));
                    }
                    return ar;
                }
            }
        },
        fields: {
            _Values: null
        },
        props: {
            Count: {
                get: function () {
                    return this._Values.Count;
                }
            }
        },
        ctors: {
            init: function () {
                this._Values = new (System.Collections.Generic.List$1(CM.NamedValueList.NamedValue))();
            }
        },
        methods: {
            getItem: function (index) {
                return this._Values.getItem(index);
            },
            getItem$1: function (key) {
                return this.Find(key);
            },
            setItem$1: function (key, value) {
                this.Set(key, value);
            },
            Clone: function () {
                var ar = new CM.NamedValueList();
                for (var i = 0; i < this._Values.Count; i = (i + 1) | 0) {
                    ar._Values.add(new CM.NamedValueList.NamedValue.$ctor1(this._Values.getItem(i).Name, this._Values.getItem(i).Value));
                }
                return ar;
            },
            Find: function (name) {
                for (var i = 0; i < this._Values.Count; i = (i + 1) | 0) {
                    if (System.String.compare(this._Values.getItem(i).Name, name, 5) === 0) {
                        return this._Values.getItem(i).Value;
                    }
                }
                return null;
            },
            RemoveAll: function (name) {
                for (var i = 0; i < this._Values.Count; i = (i + 1) | 0) {
                    if (System.String.compare(this._Values.getItem(i).Name, name, 5) === 0) {
                        this._Values.removeAt(i);
                        i = (i - 1) | 0;
                    }
                }
            },
            Clear: function () {
                this._Values.clear();
            },
            Append$2: function (name, value) {
                this._Values.add(new CM.NamedValueList.NamedValue.$ctor1(name, value));
            },
            Append$1: function (line) {
                if (!System.String.isNullOrWhiteSpace(line)) {
                    this._Values.add(new CM.NamedValueList.NamedValue.ctor(line));
                }
            },
            Append: function (src) {
                this._Values.addRange(src._Values);
            },
            RemoveAt: function (index) {
                this._Values.removeAt(index);
            },
            ReplaceWithRange: function (src, startIndex, endIndex) {
                this._Values.clear();
                for (var i = startIndex; i < endIndex; i = (i + 1) | 0) {
                    this._Values.add(src.getItem(i));
                }
            },
            Set: function (name, value) {
                // Because message content is used for signing, it's important to trim any white space
                // around values so that we don't get unintentional signature mismatches after they
                // go over the wire and message parsing trims the ends.
                if (value != null) {
                    value = value.trim();
                }

                var idx = -1;
                for (var i = 0; i < this._Values.Count; i = (i + 1) | 0) {
                    if (System.String.compare(this._Values.getItem(i).Name, name, 5) === 0) {
                        idx = i;
                        break;
                    }
                }
                if (idx !== -1) {
                    this._Values.getItem(idx).Value = value;
                } else {
                    this.Append$2(name, value);
                }
            },
            Set$1: function (T, key, value) {
                var name = { v : Bridge.Reflection.getTypeFullName(T) };
                this.TranslateTypeName(name);
                switch (name.v) {
                    case "System.Decimal": 
                        this.Set(key, Bridge.Int.format(System.Decimal(System.Nullable.getValue(Bridge.cast(Bridge.unbox(value), System.Decimal))), "0.000000", System.Globalization.CultureInfo.invariantCulture));
                        break;
                    case "System.DateTime": 
                        this.Set(key, CM.Helpers.DateToISO8601(System.Nullable.getValue(Bridge.cast(Bridge.unbox(value), System.DateTime))));
                        break;
                    case "System.Byte[]": 
                        if (value != null) {
                            this.Set(key, System.Convert.toBase64String(Bridge.cast(value, System.Array.type(System.Byte)), null, null, null));
                        }
                        break;
                    case "System.String": 
                    case "System.UInt32": 
                    case "CM.Schema.PrivateKey": 
                        if (value != null) {
                            this.Set(key, value.toString());
                        }
                        break;
                    case "System.Boolean": 
                        {
                            if (value != null) {
                                this.Set(key, System.Nullable.getValue(Bridge.cast(Bridge.unbox(value), System.Boolean)) ? "1" : "0");
                            }
                        }
                        break;
                    case "CM.Schema.PayerStatus": 
                    case "CM.Schema.PayeeStatus": 
                        if (value != null) {
                            this.Set(key, System.Enum.getName(T, value));
                        }
                        break;
                    default: 
                        throw new System.ArgumentException(System.String.concat(name.v, " is not supported for serialisation."));
                }
            },
            TranslateTypeName: function (name) {
                name.v = System.String.replaceAll(name.v, "Bridge.", "System.");
                switch (name.v) {
                    case "Date": 
                        name.v = "System.DateTime";
                        break;
                    case "String": 
                        name.v = "System.String";
                        break;
                    case "Decimal": 
                        name.v = "System.Decimal";
                        break;
                    case "UInt32": 
                        name.v = "System.UInt32";
                        break;
                    case "Boolean": 
                        name.v = "System.Boolean";
                        break;
                    case "Array": 
                        name.v = "System.Byte[]";
                        break;
                }
            },
            Get: function (T, key) {
                var name = { v : Bridge.Reflection.getTypeFullName(T) };
                this.TranslateTypeName(name);
                var str = this.Find(key);
                if (System.String.isNullOrWhiteSpace(str)) {
                    //#if JAVASCRIPT
                    //                // Bridge bug workaround (enumeration don't have safe defaults)
                    //                if(name=="CM.Schema.PayeeStatus"||name=="CM.Schema.PayerStatus")
                    //                 Bridge.Script.Write("return 0;");
                    //#endif
                    return Bridge.getDefaultValue(T);
                }
                var o = null;

                switch (name.v) {
                    case "System.UInt32": 
                        {
                            var v = { };
                            if (!System.UInt32.tryParse(str, v)) {
                                throw new CM.MessageValueException(key);
                            }
                            o = Bridge.box(v.v, System.UInt32);
                        }
                        break;
                    case "System.String": 
                        {
                            o = str.trim();
                        }
                        break;
                    case "System.Boolean": 
                        {
                            o = Bridge.box(Bridge.referenceEquals(str, "1"), System.Boolean, System.Boolean.toString);
                        }
                        break;
                    case "System.Decimal": 
                        {
                            var v1 = { };
                            if (!System.Decimal.tryParse(str, System.Globalization.CultureInfo.invariantCulture, v1)) {
                                throw new CM.MessageValueException(key);
                            }
                            o = v1.v;
                        }
                        break;
                    case "System.DateTime": 
                        {
                            var v2 = { };
                            if (!CM.Helpers.DateFromISO8601(str, v2)) {
                                throw new CM.MessageValueException(key);
                            }
                            o = Bridge.box(v2.v, System.DateTime, System.DateTime.format);
                        }
                        break;
                    case "System.Byte[]": 
                        {
                            try {
                                o = System.Convert.fromBase64String(str);
                            }
                            catch ($e1) {
                                $e1 = System.Exception.create($e1);
                                throw new CM.MessageValueException(key);
                            }
                        }
                        break;
                    case "CM.Schema.PrivateKey": 
                        {
                            var v3 = { };
                            if (!CM.Schema.PrivateKey.TryParse(str, v3)) {
                                throw new CM.MessageValueException(key);
                            }
                            o = v3.v;
                        }
                        break;
                    case "CM.Schema.PayerStatus": 
                        {
                            var v4 = { v : new CM.Schema.PayerStatus() };
                            if (!System.Enum.tryParse(CM.Schema.PayerStatus, str, v4, true)) {
                                throw new CM.MessageValueException(key);
                            }
                            o = Bridge.box(v4.v, CM.Schema.PayerStatus, System.Enum.toStringFn(CM.Schema.PayerStatus));
                            //                        // Bridge enumeration cast bug workaround
                            //#if JAVASCRIPT
                            //                       Bridge.Script.Write("return o;");
                            //#endif
                        }
                        break;
                    case "CM.Schema.PayeeStatus": 
                        {
                            var v5 = { v : new CM.Schema.PayeeStatus() };
                            if (!System.Enum.tryParse(CM.Schema.PayeeStatus, str, v5, true)) {
                                throw new CM.MessageValueException(key);
                            }
                            o = Bridge.box(v5.v, CM.Schema.PayeeStatus, System.Enum.toStringFn(CM.Schema.PayeeStatus));
                            //                        // Bridge enumeration cast bug workaround
                            //#if JAVASCRIPT
                            //                       Bridge.Script.Write("return o;");
                            //#endif
                        }
                        break;
                    default: 
                        throw new System.ArgumentException(System.String.concat(name.v, " is not supported for serialisation."));
                }
                return Bridge.cast(Bridge.unbox(o), T);
            },
            ToContentString: function () {
                var s = new System.Text.StringBuilder();
                for (var i = 0; i < this._Values.Count; i = (i + 1) | 0) {
                    if (!System.String.isNullOrWhiteSpace(this._Values.getItem(i).Value)) {
                        s.append(System.String.concat(this._Values.getItem(i).toString(), "\r\n"));
                    }
                }
                return s.toString();
            }
        }
    });

    Bridge.define("CM.NamedValueList.NamedValue", {
        fields: {
            Name: null,
            Value: null
        },
        ctors: {
            ctor: function (line) {
                this.$initialize();
                if (line != null && System.String.indexOf(line, String.fromCharCode(58)) > -1) {
                    line = line.trim();
                    this.Name = line.substr(0, System.String.indexOf(line, String.fromCharCode(58)));
                    this.Value = line.substr(((System.String.indexOf(line, String.fromCharCode(58)) + 1) | 0)).trim();
                } else {
                    this.Name = line;
                    this.Value = null;
                }
            },
            $ctor1: function (n, v) {
                this.$initialize();
                this.Name = n;
                this.Value = v;
            }
        },
        methods: {
            toString: function () {
                return this.Name != null ? System.String.concat(this.Name, ": ", this.Value) : "";
            }
        }
    });

    /**
     * Describes a Civil Money Point of Sale payment link which
     can be used by customers to send money for a specific
     amount/description. A payment link is in the form of
     https://civil.money/{accountname}/{modified-base64-config}
     *
     * @public
     * @class CM.PaymentLink
     */
    Bridge.define("CM.PaymentLink", {
        statics: {
            methods: {
                Escape: function (v) {
                    if (v == null) {
                        return v;
                    }
                    return System.String.replaceAll(v, "\n", "\\n");
                },
                UnEscape: function (v) {
                    if (v == null) {
                        return v;
                    }
                    return System.String.replaceAll(v, "\\n", "\n");
                },
                /**
                 * Attempts to decode a payment URL.
                 *
                 * @static
                 * @public
                 * @this CM.PaymentLink
                 * @memberof CM.PaymentLink
                 * @param   {string}            url       The full URL to decode, including host name
                 * @param   {CM.PaymentLink}    config    A pointer to receive the decoded configuration.
                 * @return  {boolean}                     True if decoding was successful, otherwise false.
                 */
                TryDecodeUrl: function (url, config) {
                    // https://civil.money/<accountname>/<modified-base64-config>
                    config.v = null;
                    if (!System.String.startsWith(url, "https://civil.money/")) {
                        return false;
                    }
                    url = url.substr(((CM.Constants.TrustedSite.length + 1) | 0));
                    var parts = System.String.split(url, [47].map(function(i) {{ return String.fromCharCode(i); }}));
                    if (parts.length !== 2 || parts[System.Array.index(1, parts)].length < 5 || !CM.Helpers.IsIDValid(parts[System.Array.index(0, parts)])) {
                        return false;
                    }
                    try {
                        var b64 = System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(parts[System.Array.index(1, parts)], "_", "/"), "-", "+"), "~", "=");
                        var b = System.Convert.fromBase64String(b64);
                        var payload = System.Text.Encoding.UTF8.GetString(b, 0, b.length);
                        var ar = System.String.split(payload, [10].map(function(i) {{ return String.fromCharCode(i); }}));
                        if (ar.length !== 5) {
                            return false;
                        }
                        config.v = new CM.PaymentLink();
                        config.v.Payee = parts[System.Array.index(0, parts)];
                        config.v.Amount = CM.PaymentLink.UnEscape(ar[System.Array.index(0, ar)]);
                        config.v.PayeeTag = CM.PaymentLink.UnEscape(ar[System.Array.index(1, ar)]);
                        config.v.Memo = CM.PaymentLink.UnEscape(ar[System.Array.index(2, ar)]);
                        config.v.IsAmountReadOnly = Bridge.referenceEquals(ar[System.Array.index(3, ar)], "1");
                        config.v.IsMemoReadOnly = Bridge.referenceEquals(ar[System.Array.index(4, ar)], "1");
                        return true;
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        return false;
                    }
                }
            }
        },
        fields: {
            Payee: null,
            Amount: null,
            PayeeTag: null,
            Memo: null,
            IsAmountReadOnly: false,
            IsMemoReadOnly: false
        },
        methods: {
            toString: function () {
                var b = System.Text.Encoding.UTF8.GetBytes(System.Array.init([CM.PaymentLink.Escape(this.Amount), CM.PaymentLink.Escape(this.PayeeTag), CM.PaymentLink.Escape(this.Memo), this.IsAmountReadOnly ? "1" : "", this.IsMemoReadOnly ? "1" : ""], System.String).join("\n"));
                var modifiedB64 = System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(System.Convert.toBase64String(b, null, null, null), "/", "_"), "+", "-"), "=", "~");
                return System.String.concat("https://civil.money/", this.Payee, "/", modifiedB64);
            }
        }
    });

    Bridge.define("CM.RecentReputation", {
        $kind: "enum",
        statics: {
            fields: {
                Good: 0,
                Overspent: 1,
                Bad: 2
            }
        }
    });

    Bridge.define("CM.RFC2898CryptoRequest", {
        fields: {
            Password: null,
            Salt: null,
            Iterations: 0,
            KeySizeBytes: 0,
            IVSizeBytes: 0,
            OutputKey: null,
            OutputIV: null
        }
    });

    Bridge.define("CM.RSAKeyRequest", {
        fields: {
            Output: null
        }
    });

    Bridge.define("CM.RSAParameters", {
        fields: {
            /**
             * Represents the D parameter for the RSA algorithm.
             *
             * @instance
             * @public
             * @memberof CM.RSAParameters
             * @type Array.<number>
             */
            D: null,
            /**
             * Represents the Exponent parameter for the RSA algorithm.
             *
             * @instance
             * @public
             * @memberof CM.RSAParameters
             * @type Array.<number>
             */
            Exponent: null,
            /**
             * Represents the Modulus parameter for the RSA algorithm.
             *
             * @instance
             * @public
             * @memberof CM.RSAParameters
             * @type Array.<number>
             */
            Modulus: null
        }
    });

    Bridge.define("CM.RSASignRequest", {
        fields: {
            Input: null,
            PrivateKey: null,
            PublicKey: null,
            OutputSignature: null,
            Tag: null
        }
    });

    Bridge.define("CM.RSAVerifyRequest", {
        fields: {
            Input: null,
            InputSignature: null,
            Exponent: null,
            PublicKey: null
        }
    });

    /** @namespace CM.Schema */

    /**
     * Defines supported account attribute names and values
     *
     * @public
     * @class CM.Schema.AccountAttributes
     */
    Bridge.define("CM.Schema.AccountAttributes", {
        statics: {
            fields: {
                GoverningAuthority_Key: null,
                IncomeEligibility_HealthProblem: null,
                IncomeEligibility_Key: null,
                IncomeEligibility_LookingForWork: null,
                IncomeEligibility_Retired: null,
                IncomeEligibility_Working: null,
                PushNotification_Key: null,
                SkillOrService_Key: null
            },
            ctors: {
                init: function () {
                    this.GoverningAuthority_Key = "ATTR-GOV";
                    this.IncomeEligibility_HealthProblem = "HLTH";
                    this.IncomeEligibility_Key = "ATTR-ELIG";
                    this.IncomeEligibility_LookingForWork = "UNEMP";
                    this.IncomeEligibility_Retired = "AGED";
                    this.IncomeEligibility_Working = "WORK";
                    this.PushNotification_Key = "ATTR-PUSH";
                    this.SkillOrService_Key = "ATTR-SKILL";
                }
            }
        }
    });

    Bridge.define("CM.Schema.AccountAttributes.PushNotificationCsv", {
        fields: {
            HttpUrl: null,
            Label: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (csvdata) {
                this.$initialize();
                var i = { v : 0 };
                this.Label = CM.Extensions.NextCsvValue(csvdata, i);
                this.HttpUrl = CM.Extensions.NextCsvValue(csvdata, i);
            }
        },
        methods: {
            toString: function () {
                if (System.String.isNullOrWhiteSpace(this.HttpUrl)) {
                    return "";
                }
                return System.String.concat(CM.Extensions.CsvEscape(this.Label), ",", CM.Extensions.CsvEscape(this.HttpUrl));
            }
        }
    });

    /**
     * Describes a skill CSV value
     *
     * @public
     * @class CM.Schema.AccountAttributes.SkillCsv
     */
    Bridge.define("CM.Schema.AccountAttributes.SkillCsv", {
        fields: {
            Level: 0,
            Value: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (csvdata) {
                this.$initialize();
                var i = { v : 0 };
                var level = CM.Extensions.NextCsvValue(csvdata, i);
                var v = { };
                System.Int32.tryParse(level, v);
                this.Level = v.v;
                this.Value = CM.Extensions.NextCsvValue(csvdata, i);
            }
        },
        methods: {
            toString: function () {
                if (System.String.isNullOrWhiteSpace(this.Value)) {
                    return "";
                }
                return System.String.concat(this.Level + ",", CM.Extensions.CsvEscape(this.Value));
            }
        }
    });

    /**
     * Skill levels provide further context around
     a person's qualifications, community involvement
     and income eligibility
     *
     * @public
     * @class number
     */
    Bridge.define("CM.Schema.AccountAttributes.SkillLevel", {
        $kind: "enum",
        statics: {
            fields: {
                Amateur: 0,
                Qualified: 1,
                Experienced: 2,
                Certified: 3
            }
        }
    });

    /**
     * Describes optional CALC-XXX attributes exposed by Account messages.
     *
     * @public
     * @class CM.Schema.AccountCalculations
     */
    Bridge.define("CM.Schema.AccountCalculations", {
        statics: {
            methods: {
                /**
                 * Given a list of untrusted AccountCalculations from various servers, come to a consensus
                 regarding credits and debits on the account.
                 *
                 * @static
                 * @public
                 * @this CM.Schema.AccountCalculations
                 * @memberof CM.Schema.AccountCalculations
                 * @param   {System.Collections.Generic.List$1}    pool         The pool of untrusted calculations.
                 * @param   {System.Int32}                         bestCount    Pointer to receive the number of servers that agreed with the calculation.
                 * @return  {CM.Schema.AccountCalculations}                     The calculation that most servers agree with or null.
                 */
                GetConsensus: function (pool, bestCount) {
                    bestCount.v = 0;
                    if (pool.Count === 0) {
                        return null;
                    }
                    var counts = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32))();
                    var best = null;

                    for (var i = 0; i < pool.Count; i = (i + 1) | 0) {
                        var c = pool.getItem(i);
                        var key = System.Nullable.getValueOrDefault(c.RecentDebits, System.Decimal(0.0)) + "_" + System.Nullable.getValueOrDefault(c.RecentCredits, System.Decimal(0.0)) + "_" + System.Boolean.toString(c.IsEligibleForVoting);
                        var count = { };
                        counts.tryGetValue(key, count);
                        count.v = (count.v + 1) | 0;
                        counts.set(key, count.v);
                        if (bestCount.v < count.v) {
                            best = c;
                            bestCount.v = count.v;
                        }
                    }
                    return best;
                }
            }
        },
        fields: {
            Account: null
        },
        props: {
            /**
             * The date of the last transaction this account was involved in.
             This can help corroborate DHT peer account statements.
             *
             * @instance
             * @public
             * @memberof CM.Schema.AccountCalculations
             * @function LastTransactionUtc
             * @type ?System.DateTime
             */
            LastTransactionUtc: {
                get: function () {
                    if (System.String.isNullOrWhiteSpace(this.Account.Values.getItem$1("CALC-LAST-TRANS"))) {
                        return null;
                    }
                    return this.Account.Values.Get(System.DateTime, "CALC-LAST-TRANS");
                },
                set: function (value) {
                    if (!Bridge.equals(value, null)) {
                        this.Account.Values.Set$1(System.DateTime, "CALC-LAST-TRANS", System.Nullable.getValue(value));
                    } else {
                        this.Account.Values.RemoveAll("CALC-LAST-TRANS");
                    }
                }
            },
            /**
             * Recent credits in the past 12 months.
             *
             * @instance
             * @public
             * @memberof CM.Schema.AccountCalculations
             * @function RecentCredits
             * @type ?number
             */
            RecentCredits: {
                get: function () {
                    if (System.String.isNullOrWhiteSpace(this.Account.Values.getItem$1("CALC-CREDITS"))) {
                        return System.Decimal.lift(null);
                    }
                    return this.Account.Values.Get(System.Decimal, "CALC-CREDITS");
                },
                set: function (value) {
                    if (System.Nullable.liftne("ne", value, System.Decimal.lift(null))) {
                        this.Account.Values.Set$1(System.Decimal, "CALC-CREDITS", System.Nullable.getValue(value));
                    } else {
                        this.Account.Values.RemoveAll("CALC-CREDITS");
                    }
                }
            },
            /**
             * Recent debits in the past 12 months.
             *
             * @instance
             * @public
             * @memberof CM.Schema.AccountCalculations
             * @function RecentDebits
             * @type ?number
             */
            RecentDebits: {
                get: function () {
                    if (System.String.isNullOrWhiteSpace(this.Account.Values.getItem$1("CALC-DEBITS"))) {
                        return System.Decimal.lift(null);
                    }
                    return this.Account.Values.Get(System.Decimal, "CALC-DEBITS");
                },
                set: function (value) {
                    if (System.Nullable.liftne("ne", value, System.Decimal.lift(null))) {
                        this.Account.Values.Set$1(System.Decimal, "CALC-DEBITS", System.Nullable.getValue(value));
                    } else {
                        this.Account.Values.RemoveAll("CALC-DEBITS");
                    }
                }
            },
            /**
             * MIN(1, (BASIC-YEARLY-ALLOWANCE + RECENT-CREDITS) / ( RECENT-DEBITS + BASIC-YEARLY-ALLOWANCE * 2 )) * 100
             *
             * @instance
             * @public
             * @memberof CM.Schema.AccountCalculations
             * @function RecentReputation
             * @type ?number
             */
            RecentReputation: {
                get: function () {
                    if (System.String.isNullOrWhiteSpace(this.Account.Values.getItem$1("CALC-REP"))) {
                        return System.Decimal.lift(null);
                    }
                    return this.Account.Values.Get(System.Decimal, "CALC-REP");
                },
                set: function (value) {
                    if (System.Nullable.liftne("ne", value, System.Decimal.lift(null))) {
                        this.Account.Values.Set$1(System.Decimal, "CALC-REP", System.Nullable.getValue(value));
                    } else {
                        this.Account.Values.RemoveAll("CALC-REP");
                    }
                }
            },
            /**
             * True if the account has at least 1 transaction every month 
             for the last 12 months with multiple parties. This is to deter automated vote stuffing.
             *
             * @instance
             * @public
             * @memberof CM.Schema.AccountCalculations
             * @function IsEligibleForVoting
             * @type boolean
             */
            IsEligibleForVoting: {
                get: function () {
                    return this.Account.Values.Get(System.Boolean, "CAN-VOTE");
                },
                set: function (value) {
                    this.Account.Values.Set$1(System.Boolean, "CAN-VOTE", value);
                }
            }
        },
        ctors: {
            ctor: function (account) {
                this.$initialize();
                if (account == null) {
                    throw new System.ArgumentNullException("account");
                }
                this.Account = account;
            }
        }
    });

    Bridge.define("CM.Schema.DataSignRequest", {
        fields: {
            Transforms: null,
            Password: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Transforms = new (System.Collections.Generic.List$1(CM.Schema.DataSignRequest.Transform))();
            },
            $ctor1: function (input) {
                CM.Schema.DataSignRequest.ctor.call(this);
                this.Transforms.add(new CM.Schema.DataSignRequest.Transform(input));
            }
        }
    });

    Bridge.define("CM.Schema.DataSignRequest.Transform", {
        fields: {
            Input: null,
            Output: null
        },
        ctors: {
            ctor: function (input) {
                this.$initialize();
                this.Input = input;
            }
        }
    });

    Bridge.define("CM.Schema.DataVerifyRequest", {
        fields: {
            DataDateUtc: null,
            Input: null,
            Signature: null
        },
        ctors: {
            init: function () {
                this.DataDateUtc = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("CM.Schema.PasswordRequest", {
        fields: {
            NewPass: null,
            OldPass: null
        }
    });

    Bridge.define("CM.Schema.PayeeStatus", {
        $kind: "enum",
        statics: {
            fields: {
                NotSet: 0,
                Accept: 1,
                Decline: 2,
                Refund: 3
            }
        },
        $utype: System.Byte
    });

    Bridge.define("CM.Schema.PayerStatus", {
        $kind: "enum",
        statics: {
            fields: {
                NotSet: 0,
                Accept: 1,
                Dispute: 2,
                Cancel: 3
            }
        },
        $utype: System.Byte
    });

    Bridge.define("CM.Schema.PrivateKey", {
        statics: {
            methods: {
                /**
                 * Attempts to parse a PublicPrivateKey out of the specified PRI-KEY line '{scheme-id},{salt},{encrypted}'
                 *
                 * @static
                 * @public
                 * @this CM.Schema.PrivateKey
                 * @memberof CM.Schema.PrivateKey
                 * @param   {string}                  delimitedData    {scheme-id},{salt},{encrypted}
                 * @param   {CM.Schema.PrivateKey}    key              Pointer to receive the parsed key.
                 * @return  {boolean}                                  True if parsing succeeds, otherwise false.
                 */
                TryParse: function (delimitedData, key) {
                    var $t;
                    key.v = null;
                    if (System.String.isNullOrWhiteSpace(delimitedData)) {
                        return false;
                    }
                    var cursor = { v : 0 };
                    var scheme = CM.Extensions.NextCsvValue(delimitedData, cursor);
                    var salt = CM.Extensions.NextCsvValue(delimitedData, cursor);
                    var priv = CM.Extensions.NextCsvValue(delimitedData, cursor);
                    var privBytes = System.Convert.fromBase64String(priv);
                    var saltBytes = System.Convert.fromBase64String(salt);
                    var schemeID = { };
                    if (!System.UInt32.tryParse(scheme, schemeID)) {
                        return false;
                    }
                    key.v = ($t = new CM.Schema.PrivateKey(), $t.Encrypted = privBytes, $t.Salt = saltBytes, $t.SchemeID = (schemeID.v | 0), $t);
                    return true;
                }
            }
        },
        fields: {
            SchemeID: 0,
            Salt: null,
            Encrypted: null
        },
        methods: {
            /**
             * Returns a CM Message formatted PRI-KEY representation - {scheme-id},{salt},{encrypted}
             *
             * @instance
             * @public
             * @override
             * @this CM.Schema.PrivateKey
             * @memberof CM.Schema.PrivateKey
             * @return  {string}
             */
            toString: function () {
                return System.String.concat(this.SchemeID + ",", System.Convert.toBase64String(this.Salt || System.Array.init(0, 0, System.Byte), null, null, null), ",", System.Convert.toBase64String(this.Encrypted || System.Array.init(0, 0, System.Byte), null, null, null));
            }
        }
    });

    Bridge.define("CM.Schema.PrivateKeySchemeID", {
        $kind: "enum",
        statics: {
            fields: {
                AES_CBC_PKCS7_RFC2898_HMACSHA1_10000: 0
            }
        }
    });

    /**
     * Describes a public/private key and its corresponding effective date.
     *
     * @public
     * @class CM.Schema.PublicKey
     * @implements  System.IComparable$1
     */
    Bridge.define("CM.Schema.PublicKey", {
        inherits: function () { return [System.IComparable$1(CM.Schema.PublicKey)]; },
        statics: {
            methods: {
                /**
                 * Attempts to parse a PublicPrivateKey out of the specified KEY line '- {date},{public key},{modification signature}'
                 *
                 * @static
                 * @public
                 * @this CM.Schema.PublicKey
                 * @memberof CM.Schema.PublicKey
                 * @param   {string}                 delimitedData    {date},{public key},{modification signature}
                 * @param   {CM.Schema.PublicKey}    key              Pointer to receive the parsed key.
                 * @return  {boolean}                                 True if parsing succeeds, otherwise false.
                 */
                TryParse: function (delimitedData, key) {
                    var $t;
                    key.v = null;
                    if (System.String.isNullOrWhiteSpace(delimitedData)) {
                        return false;
                    }
                    var cursor = { v : 0 };
                    var date = CM.Extensions.NextCsvValue(delimitedData, cursor);
                    var pub = CM.Extensions.NextCsvValue(delimitedData, cursor);
                    var mod = CM.Extensions.NextCsvValue(delimitedData, cursor);
                    var d = { };
                    if (!CM.Helpers.DateFromISO8601(date, d)) {
                        return false;
                    }
                    try {
                        var pubBytes = System.Convert.fromBase64String(pub);
                        var modBytes = System.Convert.fromBase64String(mod);
                        key.v = ($t = new CM.Schema.PublicKey(), $t.EffectiveDate = d.v, $t.Key = pubBytes, $t.ModificationSignature = modBytes, $t);
                        return true;
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        // Bad data
                        return false;
                    }
                }
            }
        },
        fields: {
            /**
             * The date when this key has taken effect. Must be less than or equal to the Account's UPDATED-UTC.
             *
             * @instance
             * @public
             * @memberof CM.Schema.PublicKey
             * @type System.DateTime
             */
            EffectiveDate: null,
            /**
             * The public key for use with RSA signature validation.
             *
             * @instance
             * @public
             * @memberof CM.Schema.PublicKey
             * @type Array.<number>
             */
            Key: null,
            /**
             * During account password change, this is the signature of NEW Public Key + EffectiveDate using the PREVIOUS Private Key.
             Basically proof of ownership during a password change. Peers are going to make sure that PREVIOUS PublicKey works
             against the NEW Key + EffectiveDate.
             *
             * @instance
             * @public
             * @memberof CM.Schema.PublicKey
             * @type Array.<number>
             */
            ModificationSignature: null
        },
        alias: ["compareTo", ["System$IComparable$1$CM$Schema$PublicKey$compareTo", "System$IComparable$1$compareTo"]],
        ctors: {
            init: function () {
                this.EffectiveDate = System.DateTime.getDefaultValue();
            }
        },
        methods: {
            /**
             * Compares based on EffectiveDate ascending.
             *
             * @instance
             * @public
             * @this CM.Schema.PublicKey
             * @memberof CM.Schema.PublicKey
             * @param   {CM.Schema.PublicKey}    other
             * @return  {number}
             */
            compareTo: function (other) {
                return Bridge.compare(this.EffectiveDate, other.EffectiveDate);
            },
            /**
             * Gets the data to sign when appending a new public key. It must be signed using
             the PREVIOUS private key.
             *
             * @instance
             * @public
             * @this CM.Schema.PublicKey
             * @memberof CM.Schema.PublicKey
             * @return  {Array.<number>}
             */
            GetModificationSigningData: function () {
                var ar = new (System.Collections.Generic.List$1(System.Byte))();
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(CM.Helpers.DateToISO8601(this.EffectiveDate)));
                ar.addRange(this.Key);
                return ar.toArray();
            },
            /**
             * Returns a CM Message formatted PUBKEY representation - {date},{public key},{modification signature}
             *
             * @instance
             * @public
             * @override
             * @this CM.Schema.PublicKey
             * @memberof CM.Schema.PublicKey
             * @return  {string}
             */
            toString: function () {
                return System.String.concat(CM.Helpers.DateToISO8601(this.EffectiveDate), ",", System.Convert.toBase64String(this.Key || System.Array.init(0, 0, System.Byte), null, null, null), ",", System.Convert.toBase64String(this.ModificationSignature || System.Array.init(0, 0, System.Byte), null, null, null));
            }
        }
    });

    /**
     * A TransactionIndex is the single-line data returned during a LIST query. As well, each DHT
     peer keeps these in each payee/payer/region container which allows for faster queries.
     *
     * @public
     * @class CM.Schema.TransactionIndex
     */
    Bridge.define("CM.Schema.TransactionIndex", {
        fields: {
            Amount: System.Decimal(0.0),
            CreatedUtc: null,
            ID: null,
            Payee: null,
            PayeeRegion: null,
            PayeeStatus: 0,
            Payer: null,
            PayerRegion: null,
            PayerStatus: 0,
            UpdatedUtc: null
        },
        ctors: {
            init: function () {
                this.CreatedUtc = System.DateTime.getDefaultValue();
                this.UpdatedUtc = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (t) {
                this.$initialize();
                this.ID = t.ID;
                this.CreatedUtc = t.CreatedUtc;
                this.UpdatedUtc = t.UpdatedUtc;
                this.Payee = t.PayeeID;
                this.Payer = t.PayerID;
                this.Amount = t.Amount;
                this.PayerStatus = t.PayerStatus;
                this.PayeeStatus = t.PayeeStatus;
                this.PayerRegion = t.PayerRegion;
                this.PayeeRegion = t.PayeeRegion;
            },
            $ctor2: function (data) {
                this.$initialize();
                this.Parse(data);
            }
        },
        methods: {
            Parse: function (data) {
                var ar = System.String.split(data, [32].map(function(i) {{ return String.fromCharCode(i); }}));
                this.CreatedUtc = CM.Helpers.DateFromISO8601$1(ar[System.Array.index(0, ar)]);
                this.Payee = ar[System.Array.index(1, ar)];
                this.Payer = ar[System.Array.index(2, ar)];
                this.ID = System.String.concat(ar[System.Array.index(0, ar)], " ", ar[System.Array.index(1, ar)], " ", ar[System.Array.index(2, ar)]);
                this.Amount = System.Decimal(ar[System.Array.index(3, ar)]);
                this.UpdatedUtc = CM.Helpers.DateFromISO8601$1(ar[System.Array.index(4, ar)]);
                this.PayeeStatus = (System.Int32.parse(ar[System.Array.index(5, ar)])) & 255;
                this.PayerStatus = (System.Int32.parse(ar[System.Array.index(6, ar)])) & 255;
                this.PayeeRegion = ar[System.Array.index(7, ar)];
                this.PayerRegion = ar[System.Array.index(8, ar)];
            },
            /**
             * The format of a TransactionIndex string is:
             {ID} + " " + {Amount} + " " + {Updated Utc} + " " + {Payee Status Byte}
             + " " + {Payer Status Byte} + " " + {Payee Region} + " " + {Payer Region}
             *
             * @instance
             * @public
             * @override
             * @this CM.Schema.TransactionIndex
             * @memberof CM.Schema.TransactionIndex
             * @return  {string}
             */
            toString: function () {
                return System.String.concat(CM.Helpers.DateToISO8601(this.CreatedUtc), " ", this.Payee, " ", this.Payer, " ", this.Amount, " ", CM.Helpers.DateToISO8601(this.UpdatedUtc), " ", this.PayeeStatus, " ", this.PayerStatus, " ", this.PayeeRegion, " ", this.PayerRegion);
            }
        }
    });

    /**
     * A VoteIndex is the single-line data returned during a LIST query. As well, each DHT
     peer keeps these in account containers, which allows for faster queries.
     *
     * @public
     * @class CM.Schema.VoteIndex
     */
    Bridge.define("CM.Schema.VoteIndex", {
        fields: {
            PropositionID: 0,
            VoterID: null,
            Value: false,
            CreatedUtc: null,
            UpdatedUtc: null
        },
        ctors: {
            init: function () {
                this.CreatedUtc = System.DateTime.getDefaultValue();
                this.UpdatedUtc = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (v) {
                this.$initialize();
                this.PropositionID = v.PropositionID;
                this.VoterID = v.VoterID;
                this.Value = v.Value;
                this.CreatedUtc = v.CreatedUtc;
                this.UpdatedUtc = v.UpdatedUtc;

            },
            $ctor2: function (data) {
                this.$initialize();
                this.Parse(data);
            }
        },
        methods: {
            Parse: function (data) {
                var ar = System.String.split(data, [32].map(function(i) {{ return String.fromCharCode(i); }}));
                this.PropositionID = System.UInt32.parse(ar[System.Array.index(0, ar)]);
                this.VoterID = ar[System.Array.index(1, ar)];
                this.Value = Bridge.referenceEquals(ar[System.Array.index(2, ar)], "1");
                this.CreatedUtc = CM.Helpers.DateFromISO8601$1(ar[System.Array.index(3, ar)]);
                this.UpdatedUtc = CM.Helpers.DateFromISO8601$1(ar[System.Array.index(4, ar)]);
            },
            /**
             * The format of a VoteIndex string is:
             {PropositionID} + " " + {VoterID} + " " + {Value} + " " + {CreatedUtc} + " " + {UpdatedUtc}
             *
             * @instance
             * @public
             * @override
             * @this CM.Schema.VoteIndex
             * @memberof CM.Schema.VoteIndex
             * @return  {string}
             */
            toString: function () {
                return System.String.concat(this.PropositionID + " ", this.VoterID, " ", (this.Value ? "1" : "0"), " ", CM.Helpers.DateToISO8601(this.CreatedUtc), " ", CM.Helpers.DateToISO8601(this.UpdatedUtc));
            }
        }
    });

    /**
     * VotingPropositions are defined in code and served by the authoritative domain servers
     who also generate reports and validate people's votes stored across the network.
     *
     * @public
     * @class CM.Schema.VotingProposition
     */
    Bridge.define("CM.Schema.VotingProposition", {
        fields: {
            /**
             * A unique identifier for the proposition.
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition
             * @type number
             */
            ID: 0,
            /**
             * The date and time that this proposition was issued
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition
             * @type System.DateTime
             */
            CreatedUtc: null,
            /**
             * The date and time by which votes will not be counted.
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition
             * @type System.DateTime
             */
            CloseUtc: null,
            /**
             * The current vote tally for the proposition.
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition
             * @type number
             */
            For: 0,
            /**
             * The current vote tally against the proposition.
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition
             * @type number
             */
            Against: 0,
            /**
             * The number of voters who did not meet the minimum requirements for voting.
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition
             * @type number
             */
            Ineligible: 0,
            /**
             * An array of all available transactions. It will be important to fully define the
             implications of propositions in all supported UI languages.
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition
             * @type Array.<CM.Schema.VotingProposition.TranslatedDetails>
             */
            Translations: null
        },
        ctors: {
            init: function () {
                this.CreatedUtc = System.DateTime.getDefaultValue();
                this.CloseUtc = System.DateTime.getDefaultValue();
            }
        }
    });

    /**
     * Proposition details for each supported UI language code.
     *
     * @public
     * @class CM.Schema.VotingProposition.TranslatedDetails
     */
    Bridge.define("CM.Schema.VotingProposition.TranslatedDetails", {
        fields: {
            /**
             * e.g. EN-GB
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition.TranslatedDetails
             * @type string
             */
            Code: null,
            /**
             * The title for the proposition
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition.TranslatedDetails
             * @type string
             */
            Title: null,
            /**
             * A brief description of the proposal
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition.TranslatedDetails
             * @type string
             */
            Description: null,
            /**
             * The list of known potential negative impacts
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition.TranslatedDetails
             * @type string
             */
            NegativeImpacts: null,
            /**
             * The list of known potential positive impacts
             *
             * @instance
             * @public
             * @memberof CM.Schema.VotingProposition.TranslatedDetails
             * @type string
             */
            PositiveImpacts: null
        }
    });

    Bridge.define("System.Text.Encoding");

    Bridge.define("System.Text.Encoding.UTF8", {
        statics: {
            methods: {
                GetByteCount: function (s) {
                    return System.Text.Encoding.UTF8.GetBytes(s).length;
                },
                GetBytes: function (s) {
                    var arr = System.Array.init(0, 0, System.Byte);
                    
        var utf8 = unescape(encodeURIComponent(s));
        for (var i = 0; i < utf8.length; i++) {
            arr.push(utf8.charCodeAt(i));
        }
;

                    return arr;
                },
                GetPreamble: function () {
                    return System.Array.init([239, 187, 191], System.Byte);
                },
                GetString: function (b, offset, count) {
                    if (b == null || b.length === 0 || count === 0) {
                        return null;
                    }
                    if (b.length < ((offset + count) | 0)) {
                        throw new System.ArgumentOutOfRangeException();
                    }
                    var s = new System.Text.StringBuilder();
                    for (var i = offset; i < ((offset + count) | 0); i = (i + 1) | 0) {
                        switch (b[System.Array.index(i, b)] >> 4) {
                            case 0: 
                            case 1: 
                            case 2: 
                            case 3: 
                            case 4: 
                            case 5: 
                            case 6: 
                            case 7: 
                                s.append(String.fromCharCode(b[System.Array.index(i, b)]));
                                break;
                            case 12: 
                            case 13: 
                                s.append(String.fromCharCode((b[System.Array.index(i, b)] & 31) << 6 | b[System.Array.index(((i + 1) | 0), b)] & 63));
                                i = (i + 1) | 0;
                                break;
                            case 14: 
                                s.append(String.fromCharCode((b[System.Array.index(i, b)] & 15) << 12 | b[System.Array.index(((i + 1) | 0), b)] & 4032 | b[System.Array.index(((i + 2) | 0), b)] & 63));
                                i = (i + 2) | 0;
                                break;
                        }
                    }
                    return s.toString();
                }
            }
        }
    });

    /**
     * Async/await/Task in Bridge.NET is sketchy, so to keep
     everything portable, we'll use this pattern for any potentially
     asynchronous code.
     *
     * @public
     * @class CM.AsyncRequest$1
     * @implements  CM.IAsyncRequest
     */
    Bridge.define("CM.AsyncRequest$1", function (T) { return {
        inherits: [CM.IAsyncRequest],
        props: {
            IsCancelled: false,
            /**
             * Set by the caller and used by the callee to return data.
             *
             * @instance
             * @public
             * @memberof CM.AsyncRequest$1
             * @function Item
             * @type T
             */
            Item: Bridge.getDefaultValue(T),
            /**
             * Raised by the callee upon completion, potentially from a worker thread.
             *
             * @instance
             * @public
             * @memberof CM.AsyncRequest$1
             * @function OnComplete
             * @type System.Action
             */
            OnComplete: null,
            /**
             * Raised by calling UpdateProgress. Client can subscribe to this to get progress feedback.
             *
             * @instance
             * @public
             * @memberof CM.AsyncRequest$1
             * @function OnProgress
             * @type System.Action
             */
            OnProgress: null,
            /**
             * Gets or sets the progress as a percentage.
             *
             * @instance
             * @public
             * @memberof CM.AsyncRequest$1
             * @function ProgressPercent
             * @type number
             */
            ProgressPercent: 0,
            /**
             * Set by the callee.
             *
             * @instance
             * @public
             * @memberof CM.AsyncRequest$1
             * @function Result
             * @type CM.CMResult
             */
            Result: null
        },
        alias: [
            "IsCancelled", "CM$IAsyncRequest$IsCancelled",
            "ProgressPercent", "CM$IAsyncRequest$ProgressPercent",
            "Result", "CM$IAsyncRequest$Result",
            "Completed", "CM$IAsyncRequest$Completed"
        ],
        ctors: {
            init: function () {
                this.Result = new CM.CMResult();
            }
        },
        methods: {
            Completed: function (res) {
                this.Result = res.$clone();
                if (!Bridge.staticEquals(this.OnComplete, null)) {
                    this.OnComplete(this);
                }
            },
            UpdateProgress: function (percent) {
                this.ProgressPercent = percent;
                if (!Bridge.staticEquals(this.OnProgress, null)) {
                    this.OnProgress(this);
                }
            }
        }
    }; });

    /**
     * The /about page is intended to provide a high-level overview of the Civil Money system for
     new visitors.
     *
     * @class CM.Javascript.AboutPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.AboutPage", {
        inherits: [CM.Javascript.Page],
        props: {
            Title: {
                get: function () {
                    return CM.Javascript.SR.TITLE_ABOUT;
                }
            },
            Url: {
                get: function () {
                    return "/about";
                }
            }
        },
        methods: {
            Build: function () {
                this.Element.className = "presentationpage";
                CM.BridgeHacks.Div(this.Element, "", CM.Javascript.SR.HTML_ABOUT);
                var noAccount = CM.BridgeHacks.Div(this.Element, "noaccountfooter");
                CM.BridgeHacks.Div(noAccount, null, CM.Javascript.SR.HTML_CIVIL_MONEY_PROVIDES);
                var buttons = CM.BridgeHacks.Div(noAccount, "buttons");
                CM.BridgeHacks.Button$1(buttons, CM.Javascript.SR.LABEL_CREATE_MY_ACCOUNT, "/register", "blue-button");

            }
        }
    });

    /**
     * Page for editing an account. Provides basic functionality for editing all CM.Account fields
     and committing a newly signed account update to the network.
     *
     * @class CM.Javascript.AccountEditPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.AccountEditPage", {
        inherits: [CM.Javascript.Page],
        fields: {
            _Form: null,
            _ID: null,
            _MainFeedback: null,
            _Notifications: null,
            _ReturnButtons: null,
            _ServerStatus: null,
            _Skills: null,
            Account: null
        },
        props: {
            Title: {
                get: function () {
                    return this._ID;
                }
            },
            Url: {
                get: function () {
                    return System.String.concat("/", this._ID, "/edit");
                }
            }
        },
        ctors: {
            ctor: function (id) {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                this._ID = id;
                this._Skills = new (System.Collections.Generic.List$1(CM.Javascript.AccountEditPage.SkillEditor))();
                this._Notifications = new (System.Collections.Generic.List$1(CM.Javascript.AccountEditPage.NotifyEditor))();
            }
        },
        methods: {
            Build: function () {
                var $t;
                this.Element.className = "accounteditpage";
                CM.BridgeHacks.H1(this.Element, CM.Javascript.SR.TITLE_ACCOUNT_SETTINGS);

                this._MainFeedback = new CM.Javascript.Feedback(this.Element, true);
                this._ReturnButtons = CM.BridgeHacks.Div(this.Element);
                this._ServerStatus = CM.BridgeHacks.Div(this.Element, "statusvisual");
                this._Form = CM.BridgeHacks.Div(this.Element);
                this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);

                var search = ($t = new (CM.AsyncRequest$1(CM.Javascript.FindAccountRequest))(), $t.Item = new CM.Javascript.FindAccountRequest(this._ID), $t);

                search.OnComplete = Bridge.fn.bind(this, function (sender) {
                    var req = sender;

                    if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                        var a = req.Item.Output.Cast(CM.Schema.Account);
                        this.Account = a;
                        this.BuildForm();
                        this._MainFeedback.Hide();
                    } else if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.E_Item_Not_Found.$clone())) {
                        this._MainFeedback.Set$1(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, System.String.format(CM.Javascript.SR.LABEL_STATUS_ACCOUNT_NOT_FOUND, CM.Javascript.Page.HtmlEncode(this._ID)), CM.Javascript.SR.LABEL_RETRY, Bridge.fn.bind(this, function () {
                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);

                            CM.Javascript.App.Identity.Client.TryFindAccount(search);
                        }));
                    } else {
                        // Some other error, network probably
                        this._MainFeedback.Set$1(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_PROBLEM_REACHING_A_SERVER, " ", CM.BridgeHacks.GetLocalisedDescription(req.Result)), CM.Javascript.SR.LABEL_RETRY, Bridge.fn.bind(this, function () {
                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);

                            CM.Javascript.App.Identity.Client.TryFindAccount(search);
                        }));
                    }
                });

                CM.Javascript.App.Identity.Client.TryFindAccount(search);
            },
            BuildForm: function () {
                var $t, $t1, $t2;
                CM.BridgeHacks.Div(this._Form, "hint", CM.Javascript.SR.LABEL_ACCOUNT_SETTINGS_INTRO);
                CM.BridgeHacks.H3(this._Form, CM.Javascript.SR.LABEL_REGION);

                var country = CM.BridgeHacks.Select(this._Form);
                var region = CM.BridgeHacks.Select(this._Form);
                var _RegionFeedback = new CM.Javascript.Feedback(this._Form);

                country.appendChild(($t = document.createElement('option'), $t.value = "", $t.innerHTML = System.String.concat("(", CM.Javascript.SR.LABEL_PLEASE_SELECT, ")"), $t));
                var lastCountry = null;
                $t = Bridge.getEnumerator(CM.ISO31662.Values);
                try {
                    while ($t.moveNext()) {
                        var kp = $t.Current.$clone();
                        var s = ($t1 = System.String.split(kp.Name, [47].map(function(i) {{ return String.fromCharCode(i); }})))[System.Array.index(0, $t1)];
                        if (!Bridge.referenceEquals(lastCountry, s)) {
                            lastCountry = s;
                            country.appendChild(($t2 = document.createElement('option'), $t2.value = s, $t2.innerHTML = s, $t2));
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                country.onchange = Bridge.fn.combine(country.onchange, function (e) {
                    var $t3, $t4, $t5;
                    CM.BridgeHacks.Clear(region);
                    if (country.value.length > 0) {
                        region.style.display = "block";
                        var s1 = System.String.concat(country.value, "/");
                        $t3 = Bridge.getEnumerator(CM.ISO31662.Values);
                        try {
                            while ($t3.moveNext()) {
                                var kp1 = $t3.Current.$clone();
                                if (System.String.startsWith(kp1.Name, s1)) {
                                    var reg = ($t4 = System.String.split(kp1.Name, [47].map(function(i) {{ return String.fromCharCode(i); }})))[System.Array.index(1, $t4)];
                                    region.appendChild(($t5 = document.createElement('option'), $t5.value = kp1.ID, $t5.innerHTML = reg, $t5));
                                }
                            }
                        } finally {
                            if (Bridge.is($t3, System.IDisposable)) {
                                $t3.System$IDisposable$dispose();
                            }
                        }} else {
                        region.style.display = "none";
                    }
                });

                region.onchange = Bridge.fn.combine(region.onchange, function (e) {
                    if (CM.ISO31662.GetName(region.value) != null) {
                        _RegionFeedback.Hide();
                    }
                });
                country.value = ($t2 = System.String.split(CM.ISO31662.GetName(this.Account.Iso31662Region), [47].map(function(i) {{ return String.fromCharCode(i); }})))[System.Array.index(0, $t2)];
                country.onchange(null);
                region.value = this.Account.Iso31662Region;

                var atts = this.Account.CollectAttributes();
                CM.BridgeHacks.H3(this._Form, CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY);
                CM.BridgeHacks.Div(this._Form, "hint", CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_INTRO);
                var rdoName = "income";
                var rdoWorking = CM.BridgeHacks.RadioButton(CM.BridgeHacks.Div(this._Form, "radio"), rdoName, CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_WORKING);
                var rdoLooking = CM.BridgeHacks.RadioButton(CM.BridgeHacks.Div(this._Form, "radio"), rdoName, CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_LOOKING_FOR_WORK);
                var rdoHealthProblem = CM.BridgeHacks.RadioButton(CM.BridgeHacks.Div(this._Form, "radio"), rdoName, CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_HEALTH_PROBLEM);
                var rdoRetired = CM.BridgeHacks.RadioButton(CM.BridgeHacks.Div(this._Form, "radio"), rdoName, CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_RETIRED);
                var rdoNotSet = CM.BridgeHacks.RadioButton(CM.BridgeHacks.Div(this._Form, "radio"), rdoName, CM.Javascript.SR.LABEL_VALUE_NOT_SET);

                switch (atts.getItem$1(CM.Schema.AccountAttributes.IncomeEligibility_Key)) {
                    default: 
                        rdoNotSet.checked = true;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_Working: 
                        rdoWorking.checked = true;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_LookingForWork: 
                        rdoLooking.checked = true;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_HealthProblem: 
                        rdoHealthProblem.checked = true;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_Retired: 
                        rdoRetired.checked = true;
                        break;
                }

                CM.BridgeHacks.H3(this._Form, CM.Javascript.SR.LABEL_SKILLS_AND_SERVICES);
                CM.BridgeHacks.Div(this._Form, "hint", CM.Javascript.SR.LABEL_SKILLS_AND_SERVICES_INTRO);
                var skillHolder = CM.BridgeHacks.Div(this._Form);
                for (var i = 0; i < atts.Count; i = (i + 1) | 0) {
                    var a = atts.getItem(i);
                    if (Bridge.referenceEquals(a.Name, CM.Schema.AccountAttributes.SkillOrService_Key) && !System.String.isNullOrEmpty(a.Value)) {
                        this._Skills.add(new CM.Javascript.AccountEditPage.SkillEditor(skillHolder, new CM.Schema.AccountAttributes.SkillCsv.$ctor1(a.Value)));
                    }
                }
                CM.BridgeHacks.Button(CM.BridgeHacks.Div(this._Form, "button-row"), CM.Javascript.SR.LABEL_ADD_ANOTHER_ITEM, Bridge.fn.bind(this, function (e) {
                    this._Skills.add(new CM.Javascript.AccountEditPage.SkillEditor(skillHolder, new CM.Schema.AccountAttributes.SkillCsv.ctor()));
                }));
                if (this._Skills.Count === 0) {
                    this._Skills.add(new CM.Javascript.AccountEditPage.SkillEditor(skillHolder, new CM.Schema.AccountAttributes.SkillCsv.ctor()));
                }

                CM.BridgeHacks.H3(this._Form, CM.Javascript.SR.LABEL_PUSH_NOTIFICATIONS);
                CM.BridgeHacks.Div(this._Form, "hint", CM.Javascript.SR.LABEL_PUSH_NOTIFICATIONS_INTRO);
                var notifyHolder = CM.BridgeHacks.Div(this._Form);
                for (var i1 = 0; i1 < atts.Count; i1 = (i1 + 1) | 0) {
                    var a1 = atts.getItem(i1);
                    if (Bridge.referenceEquals(a1.Name, CM.Schema.AccountAttributes.PushNotification_Key) && !System.String.isNullOrEmpty(a1.Value)) {
                        this._Notifications.add(new CM.Javascript.AccountEditPage.NotifyEditor(notifyHolder, new CM.Schema.AccountAttributes.PushNotificationCsv.$ctor1(a1.Value)));
                    }
                }
                CM.BridgeHacks.Button(CM.BridgeHacks.Div(this._Form, "button-row"), CM.Javascript.SR.LABEL_ADD_ANOTHER_ITEM, Bridge.fn.bind(this, function (e) {
                    this._Notifications.add(new CM.Javascript.AccountEditPage.NotifyEditor(notifyHolder, new CM.Schema.AccountAttributes.PushNotificationCsv.ctor()));
                }));
                if (this._Notifications.Count === 0) {
                    this._Notifications.add(new CM.Javascript.AccountEditPage.NotifyEditor(notifyHolder, new CM.Schema.AccountAttributes.PushNotificationCsv.ctor()));
                }

                var changePass = CM.BridgeHacks.CheckBox(CM.BridgeHacks.Div(this._Form, "changepass"), CM.Javascript.SR.LABEL_CHANGE_MY_PASS_PHRASE);
                var newPassFields = CM.BridgeHacks.Div(this._Form);
                newPassFields.style.display = "none";
                changePass.onchange = function (e) {
                    newPassFields.style.display = changePass.checked ? "block" : "none";
                };
                var pass1 = CM.BridgeHacks.Password(newPassFields);
                CM.BridgeHacks.H3(newPassFields, CM.Javascript.SR.LABEL_REENTER_PASS_PHRASE);
                var pass2 = CM.BridgeHacks.Password(newPassFields);
                var pass2Feedback = new CM.Javascript.Feedback(newPassFields);

                // _Form.H3(SR.LABEL_SECURITY);
                var reminder = CM.BridgeHacks.Div(this._Form, "reminder", CM.Javascript.SR.LABEL_CIVIL_MONEY_SECURITY_REMINDER);
                var confirm = CM.BridgeHacks.Div(this._Form, "confirm");
                var ch = CM.BridgeHacks.CheckBox(confirm, CM.Javascript.SR.HTML_IVE_CHECKED_MY_WEB_BROWSER_ADDRESS);


                var passAndSubmit = CM.BridgeHacks.Div(this._Form, "row");
                passAndSubmit.style.display = "none";
                CM.BridgeHacks.H3(passAndSubmit, CM.Javascript.SR.LABEL_SECRET_PASS_PHRASE);
                var pass = CM.BridgeHacks.Password(passAndSubmit);
                var buttonsRow = CM.BridgeHacks.Div(this._Form, "button-row");
                var submit = CM.BridgeHacks.Button(buttonsRow, CM.Javascript.SR.LABEL_CONTINUE, Bridge.fn.bind(this, function (e) {
                    var $t3, $t4;
                    // validate

                    if (CM.ISO31662.GetName(region.value) == null) {
                        _RegionFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_PLEASE_SELECT_YOUR_REGION);
                        return;
                    }
                    if (changePass.checked) {
                        if (!Bridge.referenceEquals(pass1.value, pass2.value)) {
                            pass2Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_PASSWORD_REENTRY_MISMATCH);
                            return;
                        }
                    }
                    pass2Feedback.Hide();


                    atts.setItem$1(CM.Schema.AccountAttributes.IncomeEligibility_Key, rdoWorking.checked ? CM.Schema.AccountAttributes.IncomeEligibility_Working : rdoLooking.checked ? CM.Schema.AccountAttributes.IncomeEligibility_LookingForWork : rdoHealthProblem.checked ? CM.Schema.AccountAttributes.IncomeEligibility_HealthProblem : rdoRetired.checked ? CM.Schema.AccountAttributes.IncomeEligibility_Retired : "");

                    for (var i2 = 0; i2 < atts.Count; i2 = (i2 + 1) | 0) {
                        if (Bridge.referenceEquals(atts.getItem(i2).Name, CM.Schema.AccountAttributes.SkillOrService_Key) || Bridge.referenceEquals(atts.getItem(i2).Name, CM.Schema.AccountAttributes.PushNotification_Key)) {
                            atts.RemoveAt(Bridge.identity(i2, (i2 = (i2 - 1) | 0)));
                        }
                    }

                    for (var i3 = 0; i3 < this._Skills.Count; i3 = (i3 + 1) | 0) {
                        if (!System.String.isNullOrWhiteSpace(this._Skills.getItem(i3).Value.Value)) {
                            atts.Append$2(CM.Schema.AccountAttributes.SkillOrService_Key, this._Skills.getItem(i3).Value.toString());
                        }
                    }

                    for (var i4 = 0; i4 < this._Notifications.Count; i4 = (i4 + 1) | 0) {
                        if (!System.String.isNullOrWhiteSpace(this._Notifications.getItem(i4).Value.HttpUrl)) {
                            atts.Append$2(CM.Schema.AccountAttributes.PushNotification_Key, this._Notifications.getItem(i4).Value.toString());
                        }
                    }

                    // Just in case the commit doesn't work, we want to use
                    // a COPY of the account data here for signing, otherwise
                    // we can end up appending a whole bunch of key changes.
                    var newAccount = new CM.Schema.Account.$ctor1(this.Account.ToContentString());
                    newAccount.Iso31662Region = region.value;
                    newAccount.ReplaceAttributes(atts);
                    newAccount.UpdatedUtc = System.DateTime.getUtcNow();

                    this._Form.style.display = "none";
                    buttonsRow.style.display = "none";
                    CM.BridgeHacks.Clear(this._ServerStatus);
                    this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_SIGNING_INFORMATION, " ..."));

                    if (changePass.checked) {
                        // PASSWORD/PRIVATE KEY CHANGE
                        newAccount.ChangePasswordAndSign(($t3 = new (CM.AsyncRequest$1(CM.Schema.PasswordRequest))(), $t3.Item = ($t4 = new CM.Schema.PasswordRequest(), $t4.NewPass = pass1.value, $t4.OldPass = pass.value, $t4), $t3.OnProgress = Bridge.fn.bind(this, $asm.$.CM.Javascript.AccountEditPage.f1), $t3.OnComplete = Bridge.fn.bind(this, function (done) {
                            var $t5, $t6;
                            if (done.Result.Success) {
                                CM.BridgeHacks.Clear(this._ServerStatus);
                                var prog = new CM.Javascript.ServerProgressIndicator(this._ServerStatus);
                                prog.SetMainGlyph(CM.Javascript.Assets.SVG.Wait);
                                prog.Show();
                                var put = ($t5 = new (CM.AsyncRequest$1(CM.Javascript.PutRequest))(), $t5.Item = ($t6 = new CM.Javascript.PutRequest(newAccount), $t6.UI = prog, $t6), $t5.OnComplete = Bridge.fn.bind(this, function (sender) {
                                    var req = sender;
                                    req.Item.UpdateUIProgress();
                                    if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                                        this._MainFeedback.Set(CM.Javascript.Assets.SVG.CircleTick, CM.Javascript.FeedbackType.Success, CM.Javascript.SR.LABEL_STATUS_ACCOUNT_UPDATED_SUCCESSFULLY);
                                        var options = CM.BridgeHacks.Div(this._ReturnButtons, "button-row center");
                                        CM.BridgeHacks.Button$1(options, CM.Javascript.SR.LABEL_GO_TO_YOUR_ACCOUNT, System.String.concat("/", newAccount.ID));
                                        prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleTick);
                                    } else {
                                        this._MainFeedback.Set(CM.Javascript.Assets.SVG.CircleError, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, ": ", CM.BridgeHacks.GetLocalisedDescription(req.Result)));
                                        this._Form.style.display = "block";
                                        buttonsRow.style.display = "block";
                                        prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleError);
                                    }
                                }), $t5.OnProgress = $asm.$.CM.Javascript.AccountEditPage.f2, $t5);
                                CM.Javascript.App.Identity.Client.TryPut(put);
                            } else {
                                this._Form.style.display = "block";
                                buttonsRow.style.display = "block";
                                this._MainFeedback.Set(CM.Javascript.Assets.SVG.CircleError, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, ": ", CM.BridgeHacks.GetLocalisedDescription(done.Result)));
                                System.Console.WriteLine(done.Result.toString());
                            }
                        }), $t3), CM.Javascript.JSCryptoFunctions.Identity);
                    } else {
                        // BASIC RE-SIGN
                        newAccount.SignData(($t3 = new (CM.AsyncRequest$1(CM.Schema.DataSignRequest))(), $t3.Item = ($t4 = new CM.Schema.DataSignRequest.$ctor1(newAccount.GetSigningData()), $t4.Password = System.Text.Encoding.UTF8.GetBytes(pass.value), $t4), $t3.OnComplete = Bridge.fn.bind(this, function (req) {
                            var $t5, $t6;
                            if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                                newAccount.AccountSignature = req.Item.Transforms.getItem(0).Output;

                                this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK, " ..."));

                                CM.BridgeHacks.Clear(this._ServerStatus);
                                var prog = new CM.Javascript.ServerProgressIndicator(this._ServerStatus);
                                prog.SetMainGlyph(CM.Javascript.Assets.SVG.Wait);
                                prog.Show();
                                var put = ($t5 = new (CM.AsyncRequest$1(CM.Javascript.PutRequest))(), $t5.Item = ($t6 = new CM.Javascript.PutRequest(newAccount), $t6.UI = prog, $t6), $t5.OnProgress = $asm.$.CM.Javascript.AccountEditPage.f3, $t5.OnComplete = Bridge.fn.bind(this, function (putRes) {
                                    putRes.Item.UpdateUIProgress();
                                    if (CM.CMResult.op_Equality(putRes.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                                        this._MainFeedback.Set(CM.Javascript.Assets.SVG.CircleTick, CM.Javascript.FeedbackType.Success, CM.Javascript.SR.LABEL_STATUS_ACCOUNT_UPDATED_SUCCESSFULLY);
                                        var options = CM.BridgeHacks.Div(this._ReturnButtons, "button-row center");
                                        CM.BridgeHacks.Button$1(options, CM.Javascript.SR.LABEL_GO_TO_YOUR_ACCOUNT, System.String.concat("/", newAccount.ID));
                                        prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleTick);
                                    } else {
                                        this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, ": ", CM.BridgeHacks.GetLocalisedDescription(putRes.Result)));
                                        this._Form.style.display = "block";
                                        buttonsRow.style.display = "block";
                                        prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleError);
                                    }
                                }), $t5);
                                CM.Javascript.App.Identity.Client.TryPut(put);
                            } else {
                                this._Form.style.display = "block";
                                buttonsRow.style.display = "block";
                                this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_STATUS_SIGNING_FAILED);
                            }
                        }), $t3), CM.Javascript.JSCryptoFunctions.Identity);
                    }
                }), "green-button");
                submit.style.display = "none";

                CM.BridgeHacks.Button$1(buttonsRow, CM.Javascript.SR.LABEL_CANCEL, System.String.concat("/", this.Account.ID));
                ch.onchange = function (e) {
                    passAndSubmit.style.display = ch.checked ? "block" : "none";
                    submit.style.display = ch.checked ? "inline" : "none";
                    reminder.style.display = ch.checked ? "none" : "block";
                    confirm.style.display = ch.checked ? "none" : "block";
                    pass.focus();
                };
            }
        }
    });

    Bridge.ns("CM.Javascript.AccountEditPage", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.AccountEditPage, {
        f1: function (sender) {
            var res = sender;
            var msg = CM.Javascript.SR.LABEL_PLEASE_WAIT;
            switch (res.ProgressPercent) {
                case 0: 
                    msg = CM.Javascript.SR.LABEL_STATUS_GENERATING_NEW_SECRET_KEY;
                    break;
                case 25: 
                    msg = CM.Javascript.SR.LABEL_STATUS_PROCESSING_PASS_PHRASE;
                    break;
                case 50: 
                    msg = CM.Javascript.SR.LABEL_STATUS_ENCRYPTING_SECRET_KEY;
                    break;
                case 75: 
                    msg = CM.Javascript.SR.LABEL_STATUS_SIGNING_INFORMATION;
                    break;
                case 100: 
                    msg = CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK;
                    break;
            }
            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(res.ProgressPercent + "% ", msg, "..."));
        },
        f2: function (sender) {
            var req = sender;
            req.Item.UpdateUIProgress();
        },
        f3: function (sender) {
            (sender).Item.UpdateUIProgress();
        }
    });

    Bridge.define("CM.Javascript.AccountPage", {
        inherits: [CM.Javascript.Page],
        statics: {
            fields: {
                Prefetched: null
            }
        },
        fields: {
            _ID: null,
            _Feedback: null,
            _Account: null,
            _Rating: null,
            _Balance: null,
            _AccountAttributes: null,
            _MultiSelect: null,
            _TransList: null,
            _Top: null
        },
        props: {
            Title: {
                get: function () {
                    return this._ID;
                }
            },
            Url: {
                get: function () {
                    return System.String.concat("/", this._ID);
                }
            }
        },
        ctors: {
            ctor: function (id) {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                this._ID = id;

            }
        },
        methods: {
            Build: function () {
                var $t, $t1;
                //col-sm-12 col-md-8 col-md-offset-2
                this.Element.className = "accountpage";

                this._Top = CM.BridgeHacks.Div(this.Element, "top");

                var title = CM.BridgeHacks.H1(CM.BridgeHacks.Div(this._Top, "left"), CM.Javascript.Page.HtmlEncode(this._ID));
                var repBal = CM.BridgeHacks.Div(this._Top, "right");
                this._Rating = CM.BridgeHacks.Div(repBal, "rep");
                this._Balance = CM.BridgeHacks.Div(repBal, "balance");

                this._Feedback = new CM.Javascript.Feedback(this.Element);

                var prog = new CM.Javascript.ServerProgressIndicator(this.Element);
                if (!CM.Helpers.IsIDValid(this._ID)) {
                    this._Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.BridgeHacks.GetLocalisedDescription(CM.CMResult.E_Account_ID_Invalid.$clone()));

                    return;
                }
                // _Feedback.Set(SVG.Wait, FeedbackType.Default,
                //       SR.LABEL_LOADING_PLEASE_WAIT);


                if (CM.Javascript.AccountPage.Prefetched != null && System.String.equals(CM.Javascript.AccountPage.Prefetched.ID, this._ID, 5)) {
                    this._Account = CM.Javascript.AccountPage.Prefetched;
                    CM.Javascript.AccountPage.Prefetched = null;
                    this.OnAccountLoaded();
                } else {
                    prog.SetMainGlyph(CM.Javascript.Assets.SVG.Wait);
                    prog.Show();

                    var req = ($t = new (CM.AsyncRequest$1(CM.Javascript.FindAccountRequest))(), $t.Item = ($t1 = new CM.Javascript.FindAccountRequest(this._ID), $t1.UI = prog, $t1), $t);
                    req.OnComplete = Bridge.fn.bind(this, function (sender) {
                        var r = sender;
                        this._Account = r.Item.Output;

                        if (this._Account == null || !this._Account.Response.IsSuccessful) {
                            var res = r.Result.$clone();
                            if (CM.CMResult.op_Equality(res.$clone(), CM.CMResult.S_OK.$clone())) {
                                res = CM.CMResult.E_Item_Not_Found.$clone();
                            }
                            prog.SetMainGlyph(CM.Javascript.Assets.SVG.Warning);
                            this._Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.BridgeHacks.GetLocalisedDescription(res));
                            return;
                        }
                        this._ID = this._Account.ID; // Correct casing
                        title.innerHTML = CM.Javascript.Page.HtmlEncode(this._ID);

                        prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleTick);
                        prog.Remove();
                        this.OnAccountLoaded();
                    });
                    CM.Javascript.App.Identity.Client.TryFindAccount(req);
                }
            },
            OnAccountLoaded: function () {
                var $t;

                CM.Javascript.App.Identity.Client.Subscribe(this._Account.ID);

                // Make sure all ModificationSignatures are correct.
                var keys = this._Account.GetAllPublicKeys();
                var verify = ($t = new (CM.AsyncRequest$1(CM.Schema.DataVerifyRequest))(), $t.Item = new CM.Schema.DataVerifyRequest(), $t);
                for (var i = 1; i < keys.Count; i = (i + 1) | 0) {
                    verify.Item.DataDateUtc = System.DateTime.addSeconds(keys.getItem(i).EffectiveDate, -1);
                    verify.Item.Input = keys.getItem(i).GetModificationSigningData();
                    verify.Item.Signature = keys.getItem(i).ModificationSignature;
                    this._Account.VerifySignature(verify, CM.Javascript.JSCryptoFunctions.Identity);
                    if (CM.CMResult.op_Inequality(verify.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                        this._Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, "There's a problem with the account data.");
                        return;
                    }
                }

                // Check governing authority keys if required
                var gaName = CM.ISO31662.GetName(this._Account.ID);
                if (gaName != null) {
                    var check = new (CM.AsyncRequest$1(System.Boolean))();
                    this._Account.CheckIsValidGoverningAuthority(check, CM.Javascript.JSCryptoFunctions.Identity);
                    if (!check.Item) {
                        this._Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, "There's a problem with the account data.");
                        return;
                    } else {
                        CM.BridgeHacks.H2(CM.BridgeHacks.Div(this._Top, "row margins"), System.String.format("Governing authority for {0}", gaName));

                    }

                }

                if (!this._Account.ConsensusOK) {
                    this._Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, "The information on this page could not be fully corroborated. Refresh to try again.");
                } else {
                    this._Feedback.Hide();
                }

                CM.Javascript.HistoryManager.Instance.AddAccountToViewHistory(this._Account.ID);
                this._AccountAttributes = CM.BridgeHacks.Div(this.Element);
                this.RenderAccountInfo();

                var trans = CM.BridgeHacks.Div(CM.BridgeHacks.Div(this.Element, "details"), "row");
                CM.BridgeHacks.H2(trans, CM.Javascript.SR.TITLE_TRANSACTION_HISTORY);
                this._TransList = new (CM.Javascript.PagedList$1(CM.Javascript.TransactionListResult))(trans, System.String.concat("ACCNT/", this._ID, "/", CM.Constants.PATH_TRANS));
                this._TransList.OnCheckedChanged = Bridge.fn.cacheBind(this, this.OnCheckedChange);
                this._TransList.OnClick = Bridge.fn.cacheBind(this, this.OnClick);
                this._TransList.UpdateResults();
            },
            OnScroll: function (e) {
                if (this._TransList != null && this._TransList.IsScrollAtBottom) {
                    this._TransList.UpdateResults();
                }
            },
            OnAdded: function () {
                window.onscroll = Bridge.fn.cacheBind(this, this.OnScroll);

            },
            OnRemoved: function () {
                window.onscroll = null;
            },
            RefreshBalance: function () {
                var $t;
                var req = ($t = new (CM.AsyncRequest$1(CM.Javascript.FindAccountRequest))(), $t.Item = new CM.Javascript.FindAccountRequest(this._ID), $t);
                req.OnComplete = Bridge.fn.bind(this, $asm.$.CM.Javascript.AccountPage.f1);
                CM.Javascript.App.Identity.Client.TryFindAccount(req);
            },
            RenderAccountInfo: function () {


                CM.BridgeHacks.Clear(this._AccountAttributes);
                CM.BridgeHacks.Clear(this._Rating);
                CM.BridgeHacks.Clear(this._Balance);


                var calcs = this._Account.AccountCalculations;
                if (calcs != null && System.Nullable.liftne("ne", calcs.RecentCredits, System.Decimal.lift(null)) && System.Nullable.liftne("ne", calcs.RecentDebits, System.Decimal.lift(null))) {
                    var rr = { };
                    var rep = { v : new CM.RecentReputation() };
                    CM.Helpers.CalculateRecentReputation(System.Nullable.getValue(calcs.RecentCredits), System.Nullable.getValue(calcs.RecentDebits), rr, rep);
                    var amount = CM.Helpers.CalculateAccountBalance(System.Nullable.getValue(calcs.RecentCredits), System.Nullable.getValue(calcs.RecentDebits));
                    CM.BridgeHacks.Amount(this._Balance, amount, CM.Constants.Symbol, true);
                    CM.BridgeHacks.Div(this._Balance, "equal", System.String.concat("USD ", (amount.lt(System.Decimal(0)) ? "-" : ""), " $", Bridge.Int.format(amount.mul(CM.Constants.USDExchange).abs(), "N0")));
                    CM.BridgeHacks.AmountReputation(this._Rating, rr.v);
                    CM.BridgeHacks.Reputation(CM.BridgeHacks.H3(this._Rating, ""), rep.v);
                } else {
                    CM.BridgeHacks.Amount$1(this._Balance, "//c ", "?", "**");
                    CM.BridgeHacks.Amount$1(this._Rating, "", "*", "");
                    CM.BridgeHacks.H3(this._Rating, System.String.concat(CM.Javascript.Assets.SVG.CircleUnknown.ToString(16, 16, "#CCCCCC"), " Unknown reputation"));
                }

                //right = row.Div("cell-half");

                var details = CM.BridgeHacks.Div(this._AccountAttributes, "details");
                var row = CM.BridgeHacks.Div(details, "row makepayment");
                CM.BridgeHacks.Button$1(row, CM.Javascript.SR.LABEL_MAKE_A_PAYMENT, System.String.concat("/", this._ID, "/pay"), "green-button");

                row = CM.BridgeHacks.Div(details, "row");
                var left = CM.BridgeHacks.Div(row, "cell-twothird");
                var right = CM.BridgeHacks.Div(row, "cell-third right");

                CM.BridgeHacks.H2(CM.BridgeHacks.Div(left, null), CM.Javascript.SR.LABEL_ACCOUNT_ATTRIBUTES);
                var att = CM.BridgeHacks.Div(left, "row attr");
                CM.BridgeHacks.Div(att, "cell-half", System.String.concat(CM.Javascript.SR.LABEL_ACCOUNT_AGE, ":"));
                var age = (System.DateTime.subdd(System.DateTime.getUtcNow(), this._Account.CreatedUtc));
                CM.BridgeHacks.Div(att, "cell-half", age.getTotalDays() / 365 > 1 ? System.String.format(CM.Javascript.SR.LABEL_YEARS_OLD, Bridge.box((((Bridge.Int.div(Bridge.Int.clip32(age.getTotalDays()), 365)) | 0)), System.Int32)) : System.String.format(CM.Javascript.SR.LABEL_DAYS_OLD, Bridge.box(Bridge.Int.clip32(age.getTotalDays()), System.Int32)));

                att = CM.BridgeHacks.Div(left, "row attr");
                var atts = this._Account.CollectAttributes();
                CM.BridgeHacks.Div(att, "cell-half", System.String.concat(CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY, ":"));
                var eligibility = atts.getItem$1(CM.Schema.AccountAttributes.IncomeEligibility_Key);
                switch (eligibility) {
                    case CM.Schema.AccountAttributes.IncomeEligibility_Working: 
                        eligibility = CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_WORKING;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_LookingForWork: 
                        eligibility = CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_LOOKING_FOR_WORK;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_HealthProblem: 
                        eligibility = CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_HEALTH_PROBLEM;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_Retired: 
                        eligibility = CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_RETIRED;
                        break;
                    default: 
                        eligibility = CM.Javascript.SR.LABEL_VALUE_NOT_SET;
                        break;
                }
                CM.BridgeHacks.Div(att, "cell-half", eligibility);
                att = CM.BridgeHacks.Div(left, "row attr");
                CM.BridgeHacks.Div(att, "cell-half", System.String.concat(CM.Javascript.SR.LABEL_REGION, ":"));
                CM.BridgeHacks.A$1(CM.BridgeHacks.Div(att, "cell-half"), CM.Javascript.Page.HtmlEncode(CM.ISO31662.GetName(this._Account.Iso31662Region)), System.String.concat("/regions/", this._Account.Iso31662Region));

                att = CM.BridgeHacks.Div(left, "row attr");
                CM.BridgeHacks.Div(att, "cell-half", System.String.concat(CM.Javascript.SR.LABEL_SKILLS_AND_SERVICES, ":"));
                var skills = this._Account.GetSkillsSummary();
                if (skills.length === 0) {
                    skills = CM.Javascript.SR.LABEL_VALUE_NOT_SET;
                } else {
                    skills = System.String.replaceAll(CM.Javascript.Page.HtmlEncode(skills), "\n", "<br/>");
                }
                CM.BridgeHacks.Div(att, "cell-half", skills);
                CM.BridgeHacks.A$1(CM.BridgeHacks.Div(left, null), CM.Javascript.SR.LABEL_EDIT_ACCOUNT, System.String.concat("/", this._ID, "/edit"));
                CM.BridgeHacks.A$1(CM.BridgeHacks.Div(left, null), CM.Javascript.SR.LABEL_REQUEST_A_PAYMENT, System.String.concat("/", this._ID, "/link"));
                //right.Div("qr", QRCode.GenerateQRCode(Constants.TrustedSite + "/" + _ID, 128, 128));

                //right.Div(null).H4(SR.TITLE_OWN_THIS_ACCOUNT);

                //right.Div(null).Span("<a href=\"/civilmoneylogos.svg\" target=\"_blank\">Acceptance Logos</a>");
                //right.Div(null).A(SR.LABEL_EDIT_ACCOUNT, "/" + _ID + "/edit");

            },
            OnCheckedChange: function (r, check) {
                if (check) {
                    if (this._MultiSelect == null) {
                        this._MultiSelect = new CM.Javascript.AccountPage.MultiSelect(this._ID);
                        this.Element.appendChild(this._MultiSelect.Element);
                    }
                    this._MultiSelect.Add(r);
                } else {
                    if (this._MultiSelect != null) {
                        this._MultiSelect.Remove$1(r);
                    }
                    if (this._MultiSelect.Count === 0) {
                        this._MultiSelect.Remove();
                        this._MultiSelect = null;
                    }
                }
            },
            OnTransactionChanged: function (t) {
                var r = { };
                if (!this._TransList.TryFindResult(t.ID, r)) {
                    return;
                }
                var tr = Bridge.as(r.v, CM.Javascript.TransactionListResult);
                tr.Update(t);

                if (this._MultiSelect != null) {
                    this._MultiSelect.Remove$1(r.v);
                    if (this._MultiSelect.Count === 0) {
                        this._MultiSelect.Remove();
                        this._MultiSelect = null;
                    }
                }
            },
            OnClick: function (r) {

            }
        }
    });

    Bridge.ns("CM.Javascript.AccountPage", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.AccountPage, {
        f1: function (sender) {
            var r = sender;
            this._Account = r.Item.Output;
            if (this._Account == null || !this._Account.Response.IsSuccessful) {
                var res = r.Result.$clone();
                if (CM.CMResult.op_Equality(res.$clone(), CM.CMResult.S_OK.$clone())) {
                    res = CM.CMResult.E_Item_Not_Found.$clone();
                }
                this._Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.BridgeHacks.GetLocalisedDescription(res));
                return;
            }
            this.RenderAccountInfo();
        }
    });

    /**
     * Provides an in-app API reference for visitors.
     *
     * @class CM.Javascript.ApiPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.ApiPage", {
        inherits: [CM.Javascript.Page],
        props: {
            Title: {
                get: function () {
                    return "The Civil Money API";
                }
            },
            Url: {
                get: function () {
                    return "/api";
                }
            }
        },
        methods: {
            Build: function () {
                this.Element.className = "apipage markdown";

                // To generate this HTML we're using:
                // http://dillinger.io/

                this.Element.innerHTML = "\r\n<h1><a id=\"About_Civil_Money_0\"></a>The Civil Money API</h1>\n<p><b>Reference implementation source code is available on <a href=\"https://github.com/civilmoney/Reference-Implementation\">GitHub</a>.</b></p>\n<p>Civil Money is an open source debt-free monetary framework which aims to become a unified global currency that can guide us towards a more civilised society. It includes features such as:</p>\n<ul>\n<li>A generous universal basic income.</li>\n<li>A democratic voting process for any fundamental changes to the system.</li>\n<li>A low barrier to entry.</li>\n<li>Seeding based on regional productivity (inverse taxation.)</li>\n<li>Transparent transactions and accountability.</li>\n<li>Implicit dispute resolution.</li>\n<li>A consensus-based scalable distributed P2P architecture.</li>\n<li>An efficient and easy to work with messaging format.</li>\n<li>End-to-end TLS between all peers and user clients.</li>\n</ul>\n<h1><a id=\"General_Inspirations_and_Design_Guidelines_14\"></a>General Inspirations and Design Guidelines</h1>\n<h3><a id=\"1_Money_is_basically_valueless_17\"></a>1. Money is basically valueless.</h3>\n<p>We need to stop thinking about money as some mystical/scarce resource - it’s not. These days it’s just <a href=\"http://money.howstuffworks.com/currency6.htm\">SQL data</a>.\n<a href=\"http://positivemoney.org/issues/debt/\">97% of money in circulation</a> is created endogenously by banks when they extend\nloans and credit. It used to be that <a href=\"https://en.wikipedia.org/wiki/Reserve_requirement\">reserve requirements</a> were placed upon this system to stop things getting out of hand, but that is no longer true today in most countries. If that isn’t absurd enough, derivative “number games” are played shuffling all of the generated SQL data (debt) around, to the general\ndetriment and counter-production of society.</p>\n<p>Civil Money is a new fiat for people who are ready to try a completely new monetary system. A truly unified global effort to rebuild communities, given the past 200 years of economic adolescence leading current civilisation astray.</p>\n<h3><a id=\"2_You_are_the_bank_25\"></a>2. You are the bank.</h3>\n<p>Any person can extend credit to any other person simply by accepting\ntheir Civil Money payment. Even if the buyer’s balance is in the negative, or their credit score is low. Centralised banking institutions as well as loans,\nare unnecessary by design. There is no financial motivation for a seller to decline a customer’s payment. You always get paid either way. The only factor at play here is whether or not the customer, be it a person or business entity, appears\ngenuinely deserving of your goods or services.</p>\n<h3><a id=\"3_Minimal_barrier_to_entry_31\"></a>3. Minimal barrier to entry.</h3>\n<p>The only barrier to entry is <em>temporary</em> access to the internet. Meaning any reasonably modern desktop or mobile web browser. Civil Money should work just as well for a remote community in Kenya sharing a single smartphone as it will a person standing at a point of sale terminal.</p>\n<p>We do not restrict the creation of new accounts through governmental oversights, or require any forms of identification such as birth certificates etc. Firstly, many developing nations in the world simply have no such data or processing capabilities in place. Secondly, it would place a strong importance on the shear existence of every particular account - <em>“this is me, if I lose this, I’m screwed.”</em> Thirdly, we need to avoid storage of anything that can be used for identity theft.</p>\n<p>It is better if the monetary system is designed such that individual accounts are not so important in the big picture. A brand new account is just as good as an old one for essential day-to-day purchases. If you develop amnesia and forget your pass phrase, it’s not the end of the world. Make a new account, set your income eligibility as “Health Problem”, write down your pass phrase, move on with your life.</p>\n<h3><a id=\"4_We_assume_most_accounts_will_act_in_good_faith_38\"></a>4. We assume “most” accounts will act in good faith.</h3>\n<p>One long-term study in particular suggests that people are generally well behaved when merely reminded of their\nmoral compass (see <a href=\"http://thedishonestyproject.com/film/\">Prof. Dan Ariely, (dis)honesty - the truth about lies</a>.) We assume this somewhat going to be the general case. Ultimately it is up to society to ignore or remind those who habitually misbehave about the Civil Money Honour Code.</p>\n<h3><a id=\"5_Misbehaving_accounts_should_minimally_impact_legitimate_accounts_43\"></a>5. Misbehaving accounts should minimally impact legitimate accounts.</h3>\n<p>The idea is, “congratulations idiot, you’ve made a useless account and sent yourself a bunch of money, good for you.” We need to remind people that money means nothing in the first place. What matters is “are you a genuinely decent human being”, or “for what reason does this guy NOT deserve to be able to buy the thing I’m selling”? The answer is almost always “no reason” or “I just don’t have any left to sell”.</p>\n<h3><a id=\"6_c_100_always_equals_1hr_of_labour_but_also_USD_50_46\"></a>6. //c 1.00 always equals 1hr of labour, but also USD $50</h3>\n<p>Civil Money is a <em>hybrid</em> time based currency. Inflation is prevented in Civil Money because its value is pegged to a constant of time. However, the suggested value of //c 1.00 is also USD $50. In other words, an average wage should be $50/hr.</p>\n<p>This is based on an upper-middle class USD$ 80,000/yr income over an 8hr work day, 200 days a year (excludes 165 days of weekends/personal/sick/vacation time.)\nUSD$ 80,000 / 1600hrs = $50/hr.\nSince 1hr = //p 1.00 it follows that //p 1.00 = USD$50.</p>\n<h3><a id=\"7_Doublespend_is_allowed_54\"></a>7. Double-spend is allowed.</h3>\n<p>Because money means basically nothing, there is no reason why we can’t have implicit dispute resolution. Meaning you can dispute a transaction if a product or service was bad, and both parties will retain their money (the dispute is settled amicably by default.)</p>\n<p>To prevent inflation through this mechanism, it reflects badly on users who abuse the system. That is, sellers who frequently do not volunteer a refund during dispute, or a customer who disputes a lot of their purchases.</p>\n<h3><a id=\"8_Servers_are_never_trusted_59\"></a>8. Servers are never trusted.</h3>\n<p>A consensus algorithm is always used to corroborate account, transaction and voting data.</p>\n<p>Because data is stored in a Distributed Hash Table based on IP address, it is difficult to insert a malicious server at a specific network end-point as to influence the consensus about any particular target account. The more well behaved peers on the network, the more resilient it becomes.</p>\n<p>At the end of the day, <em>somebody</em> has to securely deliver a trusted client application that will adhere to all protocols and corroborate data correctly. The <a href=\"https://civil.money\">https://civil.money</a> endpoint is provided for this reason, however it is currently a single point of failure. Native applications will eventually need to be created which do not rely on DNS.</p>\n<h3><a id=\"9_We_use_TLS_but_not_for_protecting_information_secrecy_there_is_none_66\"></a>9. We use TLS but not for protecting information secrecy (there is none.)</h3>\n<p>Civil Money’s use of TLS is simply to minimise MiTM attacks, javascript tampering and such. Also most mobile frameworks are beginning to demand it.</p>\n<h3><a id=\"10_All_cryptographic_tasks_must_take_place_on_the_client_70\"></a>10. All cryptographic tasks must take place “on the client”.</h3>\n<p>Pass phrases should never be cached or transmitted over the internet at any point in time for any reason. Industry standard <a href=\"https://www.ietf.org/rfc/rfc2898.txt\">RFC2898 (aka PBKDF2)</a> password key derivation is used to AES encrypt private keys.</p>\n<p>The key derivation scheme can be customised/upgraded over time and the private key encryption method can theoretically be up to the client implementation to decide. All clients <em>should</em> however support a set of standardised schemes so people don’t need to always use one particular client application.</p>\n<h3><a id=\"11_Civil_Money_must_not_become_a_forum_for_advertisement_or_communication_It_is_a_framework_for_decentralised_monetary_exchange_only_75\"></a>11. Civil Money must not become a forum for advertisement or communication. It is a framework for decentralised monetary exchange only.</h3>\n<p>Storage of emails and general blobs of text are disallowed by design. Even transaction memos are “under the fold” as to deter any kind of spamming activity.</p>\n<h3><a id=\"12_Taxation_is_implicit_and_inverted_and_governments_can_access_their_funds_78\"></a>12. Taxation is implicit and inverted and governments can access their funds.</h3>\n<p>Instead of taking money out of pocket, taxation is a money creation process under Civil Money. Meaning the death of taxes. No more periodic tax filing, and tax evasion is impossible.\nGoverning authority accounts for every geographical region can be created for inverse-tax revenue spending if/when governments decide to join Civil Money.</p>\n<h3><a id=\"13_People_can_vote_on_changes_to_the_system_82\"></a>13. People can vote on changes to the system</h3>\n<p>People sign votes in the same way they do transactions.</p>\n<p>Researchers are encouraged to collect and analyse votes and account history/transaction patterns from across the network in order to identify “vote stuffing” accounts.</p>\n<p>This is a computer sciences issue, as such voting outcomes are only finalised when a reasonable margin of error is established and data has been peer-reviewed through the scientific method.</p>\n<p>Initially, since Civil Money is a ghost town, it is up to the steering group to do its best to arrive at the most truthful impartial result. To help with this end, a two-thirds majority win is needed for any proposition to pass and all vote tallying data is freely available for download and verification by anyone.</p>\n<h2><a id=\"How_it_works_92\"></a>How it works</h2>\n<h3><a id=\"Peers_form_a_Distributed_Hash_Table_DHT_95\"></a>Peers form a Distributed Hash Table (<abbr title=\"Distributed Hash Table\">DHT</abbr>)</h3>\n<p>If you’re unfamiliar with what a <abbr title=\"Distributed Hash Table\">DHT</abbr> is, see here: <a href=\"https://en.wikipedia.org/wiki/Distributed_hash_table\">https://en.wikipedia.org/wiki/Distributed_hash_table</a></p>\n<p>We use the <em>Consistent Hashing</em> model also known as the <a href=\"https://en.wikipedia.org/wiki/Chord_(peer-to-peer)\">Chord <abbr title=\"Distributed Hash Table\">DHT</abbr></a>.</p>\n<p>Each peer’s ID is the first 8 bytes of <code>MD5(&quot;ip-address&quot;)</code>. MD5 is chosen solely for its distribution properties.</p>\n<p>We’ll call this hashing function <code>DHT_ID()</code>.</p>\n<p>Every peer holds a connection to a <code>predecessor</code> and <code>successor</code>. Thus, the network is basically a massive circular daisy chain. In-memory lookup tables assist in more efficiently resolving the responsible peer for any given <code>DHT_ID</code> by reducing the number of hops.</p>\n<p>Each <abbr title=\"Distributed Hash Table\">DHT</abbr> peer is responsible for numerical <code>DHT_IDs</code> landing in between itself and its <code>successor</code>.</p>\n<p>Account records are stored on the network at:</p>\n<pre><code>Server #1 = DHT_ID(&quot;copy1&quot; + LOWER(AccountID))\nServer #2 = DHT_ID(&quot;copy2&quot; + LOWER(AccountID))\nServer #3 = DHT_ID(&quot;copy3&quot; + LOWER(AccountID))\nServer #4 = DHT_ID(&quot;copy4&quot; + LOWER(AccountID))\nServer #5 = DHT_ID(&quot;copy5&quot; + LOWER(AccountID))\n</code></pre>\n<p>Each of those servers will <em>independently</em> corroborate any <code>PUT</code> action with its own <abbr title=\"Distributed Hash Table\">DHT</abbr>_ID resolution. When enough servers meeting the constant <code>MINIMUM-COPIES-REQUIRED</code> are corroborated, only then can an account, transaction or vote record be committed.</p>\n<h3><a id=\"All_client_and_interpeer_communication_is_performed_over_HTTP_Secure_WebSockets_WSS_122\"></a>All client and inter-peer communication is performed over HTTP Secure WebSockets (WSS.)</h3>\n<p>This is not for data secrecy (there is none) but rather for mitigating network based interferences and also satisfying SSL requirements for mobile platforms. No secret or sensitive data ever exists on the Civil Money network.</p>\n<p>A throw-away wild-card SSL certificate is deployed with the server application, and a DNS server has been created which will echo sub-domains that look like IPs, such that:</p>\n<pre><code>nslookup 127-0-0-1.untrusted-server.com = 127.0.0.1\n</code></pre>\n<p>This allows the Civil Money server to be hosted by anybody, and all web browsers will pass basic SSL certificate domain name checks. We don’t care that the server may be malicious, they are only one of multiple that we’re going to corroborate its replies against, and we have no secret data to hide from a malicious server in the event that we decide to try using it for object storage.</p>\n<p>The reference client implementation never displays or downloads content from <abbr title=\"Distributed Hash Table\">DHT</abbr> peers. The only communication going on is a stream of plain text over a single web socket. Any printable data is obviously HTML encoded.</p>\n<h1><a id=\"The_spec_136\"></a>The spec</h1>\n<h3><a id=\"Messaging_140\"></a>Messaging</h3>\n<p>All message and object schema formats consist of a UTF-8 plain text dictionary.</p>\n<h4><a id=\"Request_payload_144\"></a>Request payload</h4>\n<p>The request message payload format is:</p>\n<pre><code>CMD [Action] [NOnce] [Command specific args]\nKEY: Value\nKEY: Value\n...\nEND [NOnce]\n</code></pre>\n<h4><a id=\"Response_payload_155\"></a>Response payload</h4>\n<p>The response message payload format is:</p>\n<pre><code>RES 0x[hexadecimal CMResult Code] [NOnce] [Command specific args]\nKEY: Value\nKEY: Value\n...\nEND [NOnce]\n</code></pre>\n<p>The <code>NOnce</code> can be any random string consisting of letters or numbers and should be reasonably unique for each request. A truncated GUID is used in the reference implementation.</p>\n<h3><a id=\"Actions_168\"></a>Actions</h3>\n<p>The following Actions are defined.</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Action</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PING</td>\n<td>Retrieves status information about a <abbr title=\"Distributed Hash Table\">DHT</abbr> peer and optionally notifies the peer about your own end-point, if you are participating as a <abbr title=\"Distributed Hash Table\">DHT</abbr> peer yourself.</td>\n</tr>\n<tr>\n<td>FIND</td>\n<td>Locates the responsible <abbr title=\"Distributed Hash Table\">DHT</abbr> peer for the specified <abbr title=\"Distributed Hash Table\">DHT</abbr>_ID.</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>Gets an object at a specified path.</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>Tentatively puts an object at the specified path and receives a commit token if validation is successful.</td>\n</tr>\n<tr>\n<td>QUERY-COMMIT</td>\n<td>Queries the current status of an object’s path, which may be in the process of being <code>PUT</code>.</td>\n</tr>\n<tr>\n<td>COMMIT</td>\n<td>Requests that the peer <em>attempt</em> to commit the object associated with a commit token. <abbr title=\"Distributed Hash Table\">DHT</abbr> peers will independently <code>QUERY-COMMIT</code> elsewhere on the network to make sure that enough other peers are also in the process of committing the same object.</td>\n</tr>\n<tr>\n<td>LIST</td>\n<td>Lists objects under the specified path.</td>\n</tr>\n<tr>\n<td>SUBSCRIBE</td>\n<td>Notifies the peer that it should send <code>NOTIFY</code> packets on the established WebSocket connection, about any new updates regarding a specified account.</td>\n</tr>\n<tr>\n<td>NOTIFY</td>\n<td>Sent by <abbr title=\"Distributed Hash Table\">DHT</abbr> peers to notify a subscribed connection of account changes.</td>\n</tr>\n<tr>\n<td>SYNC</td>\n<td>Sent periodically by <abbr title=\"Distributed Hash Table\">DHT</abbr> peers to inform other responsible peers on the network about the current state of an account.</td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"The_PING_Action_186\"></a>The PING Action</h4>\n<p>The <code>PING</code> command serves multiple functions simultaneously.</p>\n<ul>\n<li>Determines whether an end-point is alive.</li>\n<li>Acts as a way for you to find your own external network IP.</li>\n<li>Provides insight as to the health of the peer. A peer without a Successor or Predecessor is broken and should not be used.</li>\n<li>Provides a list of other hints regarding other <em>potentially</em> valid peers on the network.</li>\n<li>Optionally informs the <abbr title=\"Distributed Hash Table\">DHT</abbr> peer that you yourself are a peer and are trying to participate in the network.</li>\n</ul>\n<h5><a id=\"Example_196\"></a>Example</h5>\n<pre><code>Request:\nCMD PING ac72e\nEP: 192.168.0.100:8000\nEND ac72e\n\nResponse:\nRES 0x0 ac72e\nYOUR-IP: 192.168.0.100\nMY-IP: 192.168.0.101\nSUCC: 192.168.0.102:443\nPRED: 192.168.0.103:8000\nSEEN: 192.168.0.102:443,192.168.0.103:8000,192.168.0.104:8000,192.168.0.105:8000\nEND ac72e\n</code></pre>\n<h5><a id=\"PING_Request_Values_213\"></a>PING Request Values</h5>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>End-point</td>\n<td>EP <em>(optional)</em></td>\n<td>When specified, the target peer will evaluate your <abbr title=\"Distributed Hash Table\">DHT</abbr>_ID and if applicable, attempt to connect and modify its current Predecessor.</td>\n</tr>\n</tbody>\n</table>\n<h5><a id=\"PING_Response_Values_219\"></a>PING Response Values</h5>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Your IP</td>\n<td>YOUR-IP</td>\n<td>Informs the caller of their public IP address. Peers should maintain a list of potential external IPs and update their own <abbr title=\"Distributed Hash Table\">DHT</abbr>_ID only when confirmed by a number of other pinged peers.</td>\n</tr>\n<tr>\n<td>My IP</td>\n<td>MY-IP</td>\n<td>Informs the caller of what the peer <em>thinks</em> its current external IP address is. This is useful for diagnosing peers that are stuck behind NAT. A <abbr title=\"Distributed Hash Table\">DHT</abbr> peer is not considered valid until its <code>MY-IP</code> matches that of the outgoing connection.</td>\n</tr>\n<tr>\n<td>Successor</td>\n<td>SUCC</td>\n<td>Informs the caller of the peer’s currently determined Successor.</td>\n</tr>\n<tr>\n<td>Predecessor</td>\n<td>PRED</td>\n<td>Informs the caller of the peer’s currently determined Predecessor.</td>\n</tr>\n<tr>\n<td>Seen List</td>\n<td>SEEN</td>\n<td>Informs the caller about other <em>successfully connecting</em> peers on the network.</td>\n</tr>\n</tbody>\n</table>\n<h5><a id=\"PING_CMResult_Codes_229\"></a>PING CMResult Codes</h5>\n<p>Ping must always return <code>CMResult.S_OK</code>.</p>\n<h4><a id=\"The_FIND_Action_232\"></a>The FIND Action</h4>\n<p>The <code>FIND</code> action locates the responsible peer for a given <code>DHT_ID</code>. If the value does not fall within the peer’s own <code>DHT_ID</code> and that of its <code>Successor</code>, the request is re-routed to the best known and working potential peer that can handle the specified <abbr title=\"Distributed Hash Table\">DHT</abbr>_ID.</p>\n<h5><a id=\"Example_236\"></a>Example</h5>\n<pre><code>Request:\nCMD FIND 716c0\nDHT-ID: az/nz+AWQd4=\nHOPS: 192.168.0.102:443,192.168.0.103:8000\nMAX-HOPS: 10\nEND 716c0\n\nResponse:\nRES 0x0 716c0\nHOPS: 192.168.0.102:443,192.168.0.103:8000,192.168.0.104:8000\nPEER: 192.168.0.104:8000\nEND 716c0\n</code></pre>\n<h5><a id=\"FIND_Request_Values_253\"></a>FIND Request Values</h5>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><abbr title=\"Distributed Hash Table\">DHT</abbr> ID</td>\n<td><abbr title=\"Distributed Hash Table\">DHT</abbr>-ID</td>\n<td>The ID to locate on the network.</td>\n</tr>\n<tr>\n<td>Hops So Far</td>\n<td>HOPS</td>\n<td>A comma delimited list of end-points that have serviced the request. Forwarding peers must add themselves to the end of the HOPS list. If peers find their own end-point in the HOPS list or if <code>MAX-HOPS</code> has been reached, they must terminate the search.</td>\n</tr>\n<tr>\n<td>Maximum Hop Count</td>\n<td>MAX-HOPS</td>\n<td>Sets the desired maximum number of peers to query before giving up. The default value is 30.</td>\n</tr>\n</tbody>\n</table>\n<h5><a id=\"FIND_Response_Values_261\"></a>FIND Response Values</h5>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Hop List</td>\n<td>HOPS</td>\n<td>A comma delimited list of end-points that have serviced the request.</td>\n</tr>\n<tr>\n<td>Responsible Peer</td>\n<td>PEER</td>\n<td>The end-point of the <abbr title=\"Distributed Hash Table\">DHT</abbr> peer currently responsible for the requested <code>DHT_ID</code>.</td>\n</tr>\n</tbody>\n</table>\n<h5><a id=\"FIND_CMResult_Codes_269\"></a>FIND CMResult Codes</h5>\n<ul>\n<li>S_OK</li>\n<li>E_Max_Hops_Reached</li>\n<li>E_Invalid_Request</li>\n<li>E_Not_Enough_Peers</li>\n</ul>\n<h4><a id=\"The_GET_Action_275\"></a>The GET Action</h4>\n<p>All objects are stored in a deterministic folder or path on a <abbr title=\"Distributed Hash Table\">DHT</abbr> peer. The <code>GET</code> action attempts to retrieve the latest copy of any given Account, Transaction or Vote.</p>\n<h5><a id=\"Example_278\"></a>Example</h5>\n<pre><code>Request:\nCMD GET 6ec4a ACCNT/test1?calculations-date=2016-09-24T10:00:00\nEND 6ec4a\n\nResponse:\nRES 0x0 6ec4a\nID: test1\nVER: 1\nREG: CA-NS\nUTC: 2016-09-16T17:18:45\nUPD-UTC: 2016-09-16T17:18:45\nATTR-ELIG: UNEMP\nATTR-SKILL: 2,Roofer\nATTR-SKILL: 0,Fiddler\nATTR-PUSH: &quot;My notification &quot;&quot;sink&quot;&quot;&quot;,https://something.com/endpoint\nPRIKEY: 0,9GO27EHf27eiuW+bd+6genl7h+8+ByNlWgqFG4p2vio=,CLru67gKQDyqetnwmtuX0IgjfE7nQjYxkSrvVJnqmcvHK7tpaMVNucrS2LKc0JV4LKGlQB0MXhR6fYRzNr5MSZqY3DkzYKF5H/3pdFQCqKS+2wagXFCA521we4bULtB5zIjK/4xTYltKfm08vMnJr26vxiEyBFUqXgjpDr5IHX8x3RT33hRvtYbMC7Z9JNFq\nPUBKEY: 2016-09-16T17:18:45,1N8SIc03kFcY4EB9s3jkBshSFL5zsaRiGvOVAy/0whBtlJ5S4ReL0WpydJkJ0TqK4iU/CfDThLVtbEIteJDLE0BXI+pbMzeOhtLjPZBDye83q2GeQq9d2sfpmkI3uqW2D+NCo+nC//CMtaE9JqmmpTnKKEw4I3/oXBrtZj7x7ss=,\nSIG: Qju9v3SDEEJ2/6/3whJ9MqlNomU36SCfU9Vr7ukCHAD9kPgQxUsSbLEcZ9gQpn4Bgzvb7IaRe183RpSmAWNUQpe3aSofgbEhzkdAuiE5EKLJu1KJ88vNy25j0By6xtorsd30b2yHEuyHs4m9Kz9mBxNdZU0h5/nMvtDz4qXitEU=\nCALC-LAST-TRANS: 2016-09-27T12:01:23\nCALC-DEBITS: 1.000234\nCALC-CREDITS: 2.000000\nCALC-REP: 50.0\nCAN-VOTE: 0\nEND 6ec4a\n</code></pre>\n<h5><a id=\"GET_Request_Values_306\"></a>GET Request Values</h5>\n<p>There is no key/value request body for a <code>GET</code> request. The object path is specified as the argument of the request <code>CMD</code> line.</p>\n<p>For the <code>Account</code> object path, a query parameter <code>calculations-date</code> is permitted, which will instruct the peer to produce an <strong>uncorroborated</strong> summary of the account’s balance and reputation. These values begin with <code>CALC-*</code> in the response body, and must be omitted during any RSA signing checks.</p>\n<h5><a id=\"GET_Response_Values_312\"></a>GET Response Values</h5>\n<p>The <code>GET</code> response always consists of the object’s raw text key/value dictionary.</p>\n<p>For <code>Account</code> objects where a <code>calculations-date</code> has been included, the following Account <code>CALC-</code> attributes are currently defined.</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Last Transaction</td>\n<td>CALC-LAST-TRANS</td>\n<td>The time stamp of the last transaction <code>MAX(PYR-UTC, PYE-UTC)</code>.</td>\n</tr>\n<tr>\n<td>Recent Credits</td>\n<td>CALC-CREDITS</td>\n<td>The sum of all depreciated credit transactions.</td>\n</tr>\n<tr>\n<td>Recent Debits</td>\n<td>CALC-DEBITS</td>\n<td>The sum of all depreciated debit transactions.</td>\n</tr>\n<tr>\n<td>Recent Reputation</td>\n<td>CALC-REP</td>\n<td>The Recent Reputation credit score is defined as <code>MIN(1, (BASIC-YEARLY-ALLOWANCE + DEPRECIATED-CREDITS) / ( DEPRECIATED-DEBITS + BASIC-YEARLY-ALLOWANCE * 2 )) * 100</code>.</td>\n</tr>\n<tr>\n<td>Can Vote</td>\n<td>CAN-VOTE</td>\n<td><code>1</code> (true) if the account has at least 1 transaction every month for the last 12 months with multiple parties, otherwise <code>0</code> (false.) This is a <em>hint</em> for the client regarding an account’s voting eligibility.</td>\n</tr>\n</tbody>\n</table>\n<h5><a id=\"GET_CMResult_Codes_327\"></a>GET CMResult Codes</h5>\n<ul>\n<li>S_OK</li>\n<li>E_Invalid_Request</li>\n<li>E_Item_Not_Found</li>\n<li>E_Invalid_Object_Path</li>\n<li>E_Account_ID_Invalid</li>\n</ul>\n<h4><a id=\"The_PUT_Action_337\"></a>The PUT Action</h4>\n<p>The <code>PUT</code> action informs a <abbr title=\"Distributed Hash Table\">DHT</abbr> peer of your intention to commit a new or updated copy of an object. Object-specific update rules are validated and a <code>Commit Token</code> is included in the response if the object appears to be valid.</p>\n<h5><a id=\"Example_341\"></a>Example</h5>\n<pre><code>Request:\nCMD PUT fbd06 TRANS/2016-09-24T20:13:30 test1 test2\nVER: 1\nUTC: 2016-09-24T20:13:30\nPYR-ID: test2\nPYR-REG: CA-NS\nPYR-STAT: Accept\nPYR-UTC: 2016-09-24T20:13:30\nPYE-ID: test1\nMEMO: Thank you for the thing, it was very thingy.\nAMNT: 1.000000\nPYR-SIG: PR+VGiRLJz1xwZTs5JOF5rxngL8vYEftkW5yCS2IA2YqNoQ73Tnw3WydQ4ZoLJ3UqEzB/suDa8GoPMdjG1esuuVW9MXsvkNXbkT+Wb+qCydNpxdETNXv6352oaSDLIO8sT8cnSwBdyIl80FRiy/ITH42ZAb9jM+T3iexiGNsE5A=\nEND fbd06\n\nResponse:\nRES 0x0 fbd06 dfb67b3d-55fe-4e41-8dc8-aeb51dbb8253\nEND fbd06\n</code></pre>\n<h5><a id=\"PUT_Request_Values_363\"></a>PUT Request Values</h5>\n<p>The <code>PUT</code> request body consist of an object key/value dictionary. The <code>CMD</code> command argument is the object’s path.</p>\n<h5><a id=\"PUT_Response_Values_367\"></a>PUT Response Values</h5>\n<p>There is no key/value response body in a <code>PUT</code> request. The <code>RES</code> response line contains a GUID commit token as its command specific argument.</p>\n<h5><a id=\"PUT_CMResult_Codes_371\"></a>PUT CMResult Codes</h5>\n<ul>\n<li>S_OK</li>\n<li>E_Unknown_API_Version</li>\n<li>E_Account_ID_Invalid</li>\n<li>E_Object_Superseded</li>\n<li>Type-specific error codes</li>\n</ul>\n<h4><a id=\"The_QUERYCOMMIT_Action_381\"></a>The QUERY-COMMIT Action</h4>\n<p>The <code>QUERY-COMMIT</code> action allows a <abbr title=\"Distributed Hash Table\">DHT</abbr> peer or client to confirm whether or not a peer is about to commit or has already commited an object with the correct <code>Updated UTC</code> time stamp.</p>\n<h5><a id=\"Example_385\"></a>Example</h5>\n<pre><code>Request:\nCMD QUERY-COMMIT 4e93c TRANS/2016-09-24T20:13:30 test1 test2\nEND 4e93c\n\nResponse:\nRES 0x0 4e93c 2016-09-24T20:13:30\nEND 4e93c\n</code></pre>\n<h5><a id=\"QUERYCOMMIT_Request_Values_397\"></a>QUERY-COMMIT Request Values</h5>\n<p>There is no key/value request body for a <code>QUERY-COMMIT</code> request. The request <code>CMD</code> line contains the object <code>Path</code> about to be saved. This allows all <abbr title=\"Distributed Hash Table\">DHT</abbr> peers to query the commit status of another responsible peers, without knowing what the object’s commit token is.</p>\n<h5><a id=\"QUERYCOMMIT_Response_Values_401\"></a>QUERY-COMMIT Response Values</h5>\n<p>There is no key/value response body in a <code>QUERY-COMMIT</code> request. The <code>RES</code> response line contains the object’s <code>Updated UTC</code> time stamp. The object <em>may or may not</em> be already committed.</p>\n<p><abbr title=\"Distributed Hash Table\">DHT</abbr> peers must return the highest <code>Updated UTC</code> either on record or pending commit.</p>\n<h5><a id=\"QUERYCOMMIT_CMResult_Codes_407\"></a>QUERY-COMMIT CMResult Codes</h5>\n<ul>\n<li>S_OK</li>\n<li>E_Item_Not_Found</li>\n</ul>\n<h4><a id=\"The_COMMIT_Action_413\"></a>The COMMIT Action</h4>\n<p>The <code>COMMIT</code> action instructs a <abbr title=\"Distributed Hash Table\">DHT</abbr> peer to independently corroborate an object’s status on the network and, if successful, commit the record to permanent storage and indexing.</p>\n<h5><a id=\"Example_417\"></a>Example</h5>\n<pre><code>Request:\nCMD COMMIT 506ab dfb67b3d-55fe-4e41-8dc8-aeb51dbb8253\nEND 506ab\n\nResponse:\nRES 0x0 506ab\nEND 506ab\n</code></pre>\n<h5><a id=\"COMMIT_Request_Values_428\"></a>COMMIT Request Values</h5>\n<p>There is no key/value request body for a <code>COMMIT</code> request. The request <code>CMD</code> line contains the object <code>Commit Token</code> to be committed.</p>\n<h5><a id=\"COMMIT_Response_Values_432\"></a>COMMIT Response Values</h5>\n<p>There is no key/value response body in a <code>COMMIT</code> request.</p>\n<h5><a id=\"COMMIT_CMResult_Codes_436\"></a>COMMIT CMResult Codes</h5>\n<ul>\n<li>S_OK</li>\n<li>E_Item_Not_Found</li>\n<li>E_Not_Enough_Peers</li>\n</ul>\n<h4><a id=\"The_LIST_Action_443\"></a>The LIST Action</h4>\n<p>The <code>LIST</code> action provides basic lookup capability for object paths and includes basic sorting and pagination functionality.</p>\n<h5><a id=\"Example_447\"></a>Example</h5>\n<pre><code>Request:\nCMD LIST 636a1 ACCNT/test2/TRANS\nVER: 1\nSTART: 0\nMAX: 10\nUTC-FROM: 2014-09-24T21:30:02\nUTC-TO: 2016-09-25T21:30:02\nSORT: UPD-UTC DESC\nEND 636a1\n\nResponse:\nRES 0x0 636a1\nSTART: 0\nTOTAL: 22\nCOUNT: 10\nITEM: 2016-09-24T20:13:30 test1 test2 1.000000 2016-09-24T20:13:30 0 1  CA-NS\nITEM: 2016-09-21T23:54:52 test1 test2 1.000000 2016-09-21T23:54:52 0 1  CA-NS\nITEM: 2016-09-21T23:42:18 test1 test2 1.000000 2016-09-21T23:50:49 1 1 CA-NS CA-NS\nITEM: 2016-09-21T23:36:44 test1 test2 1.000000 2016-09-21T23:50:49 1 1 CA-NS CA-NS\nITEM: 2016-09-21T22:20:34 test1 test2 1.000000 2016-09-21T22:20:34 0 1  CA-NS\nITEM: 2016-09-21T22:16:40 test1 test2 1.000000 2016-09-21T22:16:40 0 1  CA-NS\nITEM: 2016-09-21T16:06:17 test1 test2 4.000000 2016-09-21T16:06:17 0 1  CA-NS\nITEM: 2016-09-21T16:04:28 test1 test2 5.000000 2016-09-21T16:04:28 0 1  CA-NS\nITEM: 2016-09-15T15:06:34 test1 test2 1.000000 2016-09-15T15:06:34 0 1  CA-NS\nITEM: 2016-09-15T14:45:50 test1 test2 1.000000 2016-09-15T14:48:24 1 1 CA-NS CA-NS\nEND 636a1\n</code></pre>\n<h5><a id=\"LIST_Request_Values_477\"></a>LIST Request Values</h5>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>API Version</td>\n<td>VER</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Start At Index</td>\n<td>START</td>\n<td>The starting record index, used for pagination.</td>\n</tr>\n<tr>\n<td>Max Records</td>\n<td>MAX</td>\n<td>The maximum number of records to return. The default value is 1000 when not specified.</td>\n</tr>\n<tr>\n<td>Updated Utc From Inclusive</td>\n<td>UTC-FROM</td>\n<td>The item <code>Updated UTC</code> date to begin listing from.</td>\n</tr>\n<tr>\n<td>Updated Utc To Exclusive</td>\n<td>UTC-TO</td>\n<td>The item <code>Updated UTC</code> date to stop before.</td>\n</tr>\n<tr>\n<td>Sorting</td>\n<td>SORT</td>\n<td>Path-specific field sorting e.g. <code>PYR-ID ASC</code>.</td>\n</tr>\n</tbody>\n</table>\n<p>The following path sorting fields are defined for both <code>ASC</code> and <code>DESC</code> directions.</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Path</th>\n<th>Field</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ACCNT/</td>\n<td>UTC</td>\n</tr>\n<tr>\n<td>ACCNT/</td>\n<td>UPD-UTC</td>\n</tr>\n<tr>\n<td>ACCNT/</td>\n<td>ID</td>\n</tr>\n<tr>\n<td>ACCNT/<code>ID</code>/VOTES/</td>\n<td>UTC</td>\n</tr>\n<tr>\n<td>ACCNT/<code>ID</code>/VOTES/</td>\n<td>UPD-UTC</td>\n</tr>\n<tr>\n<td>ACCNT/<code>ID</code>/TRANS/</td>\n<td>UTC</td>\n</tr>\n<tr>\n<td>ACCNT/<code>ID</code>/TRANS/</td>\n<td>UPD-UTC</td>\n</tr>\n<tr>\n<td>ACCNT/<code>ID</code>/TRANS/</td>\n<td>PYR-ID</td>\n</tr>\n<tr>\n<td>ACCNT/<code>ID</code>/TRANS/</td>\n<td>PYE-ID</td>\n</tr>\n<tr>\n<td>ACCNT/<code>ID</code>/TRANS/</td>\n<td>AMNT</td>\n</tr>\n<tr>\n<td>VOTES/<code>PropositionID</code>/</td>\n<td>UTC</td>\n</tr>\n<tr>\n<td>VOTES/<code>PropositionID</code>/</td>\n<td>UPD-UTC</td>\n</tr>\n<tr>\n<td>VOTES/<code>PropositionID</code>/</td>\n<td>VTR-ID</td>\n</tr>\n<tr>\n<td>TRANS/</td>\n<td>UTC</td>\n</tr>\n<tr>\n<td>TRANS/</td>\n<td>UPD-UTC</td>\n</tr>\n<tr>\n<td>TRANS/</td>\n<td>PYR-ID</td>\n</tr>\n<tr>\n<td>TRANS/</td>\n<td>PYE-ID</td>\n</tr>\n<tr>\n<td>TRANS/</td>\n<td>AMNT</td>\n</tr>\n<tr>\n<td>REGIONS/<code>Region</code>/TRANS/</td>\n<td>UTC</td>\n</tr>\n<tr>\n<td>REGIONS/<code>Region</code>/TRANS/</td>\n<td>UPD-UTC</td>\n</tr>\n<tr>\n<td>REGIONS/<code>Region</code>/TRANS/</td>\n<td>PYR-ID</td>\n</tr>\n<tr>\n<td>REGIONS/<code>Region</code>/TRANS/</td>\n<td>PYE-ID</td>\n</tr>\n<tr>\n<td>REGIONS/<code>Region</code>/TRANS/</td>\n<td>AMNT</td>\n</tr>\n</tbody>\n</table>\n<h5><a id=\"LIST_Response_Values_517\"></a>LIST Response Values</h5>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>API Version</td>\n<td>VER</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Start Index</td>\n<td>START</td>\n<td>The requested starting index.</td>\n</tr>\n<tr>\n<td>Count</td>\n<td>COUNT</td>\n<td>The number of records included in this paginated response.</td>\n</tr>\n<tr>\n<td>Total Record Count</td>\n<td>TOTAL</td>\n<td>The total number of records available for pagination.</td>\n</tr>\n<tr>\n<td>Item</td>\n<td>ITEM <em>(one per result)</em></td>\n<td>Type-specific object indexes.</td>\n</tr>\n</tbody>\n</table>\n<p>The following one-liner Object Indexes are defined.</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Type</th>\n<th>Index format</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Account</td>\n<td><code>ID</code></td>\n</tr>\n<tr>\n<td>Vote</td>\n<td><code>Proposition &quot; &quot; Voter &quot; &quot; Value &quot; &quot; Created-UTC &quot; &quot; Updated-UTC</code></td>\n</tr>\n<tr>\n<td>Transaction</td>\n<td><code>Created-UTC &quot; &quot; Payee &quot; &quot; Payer &quot; &quot; Amount &quot; &quot; Updated-UTC &quot; &quot; Payee-Status (Byte) &quot; &quot; Payer-Status (Byte) &quot; &quot; Payee-Region &quot; &quot; Payer-Region</code></td>\n</tr>\n</tbody>\n</table>\n<p><em>HINT:</em> The beginning of a Transaction index is just the <code>Transaction ID</code> (Date + Payee + Payer.)</p>\n<h5><a id=\"LIST_CMResult_Codes_538\"></a>LIST CMResult Codes</h5>\n<ul>\n<li>S_OK</li>\n<li>E_Invalid_Object_Path</li>\n<li>E_Invalid_Request</li>\n</ul>\n<h4><a id=\"The_SUBSCRIBE_Action_544\"></a>The SUBSCRIBE Action</h4>\n<p>The <code>SUBSCRIBE</code> action informs a <abbr title=\"Distributed Hash Table\">DHT</abbr> peer that you would like to be receive “push” notifications for an account. This action should only be called on currently responsible peers for the account, and notifications received through a <code>NOTIFY</code> should not be trusted alone. Clients must look for multiple notifications by multiple subscribed peers before alerting a user.</p>\n<p>Subscriptions are removed by <abbr title=\"Distributed Hash Table\">DHT</abbr> peers when the underlying WebSocket connection is closed or otherwise broken.</p>\n<h5><a id=\"Example_550\"></a>Example</h5>\n<pre><code>Request:\nCMD SUBSCRIBE 68343 test2\nEND 68343\n\nResponse:\nRES 0x0 68343\nEND 68343\n</code></pre>\n<h5><a id=\"SUBSCRIBE_Request_Values_562\"></a>SUBSCRIBE Request Values</h5>\n<p>There is no key/value request body for a <code>SUBSCRIBE</code> request. The request <code>CMD</code> line contains the account <code>ID</code> to receive notifications for.</p>\n<h5><a id=\"SUBSCRIBE_Response_Values_566\"></a>SUBSCRIBE Response Values</h5>\n<p>There is no key/value response body in a <code>SUBSCRIBE</code> request.</p>\n<h5><a id=\"SUBSCRIBE_CMResult_Codes_570\"></a>SUBSCRIBE CMResult Codes</h5>\n<ul>\n<li>S_OK</li>\n</ul>\n<h4><a id=\"The_NOTIFY_Action_574\"></a>The NOTIFY Action</h4>\n<p><abbr title=\"Distributed Hash Table\">DHT</abbr> peers send a <code>NOTIFY</code> to any open client WebSocket connections that have requested push notifications for an account ID.</p>\n<h5><a id=\"Example_578\"></a>Example</h5>\n<pre><code>Push Notification:\nCMD NOTIFY b7a82 TRANS/2016-09-24T20:13:30 test1 test2\nVER: 1\nUTC: 2016-09-24T20:13:30\nPYR-ID: test2\nPYR-REG: CA-NS\nPYR-STAT: Cancel\nPYR-UTC: 2016-09-24T22:13:30\nPYE-ID: test1\nMEMO: Thank you for the thing, it was very thingy.\nAMNT: 1.000000\nPYR-SIG: PTkJy/MdUjYY3Xiv5KCl+mt8Y7lm7yJs60LjqNt3BMhd6tDbkJ4liKr9aCQHdxQLd0BPSsFmfKMLGJpFseBw081eQhsSmaf1dQWjS5w9kktSZRoWGGCHHQnckWbLjs33VExoYgaH+rp+x5ZkrdZ/INX9nH07CngyTLUWmWMl9j8=\nEND b7a82\n\nClient reply to DHT Peer:\nRES 0x0 b7a82\nEND b7a82\n</code></pre>\n<h5><a id=\"NOTIFY_Request_Values_599\"></a>NOTIFY Request Values</h5>\n<p>The <code>NOTIFY</code> action is an object key/value body. The <code>CMD</code> request argument is the object’s path, which can be used to uniquely identify the object as well its type.</p>\n<h5><a id=\"NOTIFY_Response_Values_603\"></a>NOTIFY Response Values</h5>\n<p>Clients should return <code>S_OK</code> to all <code>NOTIFY</code> messages.</p>\n<h5><a id=\"NOTIFY_CMResult_Codes_607\"></a>NOTIFY CMResult Codes</h5>\n<ul>\n<li>S_OK</li>\n</ul>\n<h4><a id=\"The_SYNC_Action_611\"></a>The SYNC Action</h4>\n<p>The <code>SYNC</code> action must be performed periodically by all <abbr title=\"Distributed Hash Table\">DHT</abbr> peers in order to keep the network sufficiently populated with multiple copies of every account.</p>\n<h5><a id=\"Example_615\"></a>Example</h5>\n<pre><code>Request:\nCMD SYNC 0021d test1\nVER: 1\nID: test1\nUPD-UTC: 2016-09-11T13:57:55\nEP: 192.168.0.88:8012\nTRANS-HASH: LBjy0hsRdsYPJswaKDrfLpwFXAgH4LdU7tY18vpbajo=\nVOTES-HASH: 2vPI9Q1MvfxGfy011o71AoK+/YbWyZkBYRf1C6EMT44=\nEND 0021d\n\nResponse:\nRES 0x0 0021d\nEND 0021d\n</code></pre>\n<h5><a id=\"SYNC_Request_Values_632\"></a>SYNC Request Values</h5>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>API Version</td>\n<td>VER</td>\n<td>1</td>\n</tr>\n<tr>\n<td>My End-point</td>\n<td>EP</td>\n<td>The calling <abbr title=\"Distributed Hash Table\">DHT</abbr> peer’s service end-point. This informs the destination of the endpoint to use in order to potentially retrieve the item if it can’t be found elsewhere on the network.</td>\n</tr>\n<tr>\n<td>Updated UTC</td>\n<td>UPD-UTC</td>\n<td>The account record’s current <code>Updated UTC</code> ISO-8601 value. If the destination determines that its is obsolete, it will query the network for a <em>corroborated</em> copy of the current account.</td>\n</tr>\n<tr>\n<td>Transactions Hash</td>\n<td>TRANS-HASH</td>\n<td>An SHA256 hash of all ISO-8601 <code>Updated UTC</code> Transaction values for the account, hashed in ascending order.</td>\n</tr>\n<tr>\n<td>Votes Hash</td>\n<td>VOTES-HASH</td>\n<td>An SHA256 hash of all ISO-8601 <code>Updated UTC</code> Vote values for the account, hashed in ascending order.</td>\n</tr>\n</tbody>\n</table>\n<h5><a id=\"SYNC_Response_Values_643\"></a>SYNC Response Values</h5>\n<p>There is no key/value response body in a <code>SYNC</code> request.</p>\n<h5><a id=\"SYNC_CMResult_Codes_647\"></a>SYNC CMResult Codes</h5>\n<ul>\n<li>S_OK</li>\n</ul>\n<h4><a id=\"Object_Storage_Paths_651\"></a>Object Storage Paths</h4>\n<p><abbr title=\"Distributed Hash Table\">DHT</abbr> peers must be able to GET, PUT and LIST items stored in the following deterministic locations.</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Type</th>\n<th>Action</th>\n<th>Path</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Account</td>\n<td>GET/PUT</td>\n<td>ACCNT/<code>ID</code></td>\n</tr>\n<tr>\n<td>Account</td>\n<td>LIST</td>\n<td>ACCNT/</td>\n</tr>\n<tr>\n<td>Transaction</td>\n<td>GET/PUT</td>\n<td>TRANS/<code>yyyy-MM-ddTHH:mm:ss payee payer</code></td>\n</tr>\n<tr>\n<td>Transaction</td>\n<td>LIST</td>\n<td>ACCNT/<code>Payer|Payee ID</code>/TRANS/</td>\n</tr>\n<tr>\n<td>Transaction</td>\n<td>LIST</td>\n<td>REGION/<code>Region Code</code>/TRANS/</td>\n</tr>\n<tr>\n<td>Vote</td>\n<td>GET/PUT</td>\n<td>VOTES/<code>Proposition ID</code>/<code>Voter ID</code></td>\n</tr>\n<tr>\n<td>Vote</td>\n<td>LIST</td>\n<td>VOTES/<code>Proposition ID</code>/</td>\n</tr>\n<tr>\n<td>Vote</td>\n<td>LIST</td>\n<td>ACCNT/<code>Voter ID</code>/VOTES/</td>\n</tr>\n</tbody>\n</table>\n<p><abbr title=\"Distributed Hash Table\">DHT</abbr> peers should store versioned copies of records in a format and storage scheme suitable for\nhandling millions of rows.</p>\n<h3><a id=\"Object_Types_673\"></a>Object Types</h3>\n<p>The following object types are defined.</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Action</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Account</td>\n<td>Describes a user account.</td>\n</tr>\n<tr>\n<td>Transaction</td>\n<td>Describes a digitally signed money transfer between accounts.</td>\n</tr>\n<tr>\n<td>Vote</td>\n<td>Describes a user vote for a proposal raised by the Civil Money steering group.</td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"The_Account_object_685\"></a>The Account object</h4>\n<p>The Account object schema is:</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Field</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>API Version</td>\n<td>VER</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Account ID</td>\n<td>ID</td>\n<td>string, max 48 utf-8 bytes</td>\n</tr>\n<tr>\n<td>Created UTC</td>\n<td>UTC</td>\n<td>ISO-8601 UTC date string</td>\n</tr>\n<tr>\n<td>Updated UTC</td>\n<td>UPD-UTC</td>\n<td>ISO-8601 UTC date string</td>\n</tr>\n<tr>\n<td>Region</td>\n<td>REG</td>\n<td>ISO 3166-2 subdivision code</td>\n</tr>\n<tr>\n<td>Private Key</td>\n<td>PRIKEY</td>\n<td>PrivateKeySchemeID* “,” Salt base64 “,” Encrypted base64</td>\n</tr>\n<tr>\n<td>Public Key <em>(multiple allowed)</em></td>\n<td>PUBKEY</td>\n<td>ISO-8601 Effective Date “,” Key base64 “,” <em>Modification Signature</em>** base64</td>\n</tr>\n<tr>\n<td>Attributes</td>\n<td>ATTR-*</td>\n<td>Extensible account attributes***</td>\n</tr>\n<tr>\n<td>Signature</td>\n<td>SIG</td>\n<td>base64 RSA signature of all values</td>\n</tr>\n</tbody>\n</table>\n<p>* Currently recognised PrivateKeySchemeIDs. <strong>Encryption and decryption always take place on the client</strong>.</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>ID</th>\n<th>Scheme</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>Encrypted using AES CBC mode and PKCS7 padding, with 16 byte IV and 32 byte Key. The IV and Key are derived using RFC2898 HMACSHA1 with 10,000 iterations.</td>\n</tr>\n</tbody>\n</table>\n<p>** The modification signature is necessary only when changing the private key after initial account creation. Clients and peers must select the public key with a suitable <em>effective date</em> according to an objects <code>UPD-UTC</code> timestamp.</p>\n<p>*** Currently recognised account attributes:</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Name</th>\n<th>Key</th>\n<th>Values</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Governing Authority</td>\n<td>ATTR-GOV</td>\n<td>base64 signature of values <code>UTC + REG</code></td>\n<td>A secret private key held by the Civil Money steering group is used to generate a governing authority key, which designates a particular Civil Money account as the recipient of Inverse-Taxation income for a region. These will be assigned to governments on an as-requested basis after a vetting process (social engineering is an obvious challenge/attack vector here.)</td>\n</tr>\n<tr>\n<td>Income Eligibility</td>\n<td>ATTR-ELIG</td>\n<td><code>WORK</code> Working, <code>HLTH</code> Health Problem, <code>UNEMP</code> Unemployed, <code>AGED</code> Retired</td>\n<td>Provides people with a basic hint about a customer’s personal circumstance. A low credit score might be because they’re disabled or what have you. This just one of multiple considerations. The value does not affect credit rating so there is no incentive to lie.</td>\n</tr>\n<tr>\n<td>Skill or Service</td>\n<td>ATTR-SKILL <em>(multiple allowed)</em></td>\n<td><code>SkillLevel* &quot;,&quot; Description</code></td>\n<td>Provides more context about a person’s potential contribution to society.</td>\n</tr>\n<tr>\n<td>Push Notification</td>\n<td>ATTR-PUSH <em>(multiple allowed)</em></td>\n<td>CSV of <code>Label,HTTP endpoint</code></td>\n<td><abbr title=\"Distributed Hash Table\">DHT</abbr> peers post a notification to this end point any time an object is created or updated, that was <strong>not</strong> through a <code>SYNC</code> operation.</td>\n</tr>\n</tbody>\n</table>\n<p>* Skill levels:</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Value</th>\n<th>Level</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>Amateur</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Qualified</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Experienced</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Certified</td>\n</tr>\n</tbody>\n</table>\n<h5><a id=\"Example_728\"></a>Example</h5>\n<pre><code>ID: test1\nVER: 1\nREG: CA-NS\nUTC: 2016-09-16T17:18:45\nUPD-UTC: 2016-09-16T17:18:45\nATTR-ELIG: UNEMP\nATTR-SKILL: 2,Roofer\nATTR-SKILL: 0,Fiddler\nATTR-PUSH: &quot;My notification &quot;&quot;sink&quot;&quot;&quot;,https://something.com/endpoint\nPRIKEY: 0,9GO27EHf27eiuW+bd+6genl7h+8+ByNlWgqFG4p2vio=,CLru67gKQDyqetnwmtuX0IgjfE7nQjYxkSrvVJnqmcvHK7tpaMVNucrS2LKc0JV4LKGlQB0MXhR6fYRzNr5MSZqY3DkzYKF5H/3pdFQCqKS+2wagXFCA521we4bULtB5zIjK/4xTYltKfm08vMnJr26vxiEyBFUqXgjpDr5IHX8x3RT33hRvtYbMC7Z9JNFq\nPUBKEY: 2016-09-16T17:18:45,1N8SIc03kFcY4EB9s3jkBshSFL5zsaRiGvOVAy/0whBtlJ5S4ReL0WpydJkJ0TqK4iU/CfDThLVtbEIteJDLE0BXI+pbMzeOhtLjPZBDye83q2GeQq9d2sfpmkI3uqW2D+NCo+nC//CMtaE9JqmmpTnKKEw4I3/oXBrtZj7x7ss=,\nSIG: Qju9v3SDEEJ2/6/3whJ9MqlNomU36SCfU9Vr7ukCHAD9kPgQxUsSbLEcZ9gQpn4Bgzvb7IaRe183RpSmAWNUQpe3aSofgbEhzkdAuiE5EKLJu1KJ88vNy25j0By6xtorsd30b2yHEuyHs4m9Kz9mBxNdZU0h5/nMvtDz4qXitEU=\n</code></pre>\n<h5><a id=\"Account_rules_745\"></a>Account rules</h5>\n<ol>\n<li><code>Created UTC</code> and <code>ID</code> are read-only upon creation.</li>\n<li><code>Updated UTC</code> must equal <code>Created UTC</code> during creation.</li>\n<li><code>Public Keys</code> are read-only when appended and cannot be removed.</li>\n<li>Clients must always sign objects using the newest <code>Public Key</code>.</li>\n<li>For signature validation, clients must iterate through the account’s public keys in order to find the correct key based on the key <code>Effective Date</code> and the data’s <code>Updated UTC</code>.</li>\n<li>When a new Public key is append is must include the <code>Modification Signature</code> component. The signature is an RSA of the <strong>new</strong> <code>Effective Date</code> utf-8 string, and raw <code>Key</code> byes, using the <strong>previous</strong> public/private key pair.</li>\n<li>Peers must validate all public keys to make sure that each entry successfully validates the key after it.</li>\n</ol>\n<h4><a id=\"The_Transaction_object_757\"></a>The Transaction object</h4>\n<p>The Transaction object schema is:</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Field</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>API Version</td>\n<td>VER</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Created UTC</td>\n<td>UTC</td>\n<td>ISO-8601 UTC date string</td>\n</tr>\n<tr>\n<td>Amount</td>\n<td>AMNT</td>\n<td>The amount of the transaction up to 6 decimal places. Decimal separator is ‘.’</td>\n</tr>\n<tr>\n<td>Memo</td>\n<td>MEMO</td>\n<td>A reader-friendly plain-text UTF-8 description or note about the transaction. Maximum allowed length is 48 UTF-8 bytes. Implementations which use HTML must HTML-encode all memos.</td>\n</tr>\n<tr>\n<td>Payee ID</td>\n<td>PYE-ID</td>\n<td>The account ID of the recipient/payee</td>\n</tr>\n<tr>\n<td>Payee Region</td>\n<td>PYE-REG</td>\n<td>The Payee’s ISO 3166-2 subdivision code at the time of transaction.</td>\n</tr>\n<tr>\n<td>Payee Tag</td>\n<td>PYE-TAG</td>\n<td>An optional electronic tag which is typically defined by the payee during acceptance. Up to 48 UTF-8 bytes. Implementations which use HTML must HTML-encode all tags.</td>\n</tr>\n<tr>\n<td>Payee Updated UTC</td>\n<td>PYE-UTC</td>\n<td>ISO-8601 UTC date string</td>\n</tr>\n<tr>\n<td>Payee Status</td>\n<td>PYE-STAT</td>\n<td>NotSet, Accept, Decline, Refund</td>\n</tr>\n<tr>\n<td>Payee Signature</td>\n<td>PYE-SIG</td>\n<td>base64 RSA signature of <code>Payee Signing Data</code>*</td>\n</tr>\n<tr>\n<td>Payer ID</td>\n<td>PYR-ID</td>\n<td>The account ID of the sender/payer</td>\n</tr>\n<tr>\n<td>Payer Region</td>\n<td>PYR-REG</td>\n<td>The Payer’s ISO 3166-2 subdivision code at the time of transaction.</td>\n</tr>\n<tr>\n<td>Payer Tag</td>\n<td>PYR-TAG</td>\n<td>An optional electronic tag which is typically defined by the payer during creation. Up to 48 UTF-8 bytes. Implementations which use HTML must HTML-encode all tags.</td>\n</tr>\n<tr>\n<td>Payer Updated UTC</td>\n<td>PYR-UTC</td>\n<td>ISO-8601 UTC date string</td>\n</tr>\n<tr>\n<td>Payer Status</td>\n<td>PYR-STAT</td>\n<td>NotSet, Accept, Dispute, Cancel</td>\n</tr>\n<tr>\n<td>Payer Signature</td>\n<td>PYR-SIG</td>\n<td>base64 RSA signature of <code>Payeer Signing Data</code>**</td>\n</tr>\n</tbody>\n</table>\n<p>* <code>Payee Signing Data</code> is defined as the following values:</p>\n<ul>\n<li>ISO-8601 Created UTC</li>\n<li>Amount (with 6 decimals)</li>\n<li>Payee ID</li>\n<li>Payer ID</li>\n<li>Memo</li>\n<li>Payee ISO-8601 Updated UTC</li>\n<li>Payee Tag</li>\n<li>Payee Status (enum byte value)</li>\n<li>Payee Region</li>\n</ul>\n<p>** <code>Payer Signing Data</code> is defined as the following values:</p>\n<ul>\n<li>ISO-8601 Created UTC</li>\n<li>Amount (with 6 decimals)</li>\n<li>Payee ID</li>\n<li>Payer ID</li>\n<li>Memo</li>\n<li>Payer ISO-8601 Updated UTC</li>\n<li>Payer Tag</li>\n<li>Payer Status (enum byte value)</li>\n<li>Payer Region</li>\n</ul>\n<h5><a id=\"Example_806\"></a>Example</h5>\n<pre><code>VER: 1\nUTC: 2016-09-16T18:18:51\nAMNT: 2.000000\nMEMO: Thank you for shopping at blank\nPYR-ID: test2\nPYR-UTC: 2016-09-16T18:18:51\nPYR-REG: CA-NB\nPYR-STAT: Accept\nPYR-TAG: My Expenses, Some other tag\nPYR-SIG: l3cQFcSTPKte8SFgsCcT2nJ360j+pMooAjQ+BBgG62ccrOlejC26Fq/AzMVyHFT1VxIsdstfTnwX6Lg9EfwJ9NKFDlsBJVsqw2hsznD24HuB3yvRb+LIxbWrqsjSMEHCH4AsQ31FEDnYC0+5l8r/60ZUjZshJYH2snWBcmTIhwo=\nPYE-ID: test1\nPYE-UTC: 2016-09-16T18:19:51\nPYE-REG: CA-NS\nPYE-STAT: Accept\nPYE-TAG: Receipt #244788222\nPYE-SIG: o30hFX9ZC4vkrJsNaJzBbfH+XgOGTUN1xBvew0pA6JmOAXEfI7dVl6e+ZsJDHkP9vH91i/swEY3bt3gsv3GhLJPVPajp2d/LOGEgpGFJJRbQ8WDevISTpCJcif2Us7glBk0ZA9azJbCsLqcbXB1/d7RU1MqqGkaMII7L5g5buHk=\n</code></pre>\n<h5><a id=\"Transaction_rules_826\"></a>Transaction rules</h5>\n<ol>\n<li>\n<p><code>Created UTC</code>, <code>Amount</code>, <code>Payer ID</code>, <code>Payee ID</code> and <code>Payer Region</code> are required and read-only upon creation.</p>\n</li>\n<li>\n<p><code>Memo</code> is optional, but read-only upon creation, and must be no longer 255 UTF8 bytes in length.</p>\n</li>\n<li>\n<p>Payer/Payee tags must be no longer than 48 UTF-8 bytes in length.</p>\n</li>\n<li>\n<p><code>Payer Status</code> must be <code>Accept</code> during creation.</p>\n</li>\n<li>\n<p>The payer’s signature and updated utc is required in order to create a new transaction. This means that only Payers are allow to create a transaction.<br>\n<br>\nThis removes the potential for spamming of unwanted requests for payment. Payees may\ninstead request payment through the use of payment links or QR codes for minimal\nfriction during e-commerce or Point of Sale situations.<br>\n<br>\nDue to inevitability of malicious payment links intended to harvest pass phrases,\na reminder notice on the official <a href=\"https://civil.money\">https://civil.money</a> app educates people about\ndangers of following any payment links, and to pay special attention to the absence\nof address bars or the reminder itself during payment or Point of Sale.</p>\n</li>\n<li>\n<p>Payer/Payee Updated UTC must be greater than or equal to Created UTC.</p>\n</li>\n<li>\n<p>Transaction amount must be 6 decimal places. Therefore, the minimum transaction amount is 0.000001.</p>\n</li>\n<li>\n<p>A linear demurrage on the <code>Amount</code> begins 12 months after <code>Created UTC</code>, over a following 12 month period. <br>\n<br>\nThe function <code>DEPRECIATE()</code> is defined as:</p>\n<pre><code>ROUND(MIN(1, MAX(0, 1 - ( (DAYS-SINCE-CREATION - 365) / 365 ))) * AMOUNT, 6)\n</code></pre>\n<p><br>\nThis means that only your last two years of activity really matter, and your balance and credit score automatically\nrestores itself over time if you hit a financially rough spot.<br>\n<br>\nAlso, people cannot hoard vast sums of money, and are encouraged to spend\nearnings within their first 12 months, stimulating the economy.<br>\n<br>\nPeople who ping-pong money between accounts to get around the demurrage can be identified and should be frowned upon.</p>\n</li>\n<li>\n<p>The unique identifier for any transaction is the following utf-8 string:<br>\n<br>\n<code>Created Utc + &quot; &quot; + PayeeID + &quot; &quot; + PayerID</code>\n<br>\n<br>\nWith this ID scheme, Transaction IDs can be sorted naturally\nbased on their creation date, collision and exhaustion are impossible,\nand there is an implicit maximum of 1 transaction per second\nper payer/payee which has the added benefit of blocking non-productive High Frequency\nTrading.</p>\n</li>\n<li>\n<p>When payers issue a Dispute they get their money back, but the payee\nretains their money also, unless they choose to refund amicably. <br>\n<br>\nThis only works because non-refunded disputed transactions reflect\nbadly on the seller as well as the buyer. There is disincentive\non both sides to abuse it.</p>\n</li>\n<li>\n<p>The following payer/payee transaction states are allowed:</p>\n</li>\n</ol>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>PayerStatus</th>\n<th>Byte Value (during signing)</th>\n<th>Restrictions</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NotSet</td>\n<td>0</td>\n<td>Never Allowed</td>\n</tr>\n<tr>\n<td>Accept</td>\n<td>1</td>\n<td>Required during creation</td>\n</tr>\n<tr>\n<td>Dispute</td>\n<td>2</td>\n<td>Previous <code>PayerStatus</code> must be <code>Accept</code></td>\n</tr>\n<tr>\n<td>Cancel</td>\n<td>3</td>\n<td>Previous <code>PayerStatus</code> must be <code>Accept</code> and the current <code>PayeeStatus</code> must be in <code>NotSet</code></td>\n</tr>\n</tbody>\n</table>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>PayeeStatus</th>\n<th>Byte Value (during signing)</th>\n<th>Note</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NotSet</td>\n<td>0</td>\n<td>Required during creation.</td>\n</tr>\n<tr>\n<td>Decline</td>\n<td>1</td>\n<td>Previous <code>PayeeStatus</code> must be <code>NotSet</code></td>\n</tr>\n<tr>\n<td>Accept</td>\n<td>2</td>\n<td>Previous <code>PayeeStatus</code> must be <code>NotSet</code> or <code>Decline</code></td>\n</tr>\n<tr>\n<td>Refund</td>\n<td>3</td>\n<td>Previous <code>PayeeStatus</code> must be <code>Accept</code></td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"The_Vote_object_906\"></a>The Vote object</h4>\n<p>The Vote object schema is:</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Field</th>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>API Version</td>\n<td>VER</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Created UTC</td>\n<td>UTC</td>\n<td>ISO-8601 UTC date string</td>\n</tr>\n<tr>\n<td>Updated UTC</td>\n<td>UPD-UTC</td>\n<td>ISO-8601 UTC date string</td>\n</tr>\n<tr>\n<td>Voter ID</td>\n<td>VTR-ID</td>\n<td>The account ID of the voter</td>\n</tr>\n<tr>\n<td>Proposition ID</td>\n<td>PROP</td>\n<td>The proposition ID for the vote.</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>VOTE</td>\n<td>The boolean value of the vote. <code>1</code> or <code>0</code>*.</td>\n</tr>\n<tr>\n<td>Signature</td>\n<td>SIG</td>\n<td>base64 RSA signature of all UTF-8 encoded values in the Vote object.</td>\n</tr>\n</tbody>\n</table>\n<p>* By design propositions must be put to a vote in the form of a binary question (for or against.) This is to take potentially unfair “ranked order” voting procedures off the table.</p>\n<h5><a id=\"Example_921\"></a>Example</h5>\n<pre><code>VER: 1\nUTC: 2016-09-16T18:26:28\nUPD-UTC: 2016-09-16T18:26:28\nVOTE: 1\nPROP: 1\nVTR-ID: test1\nSIG: X3Vx9syas8LNqEURDemnUYGhkd451Dlkl/kJDXxZv37xcYKF6IdaD0wGEfhA/KMyo7XkrEfmhDui7pTrQ9KZbv+XCUKsjz9LNNXHikNDP2OHPlBIsjbhvAB53kb0nESeWMkmIJCXO2lQJHnOhH6RaVXVXFdIhnkuWJI+J0yKzd0=\n</code></pre>\n<h3><a id=\"CMResult_Status_Codes_932\"></a>CMResult Status Codes</h3>\n<p>Status codes are 32-bit hexadecimal integers. Negative signed integers are errors, positive integers are success. This scheme is similar to a Microsoft Windows HRESULT. The following status codes are defined.</p>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Value</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x0</td>\n<td>S_OK</td>\n<td>OK</td>\n</tr>\n<tr>\n<td>0x1</td>\n<td>S_False</td>\n<td>False</td>\n</tr>\n<tr>\n<td>0x2</td>\n<td>S_Item_Transient</td>\n<td>At least 1 copy of the item was found, but the minimum number of copies required are not met.</td>\n</tr>\n<tr>\n<td>0x80000000</td>\n<td>E_General_Failure</td>\n<td>General failure.</td>\n</tr>\n<tr>\n<td>0x80000001</td>\n<td>E_Not_Connected</td>\n<td>The web socket is not currently connected.</td>\n</tr>\n<tr>\n<td>0x80000002</td>\n<td>E_Timeout_Waiting_On_Reply</td>\n<td>Time-out waiting on a reply.</td>\n</tr>\n<tr>\n<td>0x80000003</td>\n<td>E_Invalid_Action</td>\n<td>Invalid action.</td>\n</tr>\n<tr>\n<td>0x80000004</td>\n<td>E_Item_Not_Found</td>\n<td>The item was not found.</td>\n</tr>\n<tr>\n<td>0x80000005</td>\n<td>E_Invalid_Request</td>\n<td>Invalid request.</td>\n</tr>\n<tr>\n<td>0x80000006</td>\n<td>E_Not_Enough_Peers</td>\n<td>There were not enough available peers to corroborate the request.</td>\n</tr>\n<tr>\n<td>0x80000007</td>\n<td>E_Invalid_Object_Path</td>\n<td>The requested GET or PUT path is not valid for the item provided.</td>\n</tr>\n<tr>\n<td>0x80000008</td>\n<td>E_Object_Superseded</td>\n<td>A newer version of this item is already being committed.</td>\n</tr>\n<tr>\n<td>0x80000009</td>\n<td>E_Max_Hops_Reached</td>\n<td>The maximum number of <abbr title=\"Distributed Hash Table\">DHT</abbr> peer hops have been reached.</td>\n</tr>\n<tr>\n<td>0x8000000A</td>\n<td>E_Connect_Attempt_Timeout</td>\n<td>Unable to connect to any servers within a reasonable time-out period.</td>\n</tr>\n<tr>\n<td>0x8000000B</td>\n<td>E_Invalid_Search_Date</td>\n<td>Invalid search date range.</td>\n</tr>\n<tr>\n<td>0x8000000C</td>\n<td>E_Unknown_API_Version</td>\n<td>Unknown API version.</td>\n</tr>\n<tr>\n<td>0x8000000D</td>\n<td>E_Operation_Cancelled</td>\n<td>The operation has been cancelled.</td>\n</tr>\n<tr>\n<td>0x80001000</td>\n<td>E_Crypto_Invalid_Password</td>\n<td>The specified password didn’t work for decryption.</td>\n</tr>\n<tr>\n<td>0x80001001</td>\n<td>E_Crypto_Unrecognized_SchemeID</td>\n<td>The account private key scheme ID is not recognised.</td>\n</tr>\n<tr>\n<td>0x80001002</td>\n<td>E_Crypto_Rfc2898_General_Failure</td>\n<td>Unable to obtain an encryption key using Rfc2898.</td>\n</tr>\n<tr>\n<td>0x80001003</td>\n<td>E_Crypto_RSA_Signing_General_Failure</td>\n<td>Unable to sign the data using RSA.</td>\n</tr>\n<tr>\n<td>0x80001004</td>\n<td>E_Crypto_RSA_Verify_General_Failure</td>\n<td>Unable to verify the data using RSA.</td>\n</tr>\n<tr>\n<td>0x80001005</td>\n<td>E_Crypto_RSA_Key_Gen_Failure</td>\n<td>Unable to generate an RSA key.</td>\n</tr>\n<tr>\n<td>0x80002000</td>\n<td>E_Account_Missing_Public_Key</td>\n<td>No valid public key was found on the account for the specified time.</td>\n</tr>\n<tr>\n<td>0x80002001</td>\n<td>E_Account_ID_Invalid</td>\n<td>The account ID is invalid.</td>\n</tr>\n<tr>\n<td>0x80002002</td>\n<td>E_Account_IDs_Are_Readonly</td>\n<td>Account IDs are read-only.</td>\n</tr>\n<tr>\n<td>0x80002003</td>\n<td>E_Account_Created_Utc_Out_Of_Range</td>\n<td>Created UTC is too far ahead of the server’s current time.</td>\n</tr>\n<tr>\n<td>0x80002004</td>\n<td>E_Account_Created_Utc_Is_Readonly</td>\n<td>Created UTC is read-only.</td>\n</tr>\n<tr>\n<td>0x80002005</td>\n<td>E_Account_Updated_Utc_Out_Of_Range</td>\n<td>Updated UTC is too far ahead of the server’s current time.</td>\n</tr>\n<tr>\n<td>0x80002006</td>\n<td>E_Account_Updated_Utc_Is_Old</td>\n<td>The account Updated UTC is out-dated. A newer copy exists.</td>\n</tr>\n<tr>\n<td>0x80002007</td>\n<td>E_Account_Too_Few_Public_Keys</td>\n<td>The number of public keys specified are less than the existing record’s.</td>\n</tr>\n<tr>\n<td>0x80002008</td>\n<td>E_Account_Cant_Corroborate</td>\n<td>Unable to corroborate account information with the network.</td>\n</tr>\n<tr>\n<td>0x80002009</td>\n<td>E_Account_Cant_Corroborate_Public_Keys</td>\n<td>Unable to corroborate account information with the network. The network’s copy has too fewer keys than the record provided.</td>\n</tr>\n<tr>\n<td>0x8000200A</td>\n<td>E_Account_Invalid_New_Public_Key_Date</td>\n<td>The newest public key entry must equal the account’s Updated UTC when adding new keys.</td>\n</tr>\n<tr>\n<td>0x8000200B</td>\n<td>E_Account_Public_Key_Mismatch</td>\n<td>One or more public keys do not match the existing account.</td>\n</tr>\n<tr>\n<td>0x8000200C</td>\n<td>E_Account_Public_Key_Signature_Error</td>\n<td>One of the public keys in the account have an invalid RSA signature.</td>\n</tr>\n<tr>\n<td>0x8000200D</td>\n<td>E_Account_Signature_Error</td>\n<td>The account RSA signature is invalid.</td>\n</tr>\n<tr>\n<td>0x8000200E</td>\n<td>E_Account_Invalid_Region</td>\n<td>Invalid account region specified.</td>\n</tr>\n<tr>\n<td>0x8000200F</td>\n<td>E_Account_Governing_Authority_Attribute_Required</td>\n<td>Account names that are equal to an ISO3166-2 subdivision code require a valid governing authority attribute.</td>\n</tr>\n<tr>\n<td>0x80003000</td>\n<td>E_Transaction_Payee_Not_Found</td>\n<td>The payee could not be found on the network.</td>\n</tr>\n<tr>\n<td>0x80003001</td>\n<td>E_Transaction_Payer_Not_Found</td>\n<td>The payer could not be found on the network.</td>\n</tr>\n<tr>\n<td>0x80003002</td>\n<td>E_Transaction_Invalid_Payee_Signature</td>\n<td>Invalid payee signature.</td>\n</tr>\n<tr>\n<td>0x80003003</td>\n<td>E_Transaction_Invalid_Payer_Signature</td>\n<td>Invalid payer signature.</td>\n</tr>\n<tr>\n<td>0x80003004</td>\n<td>E_Transaction_Payer_Signature_Required</td>\n<td>The payer’s signature is required.</td>\n</tr>\n<tr>\n<td>0x80003005</td>\n<td>E_Transaction_PayeeID_Required</td>\n<td>A payee ID is required.</td>\n</tr>\n<tr>\n<td>0x80003006</td>\n<td>E_Transaction_PayerID_Required</td>\n<td>A payer ID is required.</td>\n</tr>\n<tr>\n<td>0x80003007</td>\n<td>E_Transaction_Created_Utc_Out_Of_Range</td>\n<td>The transaction’s Created UTC time is out of range. Please check your device’s clock and try again.</td>\n</tr>\n<tr>\n<td>0x80003008</td>\n<td>E_Transaction_Payee_Updated_Utc_Out_Of_Range</td>\n<td>The payee’s updated UTC time must be greater than Created UTC.</td>\n</tr>\n<tr>\n<td>0x80003009</td>\n<td>E_Transaction_Payer_Updated_Utc_Out_Of_Range</td>\n<td>The payer’s updated UTC time must be greater than Created UTC.</td>\n</tr>\n<tr>\n<td>0x8000300A</td>\n<td>E_Transaction_Amount_Is_Readonly</td>\n<td>The transaction amount cannot be altered.</td>\n</tr>\n<tr>\n<td>0x8000300B</td>\n<td>E_Transaction_Created_Utc_Is_Readonly</td>\n<td>The transaction created UTC cannot be altered.</td>\n</tr>\n<tr>\n<td>0x8000300C</td>\n<td>E_Transaction_Payee_Is_Readonly</td>\n<td>The transaction payee cannot be altered.</td>\n</tr>\n<tr>\n<td>0x8000300D</td>\n<td>E_Transaction_Payer_Is_Readonly</td>\n<td>The transaction payer cannot be altered.</td>\n</tr>\n<tr>\n<td>0x8000300E</td>\n<td>E_Transaction_Memo_Is_Readonly</td>\n<td>The transaction memo cannot be altered.</td>\n</tr>\n<tr>\n<td>0x8000300F</td>\n<td>E_Transaction_Invalid_Amount</td>\n<td>The transaction amount is invalid.</td>\n</tr>\n<tr>\n<td>0x80003010</td>\n<td>E_Transaction_Payee_Region_Required</td>\n<td>A payee region is required.</td>\n</tr>\n<tr>\n<td>0x80003011</td>\n<td>E_Transaction_Payer_Region_Required</td>\n<td>A payer region is required.</td>\n</tr>\n<tr>\n<td>0x80003012</td>\n<td>E_Transaction_Payee_Region_Is_Readonly</td>\n<td>The payee region is read-only.</td>\n</tr>\n<tr>\n<td>0x80003013</td>\n<td>E_Transaction_Payer_Region_Is_Readonly</td>\n<td>The payer region is read-only.</td>\n</tr>\n<tr>\n<td>0x80003014</td>\n<td>E_Transaction_Payer_Accept_Status_Required</td>\n<td>The payer status must be set to Accept during initial creation.</td>\n</tr>\n<tr>\n<td>0x80003015</td>\n<td>E_Transaction_Payee_Status_Invalid</td>\n<td>The payee status must not be set without the payee’s signature.</td>\n</tr>\n<tr>\n<td>0x80003016</td>\n<td>E_Transaction_Payee_Status_Change_Not_Allowed</td>\n<td>The new payee status value is not permitted, based on its previous status.</td>\n</tr>\n<tr>\n<td>0x80003017</td>\n<td>E_Transaction_Payer_Status_Change_Not_Allowed</td>\n<td>The new payee status value is not permitted, based on its previous status.</td>\n</tr>\n<tr>\n<td>0x80003018</td>\n<td>E_Transaction_Payer_Payee_Must_Differ</td>\n<td>The payee and payer must be different accounts.</td>\n</tr>\n<tr>\n<td>0x80003019</td>\n<td>E_Transaction_Tag_Too_Long</td>\n<td>The payee and payer tags must be no more than 48 UTF8 bytes in length.</td>\n</tr>\n<tr>\n<td>0x8000301A</td>\n<td>E_Transaction_Memo_Too_Long</td>\n<td>The memo must be no more than 48 UTF8 bytes in length.</td>\n</tr>\n<tr>\n<td>0x80004000</td>\n<td>E_Vote_Account_Not_Found</td>\n<td>The vote account ID was not found.</td>\n</tr>\n<tr>\n<td>0x80004001</td>\n<td>E_Vote_Signature_Error</td>\n<td>The vote’s signature is invalid.</td>\n</tr>\n<tr>\n<td>0x80004003</td>\n<td>E_Vote_Created_Utc_Out_Of_Range</td>\n<td>Created UTC is too far ahead of the server’s current time.</td>\n</tr>\n<tr>\n<td>0x80004004</td>\n<td>E_Vote_Created_Utc_Is_Readonly</td>\n<td>Created UTC is read-only.</td>\n</tr>\n<tr>\n<td>0x80004005</td>\n<td>E_Vote_Updated_Utc_Out_Of_Range</td>\n<td>Updated UTC is too far ahead of the server’s current time.</td>\n</tr>\n<tr>\n<td>0x80004006</td>\n<td>E_Vote_Updated_Utc_Is_Old</td>\n<td>The vote Updated UTC is out-dated. A newer copy exists.</td>\n</tr>\n</tbody>\n</table>\n<h1><a id=\"Credits_and_Acknowledgements_1012\"></a>Credits and Acknowledgements</h1>\n<p>Civil Money would not exist without the work of these people.</p>\n<ul>\n<li>Ion Stoica, Robert Morris, David Karger, Frans Kaashoek, and Hari Balakrishnan for developing the <a href=\"https://en.wikipedia.org/wiki/Chord_(peer-to-peer)\">Chord <abbr title=\"Distributed Hash Table\">DHT</abbr></a> model.</li>\n<li><a href=\"http://bradconte.com\">Brad Conte</a> for his excellent series of succinct crypto library “reference” implementations, which are useful for lightweight cross platform testing.</li>\n<li>Nenad Vukicevic for <a href=\"https://github.com/vukicevic/crunch\">Crunch</a> - An arbitrary-precision integer arithmetic library for JavaScript.</li>\n<li>The good people over at <a href=\"http://bridge.net\">Bridge.NET</a>, which we’ve used to rapidly prototype the JavaScript front-end.</li>\n<li>The Microsoft <a href=\"https://github.com/dotnet/core\">.NET Core</a> team for providing a high performance truely cross-platform .NET development environment.</li>\n</ul>\n<h1><a id=\"License_1023\"></a>License</h1>\n<p>Civil Money is free and unencumbered software released into the public domain (<a href=\"http://unlicense.org\">unlicense.org</a>), unless otherwise denoted in the source file.</p>\n\r\n";
            }
        }
    });

    /**
     * Used to sign/authorise a Transaction status change.
     *
     * @class CM.Javascript.AuthorisePage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.AuthorisePage", {
        inherits: [CM.Javascript.Page],
        fields: {
            _Account: null,
            _ButtonsRow: null,
            _Form: null,
            _ID: null,
            _MainFeedback: null,
            _NewStatus: 0,
            _Previous: null,
            _ReturnButtons: null,
            _ToSign: null
        },
        props: {
            Title: {
                get: function () {
                    return this._ID;
                }
            },
            Url: {
                get: function () {
                    return System.String.concat("/", this._ID);
                }
            }
        },
        ctors: {
            $ctor2: function (id, newStatus, multipleSummaries) {
                CM.Javascript.AuthorisePage.ctor.call(this, id, newStatus);
                for (var i = 0; i < multipleSummaries.length; i = (i + 1) | 0) {
                    this._ToSign.add(new CM.Javascript.AuthorisePage.AuthItem.$ctor1(multipleSummaries[System.Array.index(i, multipleSummaries)]));
                }
            },
            $ctor1: function (id, newStatus, t) {
                CM.Javascript.AuthorisePage.ctor.call(this, id, newStatus);
                this._ToSign.add(new CM.Javascript.AuthorisePage.AuthItem.ctor(t));
            },
            ctor: function (id, newStatus) {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                this._ToSign = new (System.Collections.Generic.List$1(CM.Javascript.AuthorisePage.AuthItem))();
                this._ID = id;
                this._NewStatus = newStatus;
                this._Previous = CM.Javascript.App.Identity.CurrentPage;
            }
        },
        methods: {
            Build: function () {
                var $t;
                this.Element.className = "authorisepage";

                var title1 = null;
                var title2 = null;

                var isPayee = Bridge.referenceEquals(this._ID, this._ToSign.getItem(0).Payee);
                if (this._ToSign.Count === 1) {
                    title2 = isPayee ? this._ToSign.getItem(0).Payer : this._ToSign.getItem(0).Payee;
                } else {
                    title2 = "multiple transactions";
                }
                var total = System.Decimal(0);

                for (var i = 0; i < this._ToSign.Count; i = (i + 1) | 0) {
                    total = total.add(this._ToSign.getItem(i).Amount);
                }

                if (isPayee) {
                    var s = this._NewStatus & 255;
                    switch (s) {
                        case CM.Schema.PayeeStatus.Accept: 
                            title1 = "Accept money from";
                            break;
                        case CM.Schema.PayeeStatus.Decline: 
                            title1 = "Decline money from";
                            break;
                        case CM.Schema.PayeeStatus.Refund: 
                            title1 = "Refund money to";
                            break;
                    }
                } else {
                    var s1 = this._NewStatus & 255;
                    switch (s1) {
                        case CM.Schema.PayerStatus.Accept: 
                            title1 = "Accept money for";
                            break;
                        case CM.Schema.PayerStatus.Dispute: 
                            title1 = "Dispute money with";
                            break;
                        case CM.Schema.PayerStatus.Cancel: 
                            title1 = "Cancel money with";
                            break;
                    }
                }
                CM.BridgeHacks.H1(CM.BridgeHacks.Div(this.Element, "top"), System.String.concat(title1, " ", title2));


                this._MainFeedback = new CM.Javascript.Feedback(this.Element, true);
                this._ReturnButtons = CM.BridgeHacks.Div(this.Element);
                var serverStatus = CM.BridgeHacks.Div(this.Element, "statuses");

                this._Form = CM.BridgeHacks.Div(this.Element);
                this._Form.style.display = "none";

                for (var i1 = 0; i1 < this._ToSign.Count; i1 = (i1 + 1) | 0) {
                    var row = CM.BridgeHacks.Div(this._Form, "row");
                    var left = CM.BridgeHacks.Div(row, "cell-half");
                    var right = CM.BridgeHacks.Div(row, "cell-half");

                    CM.BridgeHacks.H3(left, CM.Javascript.Page.HtmlEncode(this._ToSign.getItem(i1).ID));
                    CM.BridgeHacks.Amount(CM.BridgeHacks.H2(left, ""), this._ToSign.getItem(i1).Amount, CM.Constants.Symbol, false);
                    CM.BridgeHacks.H3(right, System.String.concat(CM.Javascript.Assets.SVG.Tag.ToString(16, 16, "#000000"), " ", CM.Javascript.SR.LABEL_TAG));

                    this._ToSign.getItem(i1).TagBox = CM.BridgeHacks.TextBox(right, ""); // this will populate after load.
                    this._ToSign.getItem(i1).TagBox.placeholder = System.String.concat("(", CM.Javascript.SR.LABEL_OPTIONAL, ")");
                    this._ToSign.getItem(i1).TagBox.maxLength = 48;
                    this._ToSign.getItem(i1).ServerStatus = CM.BridgeHacks.Div(serverStatus, "statusvisual");
                }

                this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);
                var fa = ($t = new (CM.AsyncRequest$1(CM.Javascript.FindAccountRequest))(), $t.Item = new CM.Javascript.FindAccountRequest(this._ID), $t.OnComplete = Bridge.fn.bind(this, $asm.$.CM.Javascript.AuthorisePage.f1), $t);
                CM.Javascript.App.Identity.Client.TryFindAccount(fa);

                //_Form.H3(SR.LABEL_SECURITY);

                var reminder = CM.BridgeHacks.Div(this._Form, "reminder", CM.Javascript.SR.LABEL_CIVIL_MONEY_SECURITY_REMINDER);
                var confirm = CM.BridgeHacks.Div(this._Form, "confirm");
                var ch = CM.BridgeHacks.CheckBox(confirm, CM.Javascript.SR.HTML_IVE_CHECKED_MY_WEB_BROWSER_ADDRESS);

                var passRow = CM.BridgeHacks.Div(this._Form, "row");
                passRow.style.display = "none";
                CM.BridgeHacks.H3(passRow, CM.Javascript.SR.LABEL_SECRET_PASS_PHRASE);
                var pass = CM.BridgeHacks.Password(passRow);
                this._ButtonsRow = CM.BridgeHacks.Div(this.Element, "button-row");
                var submit = CM.BridgeHacks.Button(this._ButtonsRow, CM.Javascript.SR.LABEL_CONTINUE, Bridge.fn.bind(this, function (e) {
                    this._Form.style.display = "none";
                    this._ButtonsRow.style.display = "none";

                    var sign = new (CM.AsyncRequest$1(CM.Schema.DataSignRequest))();
                    sign.Item = new CM.Schema.DataSignRequest.ctor();
                    for (var i2 = 0; i2 < this._ToSign.Count; i2 = (i2 + 1) | 0) {
                        var item = this._ToSign.getItem(i2);
                        CM.BridgeHacks.Clear(item.ServerStatus);
                        var t = item.Trans;
                        if (isPayee) {
                            // payee side
                            t.PayeeTag = item.TagBox.value;
                            t.PayeeStatus = this._NewStatus & 255;
                            t.PayeeUpdatedUtc = System.DateTime.getUtcNow();
                            if (t.PayeeRegion == null) {
                                t.PayeeRegion = this._Account.Iso31662Region;
                            }
                            item.Transform = new CM.Schema.DataSignRequest.Transform(t.GetPayeeSigningData());
                        } else {
                            t.PayerTag = item.TagBox.value;
                            t.PayerStatus = this._NewStatus & 255;
                            t.PayerUpdatedUtc = System.DateTime.getUtcNow();
                            if (t.PayerRegion == null) {
                                t.PayerRegion = this._Account.Iso31662Region;
                            }
                            item.Transform = new CM.Schema.DataSignRequest.Transform(t.GetPayerSigningData());
                        }
                        sign.Item.Transforms.add(item.Transform);
                    }
                    sign.Item.Password = System.Text.Encoding.UTF8.GetBytes(pass.value);
                    sign.OnComplete = Bridge.fn.bind(this, function (req) {
                        if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK, " ..."));
                            var completed = 0;
                            for (var i3 = 0; i3 < this._ToSign.Count; i3 = (i3 + 1) | 0) {
                                var item1 = this._ToSign.getItem(i3);
                                if (isPayee) {
                                    item1.Trans.PayeeSignature = item1.Transform.Output;
                                } else {
                                    item1.Trans.PayerSignature = item1.Transform.Output;
                                }
                                item1.BeginCommit(Bridge.fn.bind(this, function (sender, hr) {
                                    completed = (completed + 1) | 0;
                                    if (completed === this._ToSign.Count) {
                                        this.OnAllTransactionsCommitted();
                                    }
                                }));
                            }
                        } else {
                            this._Form.style.display = "block";
                            this._ButtonsRow.style.display = "block";
                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_STATUS_SIGNING_FAILED);
                        }
                    });

                    this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_SIGNING_INFORMATION, " ..."));

                    this._Account.SignData(sign, CM.Javascript.JSCryptoFunctions.Identity);
                }), "green-button");
                submit.style.display = "none";

                CM.BridgeHacks.Button(this._ButtonsRow, CM.Javascript.SR.LABEL_CANCEL, Bridge.fn.bind(this, $asm.$.CM.Javascript.AuthorisePage.f2));
                ch.onchange = function (e) {
                    passRow.style.display = ch.checked ? "block" : "none";
                    submit.style.display = ch.checked ? "inline" : "none";
                    reminder.style.display = ch.checked ? "none" : "block";
                    confirm.style.display = ch.checked ? "none" : "block";
                    pass.focus();
                };
                for (var i2 = 0; i2 < ((this._ToSign.Count - 1) | 0); i2 = (i2 + 1) | 0) {
                    CM.BridgeHacks.OnEnterKeySetFocus(this._ToSign.getItem(i2).TagBox, this._ToSign.getItem(((i2 + 1) | 0)).TagBox);
                }
                //_ToSign[_ToSign.Count - 1].TagBox.OnEnterKeySetFocus(ch);
                CM.BridgeHacks.OnEnterKey(pass, Bridge.fn.cacheBind(submit, submit.click));
            },
            OnRemoved: function () {
                CM.Javascript.Page.prototype.OnRemoved.call(this);
            },
            OnAllTransactionsCommitted: function () {
                CM.Javascript.AccountPage.Prefetched = null; // Balance will probably have changed

                // So what happened?
                var didAllTransactionWork = true;
                var didAllFail = true;
                for (var i = 0; i < this._ToSign.Count; i = (i + 1) | 0) {
                    if (CM.CMResult.op_Inequality(this._ToSign.getItem(i).CommitStatus.$clone(), CM.CMResult.S_OK.$clone())) {
                        didAllTransactionWork = false;
                    } else {
                        didAllFail = false;
                        // Update any successful transactions that are on display.
                        if (Bridge.is(this._Previous, CM.Javascript.AccountPage)) {
                            Bridge.cast(this._Previous, CM.Javascript.AccountPage).OnTransactionChanged(this._ToSign.getItem(i).Trans);
                        } else if (Bridge.is(this._Previous, CM.Javascript.TransactionPage)) {
                            Bridge.cast(this._Previous, CM.Javascript.TransactionPage).OnTransactionChanged(this._ToSign.getItem(i).Trans);
                        }
                    }
                }
                if (this._ToSign.Count === 1) {
                    // Only 1 transaction, simple..
                    if (didAllTransactionWork) {
                        this._MainFeedback.Set(CM.Javascript.Assets.SVG.CircleTick, CM.Javascript.FeedbackType.Success, CM.Javascript.SR.LABEL_STATUS_TRANSACTION_UPDATED_SUCCESSFULLY);
                        var options = CM.BridgeHacks.Div(this._ReturnButtons, "button-row center");
                        CM.BridgeHacks.Button(options, CM.Javascript.SR.LABEL_STATUS_OK, Bridge.fn.bind(this, $asm.$.CM.Javascript.AuthorisePage.f3));
                    } else {
                        this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, ": ", CM.BridgeHacks.GetLocalisedDescription(this._ToSign.getItem(0).CommitStatus)));
                        this._Form.style.display = "block";
                        this._ButtonsRow.style.display = "block";
                    }
                } else {
                    // For a multi-transaction situation try to summarise
                    // the outcome, but basically if there's a mix of OK/failed
                    // commits, they need to start over.
                    if (didAllFail) {
                        // In this case the password was probably wrong, or they were
                        // offline, we can let them retry.
                        this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_STATUS_NO_TRANSACTIONS_UPDATED);
                        this._Form.style.display = "block";
                        this._ButtonsRow.style.display = "block";
                    } else {
                        if (didAllTransactionWork) {
                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.CircleTick, CM.Javascript.FeedbackType.Success, CM.Javascript.SR.LABEL_STATUS_ALL_TRANSACTIONS_UPDATED);
                        } else {
                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_STATUS_SOME_TRANSACTIONS_FAILED);
                        }
                        var options1 = CM.BridgeHacks.Div(this._ReturnButtons, "button-row center");
                        CM.BridgeHacks.Button(options1, CM.Javascript.SR.LABEL_STATUS_OK, Bridge.fn.bind(this, $asm.$.CM.Javascript.AuthorisePage.f3));
                    }
                }
            }
        }
    });

    Bridge.ns("CM.Javascript.AuthorisePage", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.AuthorisePage, {
        f1: function (a) {
            if (a.Result.Success) {
                this._Account = a.Item.Output;
                // Load all signing transactions
                var loaded = 0;
                for (var i2 = 0; i2 < this._ToSign.Count; i2 = (i2 + 1) | 0) {
                    this._ToSign.getItem(i2).OnLoaded = Bridge.fn.bind(this, function (item, hr) {
                        if (item.Trans == null) {
                            // Couldn't load one of the transactions. User should cancel out.
                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, " [", item.ID, "]: ", CM.BridgeHacks.GetLocalisedDescription(hr)));
                        } else {
                            loaded = (loaded + 1) | 0;
                            // persist the tag(s)
                            item.TagBox.value = Bridge.referenceEquals(item.Payee, this._ID) ? item.Trans.PayeeTag : item.Trans.PayerTag;
                        }
                        if (loaded === this._ToSign.Count) {
                            // Everything loaded correctly. Proceed.
                            this._Form.style.display = "block";
                            this._MainFeedback.Hide();
                        }
                    });
                    this._ToSign.getItem(i2).BeginLoad();
                }
            } else {
                this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, ": ", CM.BridgeHacks.GetLocalisedDescription(a.Result)));
            }
        },
        f2: function (e) {
            CM.Javascript.App.Identity.CurrentPage = this._Previous;
        },
        f3: function (x) {
            if (Bridge.is(this._Previous, CM.Javascript.AccountPage)) {
                Bridge.cast(this._Previous, CM.Javascript.AccountPage).RefreshBalance();
            }
            CM.Javascript.App.Identity.CurrentPage = this._Previous;
        }
    });

    /**
     * The help page covers basic contact info as well as instructions for contributing or setting
     up a server.
     *
     * @class CM.Javascript.HelpPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.HelpPage", {
        inherits: [CM.Javascript.Page],
        props: {
            Title: {
                get: function () {
                    return CM.Javascript.SR.TITLE_HELP;
                }
            },
            Url: {
                get: function () {
                    return "/help";
                }
            }
        },
        methods: {
            Build: function () {
                this.Element.className = "helppage";
                CM.BridgeHacks.H1(this.Element, CM.Javascript.SR.TITLE_HELP);
                CM.BridgeHacks.Div(this.Element, "para", CM.Javascript.SR.LABEL_HELP_INTRO);
                CM.BridgeHacks.Button(CM.BridgeHacks.Div(this.Element, "para"), "english@civil.money", $asm.$.CM.Javascript.HelpPage.f1);

                CM.BridgeHacks.Div(this.Element, "para regret", CM.Javascript.SR.LABEL_HELP_IN_ENGLISH_ONLY);

                CM.BridgeHacks.H1(this.Element, CM.Javascript.SR.TITLE_SOURCE_CODE);
                CM.BridgeHacks.Div(this.Element, "para", CM.Javascript.SR.LABEL_SOURCE_CODE_INTRO);
                var buttons = CM.BridgeHacks.Div(this.Element, "");
                CM.BridgeHacks.Button$1(buttons, "Read the API", "/api");
                CM.BridgeHacks.Span(buttons, "&nbsp;");
                CM.BridgeHacks.Button(buttons, "Open on GitHub", $asm.$.CM.Javascript.HelpPage.f2);

                //Element.H1(SR.TITLE_ABOUT);
                //Element.Div("para", SR.HTML_ABOUT);

                CM.BridgeHacks.H1(this.Element, CM.Javascript.SR.TITLE_GET_INVOLVED);
                CM.BridgeHacks.Div(this.Element, "para", CM.Javascript.SR.LABEL_GET_INVOLVED_INTRO);
                CM.BridgeHacks.Button(CM.BridgeHacks.Div(this.Element, "para"), "hello@civil.money", $asm.$.CM.Javascript.HelpPage.f3);

                CM.BridgeHacks.H1(this.Element, CM.Javascript.SR.TITLE_INSTALL_A_SERVER);
                // To generate this HTML we're using:
                // http://dillinger.io/
                CM.BridgeHacks.Div(this.Element, "markdown", "\n\n<p>The more servers, the stronger and more resilient the Civil Money network can become.<br>\nIf you are in possession of a Windows or Ubuntu server with a permanent IP address and<br>\nreliable high bandwidth network connection, please feel free to install an instance in order to help out.</p>\n<blockquote>\n<p>We apologise that the following installation instructions are available in English only.</p>\n</blockquote>\n<h3><a id=\"Ubuntu_Linux_9\"></a>Ubuntu Linux</h3>\n<p>We have an apt repository to make setup fairly simple, however each Ubuntu version has a slightly different<br>\n.NET Core repository list.</p>\n<pre><code># 1. We need HTTPS and the appropriate .NET Core list from Microsoft.\n$ sudo apt-get install apt-transport-https\n</code></pre>\n<h4><a id=\"164_LTS_18\"></a>16.4 LTS</h4>\n<pre><code>$ sudo sh -c 'echo &quot;deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main&quot; &gt; /etc/apt/sources.list.d/dotnetdev.list'\n</code></pre>\n<h4><a id=\"1610_LTS_23\"></a>16.10 LTS</h4>\n<pre><code>$ sudo sh -c 'echo &quot;deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ yakkety main&quot; &gt; /etc/apt/sources.list.d/dotnetdev.list'\n</code></pre>\n<p><em>For other/future versions, check out <a href=\"https://www.microsoft.com/net/core\">https://www.microsoft.com/net/core</a> for installation instructions.</em></p>\n<pre><code># 2. Add .NET Core keys from Microsoft.\r\n$ sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\n\n# 3. Configure Civil Money list and keys\n$ sudo echo &quot;deb [arch=amd64] https://update.civil.money/api/get-repo/ stable main&quot; | sudo tee -a /etc/apt/sources.list\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 9DAB6D5065655BBC96ADA0855D7FBDB485BE2421\n\n# 4. Update and install\n$ sudo apt-get update\n$ sudo apt-get install civilmoney\n\n# 5. Start the supervisor service\n$ sudo systemctl restart supervisor\n\n# 6. Make sure the server is running OK\n$ sudo tail -f /var/log/civilmoney.out.log\n</code></pre>\n<p><strong>Please always check</strong> the log output after 1 minute to make sure you have a Predecessor (which implies that inbound connections are working through your NAT.)</p>\n<blockquote>\n<p><strong>HINT:</strong> You should be able to visit <a href=\"https://127-0-0-1.untrusted-server.com:8000\">https://127-0-0-1.untrusted-server.com:8000</a> and see an instance of the Civil Money website running off of your server. Replace “127-0-0-1” with the external IP address integers of your server when testing for external connectivity.</p>\n</blockquote>\n<h4><a id=\"Other_LinuxUnix_DistrosMac_OSX_52\"></a>Other Linux/Unix Distros/Mac OSX</h4>\n<p>If you’re a savvy unix administrator or running something like a Mac server, you can follow Microsoft’s <a href=\"https://www.microsoft.com/net/core\">.NET Core</a> setup instructions and download/extract the standard <a href=\"https://update.civil.money/api/get-repo/civilmoney_1.2.zip\">Civil Money binary</a> and run <code>dotnet CM.Daemon.dll</code> directly.</p>\n<h3><a id=\"Windows_55\"></a>Windows</h3>\n<p>Windows setup is pretty straight forward, but you need to install the .NET Core 1.1 prerequisite.</p>\n<ol>\n<li>Install the <a href=\"https://go.microsoft.com/fwlink/?LinkID=835014\">.NET Core SDK 1.1</a></li>\n<li>Download the <a href=\"https://update.civil.money/api/get-repo/civilmoney_1.2.zip\">Civil Money binary</a> and unzip the contents into a folder location on your server.</li>\n<li>Open an elevated command prompt:</li>\n</ol>\n<pre><code>&gt; cd &lt;your unzipped folder location&gt;\n</code></pre>\n<p>If you prefer to NOT run the server as a Windows Service just yet, or want to try it out temporarily to make sure things are configured OK, you can simply run:</p>\n<pre><code>&gt; dotnet CM.Daemon.dll\n</code></pre>\n<p>If you’re ready to install Civil Money as a permanent Windows Service, simply run:</p>\n<pre><code>&gt; dotnet CM.Daemon.dll --install\n</code></pre>\n<p>To uninstall the Windows Service you can run:</p>\n<pre><code>&gt; dotnet CM.Daemon.dll --uninstall\n</code></pre>\n<ol start=\"4\">\n<li>Check the log. When running as a background Windows Service you’ll want to check on the log to make sure that everything is OK. A rolling log window is written to the <code>log.txt</code> file next to the CM.Daemon.dll. This file contains the application’s log output in “newest first” order for convenience.</li>\n</ol>\n<p><strong>Please always check</strong> the log output after 1 minute to make sure you have a Predecessor (which implies that inbound connections are working through your NAT.)</p>\n<blockquote>\n<p><strong>HINT:</strong> You should be able to visit <a href=\"https://127-0-0-1.untrusted-server.com:8000\">https://127-0-0-1.untrusted-server.com:8000</a> and see an instance of the Civil Money website running off of your server. Replace “127-0-0-1” with the external IP address integers of your server when testing for external connectivity.</p>\n</blockquote>\n<h3><a id=\"Customising_the_configuration_83\"></a>Customising the configuration</h3>\n<p>All settings are in the <code>settings.json</code> file which is side-by-side the <code>CM.Daemon.dll</code>. On Linux, if installed through apt, this will be under <code>/var/civilmoney</code>.</p>\n<p>The default settings look like this:</p>\n<pre><code>{\n  &quot;Settings&quot;: {\n    &quot;Port&quot;: 8000,\n    &quot;Seeds&quot;: &quot;seed1.civil.money,seed2.civil.money,seed3.civil.money,seed4.civil.money&quot;,\n    &quot;DataFolder&quot;: &quot;cm-data&quot;,\n    &quot;AuthoritativePfxCertificate&quot;: &quot;&quot;,\n    &quot;AuthoritativePfxPassword&quot;: &quot;&quot;,\n    &quot;EnableAuthoritativeDomainFeatures&quot;: false,\n    &quot;EnablePort80Redirect&quot;: false\n  }\n}\n\n</code></pre>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Port</td>\n<td>If another web server (Apache, IIS, etc) is not installed and already using port 443, you may run the service under <code>root</code> on Linux or <code>LocalSystem</code> on Windows in order to bind 443, and then change the port in the configuration to 443. For Linux you need to edit <code>/etc/supervisor/conf.d/civilmoney.conf</code>, change its user string to <code>root</code> and then <code>systemctl restart supervisor</code>. For Windows, assuming IIS has not bound the port already, simply changing the port to 443 should be all you need. You will receive start-up errors if the server is unable to bind.</td>\n</tr>\n<tr>\n<td>Seeds</td>\n<td>A comma delimited list of known well behaved peers. To eliminate a single point of failure, the Civil Money community may establish seed listings online which are based on IPs.</td>\n</tr>\n<tr>\n<td>DataFolder</td>\n<td>A path to a suitable folder for data storage. By default data is kept in a folder beside the <code>CM.Daemon.dll</code>.</td>\n</tr>\n<tr>\n<td>AuthoritativePfxCertificate</td>\n<td>Only used by official Civil Money seeds.</td>\n</tr>\n<tr>\n<td>AuthoritativePfxPassword</td>\n<td>Only used by official Civil Money seeds.</td>\n</tr>\n<tr>\n<td>EnableAuthoritativeDomainFeatures</td>\n<td>Only used by official Civil Money seeds. Enabling this will not have any impact on the network, however your server will do some periodic unnecessary extra work and also attempt to act as an (unused) DNS server for <code>*.untrusted-domain.com</code>.</td>\n</tr>\n<tr>\n<td>EnablePort80Redirect</td>\n<td>Only used by official Civil Money seeds. When enabled the server will attempt to bind the regular HTTP port 80 and redirect all requests over to 443 for SSL.</td>\n</tr>\n</tbody>\n</table>\r\n");
            }
        }
    });

    Bridge.ns("CM.Javascript.HelpPage", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.HelpPage, {
        f1: function (e) {
            window.open("mailto:english@civil.money");
        },
        f2: function (e) {
            window.open("https://github.com/civilmoney/Reference-Implementation");
        },
        f3: function (e) {
            window.open("mailto:hello@civil.money");
        }
    });

    /**
     * A page for providing quick access to previously viewed accounts.
     *
     * @class CM.Javascript.HistoryPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.HistoryPage", {
        inherits: [CM.Javascript.Page],
        props: {
            Title: {
                get: function () {
                    return CM.Javascript.SR.TITLE_HISTORY;
                }
            },
            Url: {
                get: function () {
                    return "/history";
                }
            }
        },
        methods: {
            Build: function () {
                this.Element.className = "historypage";
                CM.BridgeHacks.H1(this.Element, CM.Javascript.SR.TITLE_HISTORY);
                CM.BridgeHacks.Div(this.Element, null, "");
                var ar = CM.Javascript.HistoryManager.Instance.History;
                if (ar.length === 0) {
                    CM.BridgeHacks.H4(this.Element, CM.Javascript.SR.LABEL_HISTORY_NO_ITEMS);
                } else {
                    for (var i = 0; i < ar.length; i = (i + 1) | 0) {
                        CM.BridgeHacks.A$1(CM.BridgeHacks.Div(this.Element, "item"), CM.Javascript.Page.HtmlEncode(ar[System.Array.index(i, ar)]), System.String.concat("/", ar[System.Array.index(i, ar)]));
                    }
                }
            }
        }
    });

    /**
     * This is the main landing page for the web browser client.
     *
     * @class CM.Javascript.HomePage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.HomePage", {
        inherits: [CM.Javascript.Page],
        props: {
            Title: {
                get: function () {
                    return CM.Javascript.SR.TITLE_CIVIL_MONEY;
                }
            },
            Url: {
                get: function () {
                    return "/";
                }
            }
        },
        methods: {
            Build: function () {
                var $t;
                var page = CM.BridgeHacks.Div(this.Element, "homepage");

                // Alternative option for a coloured logo. Kind of prefer the monochrome here.
                // string svgHtml = Bridge.Browser.IsIE ? "<object type=\"image/svg+xml\" data=\"/cmlogo.svg\" height=\"50\" /></object>"
                //   : "<img type=\"image/svg+xml\" src=\"/cmlogo.svg\" height=\"50\" />";

                CM.BridgeHacks.Div(page, "center", CM.Javascript.Assets.SVG.Logo.ToString(200, 50, "#000000")); // svgHtml);
                //Element.Div("center", SR.LABEL_CIVIL_MONEY_SUB_HEADING);

                var search = CM.BridgeHacks.Div(page, "search");
                var accc = new CM.Javascript.AccountInputBox(search, null, true);
                accc.Element.firstChild.insertBefore(($t = document.createElement('div'), $t.innerHTML = CM.Javascript.Assets.SVG.Search.ToString(20, 20, "#ccc"), $t.className = "icon", $t), accc.Element.firstChild.firstChild);

                var noAccount = CM.BridgeHacks.Div(this.Element, "noaccountfooter");
                CM.BridgeHacks.Div(noAccount, null, CM.Javascript.SR.HTML_CIVIL_MONEY_PROVIDES);
                var buttons = CM.BridgeHacks.Div(noAccount, "buttons");
                CM.BridgeHacks.Button$1(buttons, CM.Javascript.SR.LABEL_CREATE_MY_ACCOUNT, "/register", "blue-button");
                CM.BridgeHacks.Span(buttons, System.String.concat(" ", CM.Javascript.SR.LABEL_OR, " "));
                CM.BridgeHacks.Button$1(buttons, CM.Javascript.SR.LABEL_LEARN_MORE, "/about");
            }
        }
    });

    /**
     * For a 404 type of response.
     *
     * @class CM.Javascript.InvalidPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.InvalidPage", {
        inherits: [CM.Javascript.Page],
        fields: {
            _Path: null
        },
        props: {
            Title: {
                get: function () {
                    return CM.Javascript.SR.TITLE_NOT_FOUND;
                }
            },
            Url: {
                get: function () {
                    return this._Path;
                }
            }
        },
        ctors: {
            ctor: function (path) {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                this._Path = path;
            }
        },
        methods: {
            Build: function () {
                this.Element.className = "notfoundpage";
                CM.BridgeHacks.H1(this.Element, CM.Javascript.SR.TITLE_NOT_FOUND);
                CM.BridgeHacks.Div(this.Element, null, CM.Javascript.SR.LABEL_LINK_APPEARS_TO_BE_INVALID);
            }
        }
    });

    /**
     * Crypto functions which are offloaded to webworkers.js.
     *
     * @class CM.Javascript.JSCryptoFunctions
     * @implements  CM.ICryptoFunctions
     */
    Bridge.define("CM.Javascript.JSCryptoFunctions", {
        inherits: [CM.ICryptoFunctions],
        statics: {
            fields: {
                Identity: null
            },
            ctors: {
                init: function () {
                    this.Identity = new CM.Javascript.JSCryptoFunctions();
                }
            }
        },
        alias: [
            "BeginAESDecrypt", "CM$ICryptoFunctions$BeginAESDecrypt",
            "BeginAESEncrypt", "CM$ICryptoFunctions$BeginAESEncrypt",
            "BeginRFC2898", "CM$ICryptoFunctions$BeginRFC2898",
            "BeginRSAKeyGen", "CM$ICryptoFunctions$BeginRSAKeyGen",
            "BeginRSASign", "CM$ICryptoFunctions$BeginRSASign",
            "BeginRSAVerify", "CM$ICryptoFunctions$BeginRSAVerify",
            "MD5Hash", "CM$ICryptoFunctions$MD5Hash",
            "SHA256Hash", "CM$ICryptoFunctions$SHA256Hash"
        ],
        methods: {
            BeginAESDecrypt: function (e) {
                var r = e.Item;
                
if(window.Worker) {
                var worker = new Worker('/webworkers.js');
                worker.onmessage = function (msg) {
                    var status = JSON.parse(msg.data);
                    if(status.error) {
                        e.Completed(CM.CMResult.E_Crypto_Invalid_Password.$clone());
                        console.log('BeginRFC2898: '+status.error);
                    } else if (status.result) {
                        r.Output = status.result;
                        e.Completed(CM.CMResult.S_OK.$clone());
                    }
                };
                var args =  {'command': 'aes-decrypt', key: r.Key, iv: r.IV, input: r.Input };
                worker.postMessage(JSON.stringify(args));
} else {;
                try {
                    r.Output = CM.Cryptography.AES.Decrypt(r.Input, r.Key, r.IV);
                    e.Completed(CM.CMResult.S_OK.$clone());
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    e.Completed(CM.CMResult.E_Crypto_Invalid_Password.$clone());
                }
                };
            },
            BeginAESEncrypt: function (e) {
                var r = e.Item;
                
if(window.Worker) {
                var worker = new Worker('/webworkers.js');
                worker.onmessage = function (msg) {
                    var status = JSON.parse(msg.data);
                    if(status.error) {
                        e.Completed(CM.CMResult.E_Crypto_Invalid_Password.$clone());
                        console.log('BeginRFC2898: '+status.error);
                    } else if (status.result) {
                        r.Output = status.result;
                        e.Completed(CM.CMResult.S_OK.$clone());
                    }
                };
                var args =  {'command': 'aes-encrypt', key: r.Key, iv: r.IV, input: r.Input };
                worker.postMessage(JSON.stringify(args));
} else {
;
                r.Output = CM.Cryptography.AES.Encrypt(r.Input, r.Key, r.IV);
                e.Completed(CM.CMResult.S_OK.$clone());
                };
            },
            BeginRFC2898: function (e) {
                var r = e.Item;
                
if(window.Worker) {
                var worker = new Worker('/webworkers.js');
                worker.onmessage = function (msg) {
                    var status = JSON.parse(msg.data);
                    if(status.error) {
                        e.Completed(CM.CMResult.E_Crypto_Rfc2898_General_Failure.$clone());
                        console.log('BeginRFC2898: '+status.error);
                    } else if (status.result) {
                        r.OutputIV = status.result.iv;
                        r.OutputKey = status.result.key;
                        e.Completed(CM.CMResult.S_OK.$clone());
                    }
                };
                var args =  {'command': 'rfc2898', password: r.Password, salt: r.Salt, iterations: r.Iterations };
                worker.postMessage(JSON.stringify(args));
} else {
;
                var rfc = CM.Cryptography.Rfc2898.CreateHMACSHA1(r.Password, r.Salt, r.Iterations);
                r.OutputKey = rfc.GetBytes(32);
                r.OutputIV = rfc.GetBytes(16);
                e.Completed(CM.CMResult.S_OK.$clone());
                };
            },
            BeginRSAKeyGen: function (e) {
                var r = e.Item;
                
if (window.Worker) {
                var worker = new Worker('/webworkers.js');
                worker.onmessage = function (msg) {
                    var status = JSON.parse(msg.data);
                    if(status.error) {
                        e.Completed(CM.CMResult.E_Crypto_RSA_Key_Gen_Failure.$clone());
                    } else if (status.result) {
                        r.Output = status.result;
                        e.Completed(CM.CMResult.S_OK.$clone());
                    }
                };
                // No window.crypto in web workers, have to do it here..
                var p = new Uint8Array(64);
                var q = new Uint8Array(64);
                (window.crypto || window.msCrypto).getRandomValues(p);
                (window.crypto || window.msCrypto).getRandomValues(q);
                var args =  {'command': 'generate-rsa', p: Array.prototype.slice.call(p), q: Array.prototype.slice.call(q) };
                var str = JSON.stringify(args);
                worker.postMessage(str);
} else {
                // If there's no webworker, there's probably no
                // Uint8Array/window.crypto either.
;
                var tmp = System.Array.init(128, 0, System.Byte);
                CM.Cryptography.RNG.RandomBytes(tmp);
                
                var p = [];
                var q = [];
                for(var i=0;i<64;i++){
                    p.push(tmp[i]);
                    q.push(tmp[i+64]);
                }
                var crunch = new Crunch();
                p = crunch.nextPrime(Array.prototype.slice.call(p));
                q = crunch.nextPrime(Array.prototype.slice.call(q));
                var exp = [1, 0, 1];
                var n = crunch.mul(p, q);
                var f = crunch.mul(crunch.decrement(p), crunch.decrement(q));
                var d = crunch.cut(crunch.inv(exp, f));
                r.Output = { D: d, Modulus: n, Exponent: exp };
                e.Completed(CM.CMResult.S_OK.$clone());
}
            ;
            },
            BeginRSASign: function (e) {
                var hashed = CM.Cryptography.SHA256.ComputeHash(e.Item.Input);
                var priv = e.Item.PrivateKey;
                var pub = e.Item.PublicKey;
                if (priv.length !== pub.length) {
                    // If the key lengths don't match then AES decryption padding worked by chance
                    // with the wrong outcome.
                    e.Completed(CM.CMResult.E_Crypto_Invalid_Password.$clone());
                    return;
                }
                var c = CM.Cryptography.RSA.EMSA_PKCS1_v1_5Encode_256(hashed, priv.length);
                var sig = null;
                
            var crunch = new Crunch();
            sig = crunch.exp(c, priv, pub);
            while (sig.length < priv.length)
                sig.splice(0, 0, 0);
            
                e.Item.OutputSignature = sig;
                e.Completed(CM.CMResult.S_OK.$clone());
            },
            BeginRSAVerify: function (e) {
                var hashed = CM.Cryptography.SHA256.ComputeHash(e.Item.Input);
                var signature = e.Item.InputSignature;
                var exponent = CM.Constants.StandardExponent65537;
                var publicKey = e.Item.PublicKey;
                var dec = null;
                
            var crunch = new Crunch();
            dec = crunch.exp(signature, exponent, publicKey);
            while (dec.length < publicKey.length)
                dec.splice(0, 0, 0);
            
                var expected = CM.Cryptography.RSA.EMSA_PKCS1_v1_5Encode_256(hashed, publicKey.length);
                var res = CM.Helpers.IsHashEqual(expected, dec) ? CM.CMResult.S_OK.$clone() : CM.CMResult.S_False.$clone();
                e.Completed(res.$clone());
            },
            MD5Hash: function (b) {
                return CM.Cryptography.MD5.ComputeHash(b);
            },
            SHA256Hash: function (b) {
                return CM.Cryptography.SHA256.ComputeHash(b);
            }
        }
    });

    /**
     * Language selection page.
     *
     * @class CM.Javascript.LanguagePage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.LanguagePage", {
        inherits: [CM.Javascript.Page],
        props: {
            Title: {
                get: function () {
                    return CM.Javascript.SR.TITLE_CHOOSE_YOUR_LANGUAGE;
                }
            },
            Url: {
                get: function () {
                    return "/language";
                }
            }
        },
        methods: {
            Build: function () {
                var $t, $t1;
                this.Element.className = "languagepage";
                CM.BridgeHacks.H1(this.Element, CM.Javascript.SR.TITLE_CHOOSE_YOUR_LANGUAGE);

                $t = Bridge.getEnumerator(CM.Javascript.SR.Langauges);
                try {
                    while ($t.moveNext()) {
                        var kp = $t.Current;
                        ($t1 = CM.BridgeHacks.A(CM.BridgeHacks.Div(this.Element), kp.value, Bridge.fn.cacheBind(this, this.OnLanguage))).lan = kp.key;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }CM.BridgeHacks.H4(this.Element, CM.Javascript.SR.LABEL_CHOOSE_YOUR_LANGUAGE);
            },
            OnLanguage: function (e) {
                CM.Javascript.App.Identity.SetLanguage(Bridge.as(e.currentTarget.lan, System.String));
            }
        }
    });

    /**
     * A base class for scrollable/paginated list components.
     *
     * @class CM.Javascript.PagedList$1
     */
    Bridge.define("CM.Javascript.PagedList$1", function (T) { return {
        fields: {
            OnCheckedChanged: null,
            OnClick: null,
            _Data: null,
            _Div: null,
            _Feedback: null,
            _IsQueryRunning: false,
            _PageSize: 0,
            _Path: null,
            _Results: null,
            _StartAt: 0,
            _Total: 0
        },
        props: {
            IsScrollAtBottom: {
                get: function () {
                    var bottom = (CM.BridgeHacks.Position(this._Results).Y + this._Results.scrollHeight) | 0;
                    var windowBottom = (window.pageYOffset + window.innerHeight) | 0;
                    return (bottom < windowBottom);
                }
            }
        },
        ctors: {
            ctor: function (parent, path) {
                this.$initialize();
                this._Path = path;
                this._Div = CM.BridgeHacks.Div(parent, "list");
                this._Results = CM.BridgeHacks.Div(this._Div);
                this._Feedback = new CM.Javascript.Feedback(this._Div);
                this._Data = new (System.Collections.Generic.Dictionary$2(System.String,CM.Javascript.ListResult))();
                this._Total = 0;
                this._PageSize = 10;
            }
        },
        methods: {
            TryFindResult: function (key, r) {
                return this._Data.tryGetValue(key, r);
            },
            UpdateResults: function (force) {
                var $t, $t1;
                if (force === void 0) { force = false; }
                if (this._StartAt > this._Total && !force) {
                    return;
                }
                if (this._IsQueryRunning) {
                    return;
                }
                this._IsQueryRunning = true;
                this._Feedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);
                CM.Javascript.App.Identity.Client.TryList(this._Path, ($t = new (CM.AsyncRequest$1(CM.Schema.ListRequest))(), $t.Item = ($t1 = new CM.Schema.ListRequest(), $t1.APIVersion = CM.Constants.APIVersion, $t1.StartAt = (this._StartAt >>> 0), $t1.Max = (this._PageSize >>> 0), $t1.UpdatedUtcFromInclusive = System.DateTime.addYears(System.DateTime.getUtcNow(), -2), $t1.UpdatedUtcToExclusive = System.DateTime.addDays(System.DateTime.getUtcNow(), 1), $t1.Sort = "UPD-UTC DESC", $t1), $t.OnProgress = Bridge.fn.bind(this, $asm.$.CM.Javascript.PagedList$1.f1), $t.OnComplete = Bridge.fn.bind(this, $asm.$.CM.Javascript.PagedList$1.f2), $t), Bridge.fn.cacheBind(this, this.ResultSink));
                this._StartAt = (this._StartAt + this._PageSize) | 0;
            },
            ResultSink: function (p, e) {
                if (System.Int64(this._Total).lt(System.Int64(e.Total))) {
                    this._Total = (e.Total) | 0;
                }
                for (var i = 0; i < e.Values.Count; i = (i + 1) | 0) {
                    var v = e.Values.getItem(i);
                    if (Bridge.referenceEquals(v.Name, "ITEM")) {
                        var res = Bridge.createInstance(T, [v.Value, this._Path]);
                        var existing = { };
                        if (!this._Data.tryGetValue(res.UniqueKey, existing)) {
                            existing.v = res;
                            res.OnClick = this.OnClick;
                            res.OnCheckedChanged = this.OnCheckedChanged;
                            res.Build();
                            this._Data.set(res.UniqueKey, res);
                            res.Element.res = res;
                            this.InsertResultSorted(res);
                        }
                        existing.v.OnCorroborated(p.EndPoint);
                    }
                }
            },
            InsertResultSorted: function (res) {
                var $t, $t1, $t2;
                for (var i = 0; i < this._Results.children.length; i = (i + 1) | 0) {
                    var child = Bridge.unbox(($t = ($t1 = this._Results.children)[System.Array.index(i, $t1)]).res);
                    if (System.DateTime.lt(child.Utc, res.Utc)) {
                        this._Results.insertBefore(res.Element, ($t2 = this._Results.children)[System.Array.index(i, $t2)]);
                        return;
                    }
                }
                this._Results.appendChild(res.Element);
            }
        }
    }; });

    Bridge.ns("CM.Javascript.PagedList$1", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.PagedList$1, {
        f1: function (prog) {
            this._Feedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(prog.ProgressPercent + "% ", CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK));
        },
        f2: function (sender) {
            if (CM.CMResult.op_Equality(sender.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                if (this._Data.count === 0) {
                    this._Feedback.Set(CM.Javascript.Assets.SVG.CircleUnknown, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_NO_ITEMS_FOUND);
                } else {
                    this._Feedback.Hide();
                }
            } else {
                this._Feedback.Set(CM.Javascript.Assets.SVG.CircleError, CM.Javascript.FeedbackType.Default, CM.BridgeHacks.GetLocalisedDescription(sender.Result));
            }
            this._IsQueryRunning = false;
        }
    });

    /**
     * A "request for payment" page.
     *
     * @class CM.Javascript.PaymentLinkPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.PaymentLinkPage", {
        inherits: [CM.Javascript.Page],
        fields: {
            _Amount: null,
            _AmountFeedback: null,
            _Description: null,
            _Form: null,
            _Href: null,
            _ID: null,
            _Link: null,
            _POS: null,
            _POSButton: null,
            _Tag: null,
            _Trans: null,
            _TransHolder: null
        },
        props: {
            Title: {
                get: function () {
                    return System.String.concat(this._ID, " ", CM.Javascript.SR.LABEL_REQUEST_A_PAYMENT);
                }
            },
            Url: {
                get: function () {
                    return System.String.concat("/", this._ID, "/link");
                }
            },
            IsLinkValid: {
                get: function () {
                    return !this._Link.IsAmountReadOnly || System.Nullable.liftne("ne", this.GetAmount(), System.Decimal.lift(null));
                }
            }
        },
        ctors: {
            ctor: function (id) {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                this._ID = id;
                this._Link = new CM.PaymentLink();
                this._Link.Payee = id;
            }
        },
        methods: {
            Build: function () {
                this.Element.className = "paymentlinkpage";
                this._Form = CM.BridgeHacks.Div(this.Element);
                this._POS = CM.BridgeHacks.Div(this.Element, "pos");
                this._POS.style.display = "none";
                CM.BridgeHacks.H1(CM.BridgeHacks.Div(this._Form, "top"), System.String.format(CM.Javascript.SR.LABEL_LINK_FOR_PAYMENT_TO, CM.Javascript.Page.HtmlEncode(this._ID)));
                var descRO = CM.BridgeHacks.CheckBox(CM.BridgeHacks.H3(this._Form, CM.Javascript.SR.LABEL_MEMO), CM.Javascript.SR.LABEL_READONLY);
                descRO.checked = (this._Link.IsMemoReadOnly = true, true);
                descRO.onchange = Bridge.fn.bind(this, function (e) {
                    this._Link.IsMemoReadOnly = descRO.checked;
                    this.OnLinkChanged();
                });
                this._Description = CM.BridgeHacks.TextBox(this._Form, "");
                this._Description.placeholder = System.String.concat("(", CM.Javascript.SR.LABEL_OPTIONAL, ")");
                this._Description.addEventListener("keyup", Bridge.fn.bind(this, $asm.$.CM.Javascript.PaymentLinkPage.f1));

                var row = CM.BridgeHacks.Div(this._Form, "row");
                var left = CM.BridgeHacks.Div(row, "cell-half");
                var right = CM.BridgeHacks.Div(row, "cell-half");

                var amountRO = CM.BridgeHacks.CheckBox(CM.BridgeHacks.H3(left, CM.Javascript.SR.LABEL_AMOUNT), CM.Javascript.SR.LABEL_READONLY);
                amountRO.checked = (this._Link.IsAmountReadOnly = true, true);
                amountRO.onchange = Bridge.fn.bind(this, function (e) {
                    this._Link.IsAmountReadOnly = amountRO.checked;
                    this.OnLinkChanged();
                });

                var box = CM.BridgeHacks.Div(left, "amountinputbox focusable");
                CM.BridgeHacks.Span(box, CM.Constants.Symbol);
                this._Amount = CM.BridgeHacks.TextBox(box, "");
                this._Amount.placeholder = System.String.concat("0", CM.Javascript.SR.CHAR_DECIMAL, "00");
                this._Amount.addEventListener("keypress", $asm.$.CM.Javascript.PaymentLinkPage.f2);
                this._Amount.addEventListener("keyup", Bridge.fn.cacheBind(this, this.OnShowAmountHint));
                this._Amount.addEventListener("change", Bridge.fn.cacheBind(this, this.OnShowAmountHint));

                this._AmountFeedback = new CM.Javascript.Feedback(left);

                CM.BridgeHacks.H3(right, System.String.concat(CM.Javascript.Assets.SVG.Tag.ToString(16, 16, "#000000"), " ", CM.Javascript.SR.LABEL_TAG));
                this._Tag = CM.BridgeHacks.TextBox(right, "");
                this._Tag.placeholder = System.String.concat("(", CM.Javascript.SR.LABEL_OPTIONAL, ")");
                this._Tag.addEventListener("keyup", Bridge.fn.bind(this, $asm.$.CM.Javascript.PaymentLinkPage.f3));
                row = CM.BridgeHacks.Div(this._Form, "button-row");
                this._POSButton = CM.BridgeHacks.Button(row, CM.Javascript.SR.LABEL_POINT_OF_SALE, Bridge.fn.bind(this, $asm.$.CM.Javascript.PaymentLinkPage.f4), "green-button");
                this._POSButton.disabled = true;

                CM.BridgeHacks.Button(row, CM.Javascript.SR.LABEL_PREVIEW, Bridge.fn.bind(this, $asm.$.CM.Javascript.PaymentLinkPage.f5));
                CM.BridgeHacks.Button(row, CM.Javascript.SR.LABEL_CLEAR, Bridge.fn.bind(this, $asm.$.CM.Javascript.PaymentLinkPage.f6));
                CM.BridgeHacks.Button$1(row, CM.Javascript.SR.LABEL_CANCEL, System.String.concat("/", this._ID));

                this._Href = CM.BridgeHacks.Div(this._Form, "linkoutput");

                CM.BridgeHacks.Span(CM.BridgeHacks.Div(this._Form, null), "<a href=\"/civilmoneylogos.svg\" target=\"_blank\">Acceptance Logos</a>");

                this.OnLinkChanged();

                CM.Javascript.App.Identity.Client.Subscribe(this._ID);
            },
            OnAdded: function () {
                CM.Javascript.App.Identity.Client.addPeerNotifiesReceived(Bridge.fn.cacheBind(this, this.Client_PeerNotifiesReceived));
                // Out link page may be removed/re-added numerous times. When we have a transaction
                // showing we need to keep its status/information up to date.
                if (this._Trans != null) {
                    var recent = CM.Javascript.AlertUI.RecentNotifications.toArray();
                    for (var i = 0; i < recent.length; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(this._Trans.Path, recent[System.Array.index(i, recent)].Item.CM$IStorable$Path)) {
                            this.Client_PeerNotifiesReceived(recent[System.Array.index(i, recent)]);
                        }
                    }
                }
            },
            OnRemoved: function () {
                CM.Javascript.App.Identity.Client.removePeerNotifiesReceived(Bridge.fn.cacheBind(this, this.Client_PeerNotifiesReceived));
            },
            Client_PeerNotifiesReceived: function (arg) {
                var $t, $t1;
                if (this._POS.style.display !== "block") {
                    return;
                }

                // We're looking out for new transactions having a matching tag and amount, or if
                // the transaction ID is established, any newer copies that might arrive
                var desiredAmount = this.GetAmount();
                if (Bridge.is(arg.Item, CM.Schema.Transaction)) {
                    var t = Bridge.as(arg.Item, CM.Schema.Transaction);
                    if (this._Trans == null || (Bridge.referenceEquals(this._Trans.ID, t.ID) && System.DateTime.lt(this._Trans.UpdatedUtc, t.UpdatedUtc))) {
                        if (System.String.compare(($t = t.PayeeTag, $t != null ? $t : ""), ($t1 = this._Link.PayeeTag, $t1 != null ? $t1 : "")) === 0 && (!this._Link.IsAmountReadOnly || System.Nullable.lifteq("equals", desiredAmount, System.Decimal.lift(null)) || System.Nullable.getValue(desiredAmount).equalsT(t.Amount)) && (!this._Link.IsMemoReadOnly || Bridge.referenceEquals(this._Link.Memo, t.Memo))) {
                            this._Trans = t;
                            CM.BridgeHacks.Clear(this._TransHolder);
                            CM.BridgeHacks.H2(this._TransHolder, CM.Javascript.SR.LABEL_MATCHING_TRANSACTION_RECEIVED_FROM);
                            new CM.Javascript.AccountInputBox(this._TransHolder, t.PayerID, true, void 0);
                            new CM.Javascript.TransactionInfo(this._TransHolder, t, true, false);
                            if (t.PayeeStatus !== CM.Schema.PayeeStatus.NotSet) {
                                CM.BridgeHacks.Button(CM.BridgeHacks.Div(CM.BridgeHacks.Div(this._TransHolder, "details"), "button-row"), "Close", Bridge.fn.bind(this, $asm.$.CM.Javascript.PaymentLinkPage.f6));
                            }
                        }
                    }
                }
            },
            GetAmount: function () {
                var str = System.String.replaceAll(this._Amount.value, CM.Javascript.SR.CHAR_THOUSAND_SEPERATOR, "");
                // Bridge.NET decimal.TryParse quirk...

                if (System.String.indexOf(str, CM.Javascript.SR.CHAR_DECIMAL) === -1) {
                    str = System.String.concat(str, CM.Javascript.SR.CHAR_DECIMAL);
                }
                if (System.String.endsWith(str, CM.Javascript.SR.CHAR_DECIMAL)) {
                    str = System.String.concat(str, "0");
                }
                var amount = { };
                if (System.Decimal.tryParse(str, System.Globalization.CultureInfo.getCurrentCulture(), amount) && amount.v.gte(CM.Constants.MinimumTransactionAmount)) {
                    this._POSButton.disabled = false;
                    return amount.v;
                }
                this._POSButton.disabled = true;
                return System.Decimal.lift(null);
            },
            OnLinkChanged: function () {
                var url = this._Link.toString();
                this._Href.innerHTML = this.IsLinkValid ? System.String.concat("<a href=\"", url, "\" target=\"_blank\">", url, "</a>") : "";
            },
            OnShowAmountHint: function () {
                var amount = System.Nullable.getValueOrDefault(this.GetAmount(), System.Decimal(0.0));
                if (amount.gte(CM.Constants.MinimumTransactionAmount)) {
                    var feedback = System.String.format(CM.Javascript.SR.LABEL_AMOUNT_HINT, Bridge.Int.format(System.Decimal.toDecimalPlaces(amount.mul(System.Decimal(50)), 2, 6), "N2"), Bridge.Int.format(System.Decimal.toDecimalPlaces(amount.div(System.Decimal(1)), 2, 6), "N2"));
                    this._AmountFeedback.Set(CM.Javascript.Assets.SVG.Speech, CM.Javascript.FeedbackType.Default, feedback);
                    this._Link.Amount = amount.toString();
                } else {
                    this._Link.Amount = "";
                    this._AmountFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_THE_AMOUNT_IS_INVALID);
                }
                this.OnLinkChanged();
            },
            ResetForm: function () {
                this._POS.style.display = "none";
                this._Form.style.display = "block";
                this._Tag.value = "";
                this._Amount.value = "";
                this._Description.value = "";
                this._AmountFeedback.Hide();
                this._POSButton.disabled = true;
                this._Href.innerHTML = "";
            },
            ShowPOS: function () {
                CM.BridgeHacks.Clear(this._POS);
                var url = this._Link.toString();
                this._TransHolder = CM.BridgeHacks.Div(this._POS);
                var amount = this.GetAmount();
                var div = CM.BridgeHacks.Div(this._TransHolder, "details");
                CM.BridgeHacks.H1(div, CM.Javascript.SR.TITLE_PLEASE_PAY);
                CM.BridgeHacks.H2(div, CM.Javascript.Page.EncodeAmount(System.Nullable.getValue(amount), CM.Constants.Symbol));
                if (!System.String.isNullOrWhiteSpace(this._Link.Memo)) {
                    CM.BridgeHacks.Div(div, "memo", CM.Javascript.Page.HtmlEncode(this._Link.Memo));
                }
                if (!System.String.isNullOrWhiteSpace(this._Link.PayeeTag)) {
                    CM.BridgeHacks.Div(div, "tag", System.String.concat(CM.Javascript.Assets.SVG.Tag.ToString(16, 16, "#cccccc"), " ", CM.Javascript.Page.HtmlEncode(this._Link.PayeeTag)));
                }

                CM.BridgeHacks.Div(div, "center", CM.Javascript.QRCode.GenerateQRCode(url, 256, 256));
                CM.BridgeHacks.Div(div, "center", System.String.concat("<a href=\"", url, "\" target=\"_blank\">", url, "</a>"));
                CM.BridgeHacks.Button(CM.BridgeHacks.Div(div, "button-row"), CM.Javascript.SR.LABEL_CANCEL, Bridge.fn.bind(this, $asm.$.CM.Javascript.PaymentLinkPage.f7));

                this._Form.style.display = "none";
                this._POS.style.display = "block";
            }
        }
    });

    Bridge.ns("CM.Javascript.PaymentLinkPage", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.PaymentLinkPage, {
        f1: function (e) {
            this._Link.Memo = this._Description.value;
            this.OnLinkChanged();
        },
        f2: function (e) {
            var ev = Bridge.cast(e, KeyboardEvent);
            if (!System.Char.isDigit((ev.charCode & 65535)) && !System.Char.isControl((ev.charCode & 65535)) && System.String.indexOf(CM.Javascript.SR.CHAR_DECIMAL, String.fromCharCode((ev.charCode & 65535))) === -1 && System.String.indexOf(CM.Javascript.SR.CHAR_THOUSAND_SEPERATOR, String.fromCharCode((ev.charCode & 65535))) === -1) {
                e.preventDefault();
                e.stopPropagation();
            }
        },
        f3: function (e) {
            this._Link.PayeeTag = this._Tag.value;
            this.OnLinkChanged();
        },
        f4: function (e) {
            this.ShowPOS();
        },
        f5: function (e) {
            window.open(System.String.replaceAll(this._Link.toString(), CM.Constants.TrustedSite, ""));
        },
        f6: function (e) {
            this.ResetForm();
        },
        f7: function (e) {
            this._POS.style.display = "none";
            this._Form.style.display = "block";
        }
    });

    /**
     * A page for sending a new payment/transaction.
     *
     * @class CM.Javascript.PaymentPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.PaymentPage", {
        inherits: [CM.Javascript.Page],
        fields: {
            _Amount: null,
            _AmountFeedback: null,
            _Config: null,
            _Description: null,
            _From: null,
            _Link: null,
            _MainFeedback: null,
            _Payee: null,
            _Tag: null,
            _To: null
        },
        props: {
            Title: {
                get: function () {
                    return System.String.concat(this._Payee, " ", CM.Javascript.SR.LABEL_MAKE_A_PAYMENT);
                }
            },
            Url: {
                get: function () {
                    return System.String.concat("/", this._Payee, "/", (this._Link != null ? this._Config : "pay"));
                }
            }
        },
        ctors: {
            ctor: function (to, config) {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                this._Payee = to;
                this._Config = config;
                if (!System.String.isNullOrEmpty(config)) {
                    CM.PaymentLink.TryDecodeUrl(System.String.concat("https://civil.money/", to, "/", config), Bridge.ref(this, "_Link"));
                }
                if (this._Link == null) {
                    this._Link = new CM.PaymentLink();
                } // just for less code
            }
        },
        methods: {
            Build: function () {
                var $t;
                var page = CM.BridgeHacks.Div(this.Element, "paymentpage");
                var noAccount = CM.BridgeHacks.Div(this.Element, "noaccountfooter");


                var form = CM.BridgeHacks.Div(page, "top");
                //form.Div("logo", "<img src=\"/cmlogo.svg\" type=\"image/svg\">");
                CM.BridgeHacks.H1(form, CM.Javascript.SR.LABEL_PAY_TO);
                this._To = new CM.Javascript.AccountInputBox(form, this._Payee);

                this._MainFeedback = new CM.Javascript.Feedback(page, true);
                var returnButtons = CM.BridgeHacks.Div(page);
                var serverStatus = CM.BridgeHacks.Div(page, "statusvisual");


                form = CM.BridgeHacks.Div(page, "bottom");
                var row = CM.BridgeHacks.Div(form, "row");
                var left = CM.BridgeHacks.Div(row, "cell-half");
                var right = CM.BridgeHacks.Div(row, "cell-half");

                CM.BridgeHacks.H3(left, CM.Javascript.SR.LABEL_AMOUNT);
                var box = CM.BridgeHacks.Div(left, System.String.concat("amountinputbox", (this._Link.IsAmountReadOnly ? "" : " focusable")));
                CM.BridgeHacks.Span(box, CM.Constants.Symbol);
                this._Amount = CM.BridgeHacks.TextBox(box, this._Link.Amount);
                this._Amount.type = "number";
                if (this._Link.IsAmountReadOnly) {
                    CM.BridgeHacks.AddClass(box, "readonly");
                }
                this._Amount.readOnly = this._Link.IsAmountReadOnly;
                this._Amount.placeholder = System.String.concat("0", CM.Javascript.SR.CHAR_DECIMAL, "00");
                this._Amount.addEventListener("keypress", $asm.$.CM.Javascript.PaymentPage.f1);
                this._Amount.addEventListener("keyup", Bridge.fn.cacheBind(this, this.OnShowAmountHint));
                this._Amount.addEventListener("change", Bridge.fn.cacheBind(this, this.OnShowAmountHint));
                // _Amount.SetAttribute("speech", "");
                // _Amount.SetAttribute("required", "");
                // _Amount.SetAttribute("pattern", "[0-9]{4}"+SR.CHAR_DECIMAL+"[0-9]{0,6}");
                this._Amount.onfocus = Bridge.fn.combine(this._Amount.onfocus, Bridge.fn.bind(this, function (e) {
                    if (!this._Amount.readOnly) {
                        CM.BridgeHacks.AddClass(box, "focused-input");
                    }
                }));
                this._Amount.onblur = Bridge.fn.combine(this._Amount.onblur, function (e) {
                    CM.BridgeHacks.RemoveClass(box, "focused-input");
                });
                this._AmountFeedback = new CM.Javascript.Feedback(left);

                if (this._Link.IsMemoReadOnly && System.String.isNullOrWhiteSpace(this._Link.Memo)) {
                    // readonly and empty = disabled..
                    this._Description = ($t = document.createElement('input'), $t.type = "text", $t);
                } else {
                    CM.BridgeHacks.H3(right, CM.Javascript.SR.LABEL_MEMO);
                    this._Description = CM.BridgeHacks.TextBox(right, this._Link.Memo);
                    this._Description.placeholder = System.String.concat("(", CM.Javascript.SR.LABEL_OPTIONAL, ")");
                    this._Description.readOnly = this._Link.IsMemoReadOnly;
                    if (this._Link.IsMemoReadOnly) {
                        CM.BridgeHacks.AddClass(this._Description, "readonly");
                    }
                    this._Description.maxLength = 48;
                }

                row = CM.BridgeHacks.Div(form, "row");
                left = CM.BridgeHacks.Div(row, "cell-half");
                right = CM.BridgeHacks.Div(row, "cell-half");

                CM.BridgeHacks.H3(left, CM.Javascript.SR.LABEL_TAG);
                this._Tag = CM.BridgeHacks.TextBox(left, "");
                this._Tag.placeholder = System.String.concat("(", CM.Javascript.SR.LABEL_OPTIONAL, ")");
                this._Tag.maxLength = 48;

                CM.BridgeHacks.H3(right, CM.Javascript.SR.LABEL_PAY_FROM);
                this._From = new CM.Javascript.AccountInputBox(right, void 0, false, CM.Javascript.SR.LABEL_YOUR_ACCOUNT_NAME);
                this._From.OnAccountChanged = Bridge.fn.bind(this, $asm.$.CM.Javascript.PaymentPage.f2);


                row = CM.BridgeHacks.Div(form, "row");
                // row.H3(SR.LABEL_SECURITY);

                var reminder = CM.BridgeHacks.Div(row, "reminder", CM.Javascript.SR.LABEL_CIVIL_MONEY_SECURITY_REMINDER);
                var confirm = CM.BridgeHacks.Div(row, "confirm");
                var ch = CM.BridgeHacks.CheckBox(confirm, CM.Javascript.SR.HTML_IVE_CHECKED_MY_WEB_BROWSER_ADDRESS);

                if (!System.String.isNullOrWhiteSpace(this._Link.Amount)) {
                    this.OnShowAmountHint();
                }

                var passAndSubmit = CM.BridgeHacks.Div(form, "row");
                passAndSubmit.style.display = "none";
                CM.BridgeHacks.H3(passAndSubmit, CM.Javascript.SR.LABEL_SECRET_PASS_PHRASE);
                var pass = CM.BridgeHacks.Password(passAndSubmit);
                var buttonsRow = CM.BridgeHacks.Div(form, "button-row");
                var submit = CM.BridgeHacks.Button(buttonsRow, CM.Javascript.SR.LABEL_CONTINUE, Bridge.fn.bind(this, function (e) {
                    var $t1, $t2;
                    var amount = this.GetAmount();
                    if (System.Nullable.lifteq("equals", amount, System.Decimal.lift(null))) {
                        this._AmountFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_THE_AMOUNT_IS_INVALID);
                        CM.BridgeHacks.ScrollTo(this._Amount);
                        this._Amount.focus();
                        return;
                    }
                    if (this._To.Account == null) {
                        CM.BridgeHacks.ScrollTo(this._To.Element);
                        this._To.SetFeedbackIfNoneAlready(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_A_VALID_PAYEE_ACCOUNT_NAME_IS_REQUIRED);
                        return;
                    }
                    if (this._From.Account == null) {
                        this._From.SetFeedbackIfNoneAlready(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_YOUR_ACCOUNT_NAME_IS_REQUIRED);
                        CM.BridgeHacks.ScrollTo(this._From.Element);
                        this._From.Input.focus();
                        return;
                    }

                    var t = new CM.Schema.Transaction.ctor();
                    t.APIVersion = CM.Constants.APIVersion;
                    t.CreatedUtc = System.DateTime.getUtcNow();
                    t.PayerID = this._From.Account.ID;
                    t.PayerRegion = this._From.Account.Iso31662Region;
                    t.PayerStatus = CM.Schema.PayerStatus.Accept;
                    t.PayerTag = this._Tag.value;
                    t.PayerUpdatedUtc = t.CreatedUtc;
                    t.PayeeID = this._To.Account.ID;
                    t.PayeeTag = this._Link.PayeeTag;
                    t.Memo = this._Description.value;
                    t.Amount = System.Nullable.getValue(amount);
                    CM.BridgeHacks.Clear(serverStatus);
                    form.style.display = "none";
                    noAccount.style.display = "none";
                    buttonsRow.style.display = "none";

                    this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_SIGNING_INFORMATION, " ..."));

                    this._From.Account.SignData(($t1 = new (CM.AsyncRequest$1(CM.Schema.DataSignRequest))(), $t1.Item = ($t2 = new CM.Schema.DataSignRequest.$ctor1(t.GetPayerSigningData()), $t2.Password = System.Text.Encoding.UTF8.GetBytes(pass.value), $t2), $t1.OnComplete = Bridge.fn.bind(this, function (req) {
                        var $t3, $t4;
                        if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                            t.PayerSignature = req.Item.Transforms.getItem(0).Output;

                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK, " ..."));

                            CM.BridgeHacks.Clear(serverStatus);
                            var prog = new CM.Javascript.ServerProgressIndicator(serverStatus);
                            prog.SetMainGlyph(CM.Javascript.Assets.SVG.Wait);
                            prog.Show();
                            var put = ($t3 = new (CM.AsyncRequest$1(CM.Javascript.PutRequest))(), $t3.Item = ($t4 = new CM.Javascript.PutRequest(t), $t4.UI = prog, $t4), $t3.OnProgress = $asm.$.CM.Javascript.PaymentPage.f3, $t3.OnComplete = Bridge.fn.bind(this, function (putRes) {
                                putRes.Item.UpdateUIProgress();
                                if (CM.CMResult.op_Equality(putRes.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                                    CM.Javascript.AccountPage.Prefetched = null; // Balance will probably have changed

                                    this._MainFeedback.Set(CM.Javascript.Assets.SVG.CircleTick, CM.Javascript.FeedbackType.Success, CM.Javascript.SR.LABEL_STATUS_TRANSACTION_CREATED_SUCCESSFULLY);

                                    var options = CM.BridgeHacks.Div(returnButtons, "button-row center");
                                    CM.BridgeHacks.Button$1(options, CM.Javascript.SR.LABEL_GO_TO_YOUR_ACCOUNT, System.String.concat("/", t.PayerID));
                                    CM.BridgeHacks.Button$1(options, System.String.format(CM.Javascript.SR.LABEL_GO_TO_ACCOUNT_BLANK, t.PayeeID), System.String.concat("/", t.PayeeID));
                                    prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleTick);
                                } else {
                                    this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, ": ", CM.BridgeHacks.GetLocalisedDescription(putRes.Result)));

                                    form.style.display = "block";
                                    buttonsRow.style.display = "block";
                                    prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleError);
                                }
                            }), $t3);

                            CM.Javascript.App.Identity.Client.TryPut(put);
                        } else {
                            form.style.display = "block";
                            buttonsRow.style.display = "block";
                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_STATUS_SIGNING_FAILED);
                        }
                    }), $t1), CM.Javascript.JSCryptoFunctions.Identity);
                }), "green-button");
                submit.style.display = "none";

                CM.BridgeHacks.Button$1(buttonsRow, CM.Javascript.SR.LABEL_CANCEL, System.String.concat("/", this._Payee));
                ch.onchange = function (e) {
                    passAndSubmit.style.display = ch.checked ? "block" : "none";
                    submit.style.display = ch.checked ? "inline" : "none";
                    reminder.style.display = ch.checked ? "none" : "block";
                    confirm.style.display = ch.checked ? "none" : "block";
                    pass.focus();
                };
                if (this._Description.readOnly) {
                    CM.BridgeHacks.OnEnterKeySetFocus(this._Amount, this._From.Input);
                } else {
                    CM.BridgeHacks.OnEnterKeySetFocus(this._Amount, this._Description);
                    CM.BridgeHacks.OnEnterKeySetFocus(this._Description, this._From.Input);
                }
                CM.BridgeHacks.OnEnterKeySetFocus(this._From.Input, this._Tag);
                // _Tag.OnEnterKeySetFocus(ch);
                CM.BridgeHacks.OnEnterKey(pass, Bridge.fn.cacheBind(submit, submit.click));



                // right = row.Div("cell-half");
                CM.BridgeHacks.H1(noAccount, CM.Javascript.SR.LABEL_DONT_HAVE_AN_ACCOUNT);
                CM.BridgeHacks.Div(noAccount, null, CM.Javascript.SR.HTML_CIVIL_MONEY_PROVIDES);
                var buttons = CM.BridgeHacks.Div(noAccount, "buttons");
                CM.BridgeHacks.Button(buttons, CM.Javascript.SR.LABEL_CREATE_MY_ACCOUNT, $asm.$.CM.Javascript.PaymentPage.f4, "blue-button");
                CM.BridgeHacks.Span(buttons, System.String.concat(" ", CM.Javascript.SR.LABEL_OR, " "));
                CM.BridgeHacks.Button(buttons, CM.Javascript.SR.LABEL_LEARN_MORE, $asm.$.CM.Javascript.PaymentPage.f5);

            },
            GetAmount: function () {
                var str = System.String.replaceAll(this._Amount.value, CM.Javascript.SR.CHAR_THOUSAND_SEPERATOR, "");
                // Bridge.NET decimal.TryParse quirk...

                if (System.String.indexOf(str, CM.Javascript.SR.CHAR_DECIMAL) === -1) {
                    str = System.String.concat(str, CM.Javascript.SR.CHAR_DECIMAL);
                }
                if (System.String.endsWith(str, CM.Javascript.SR.CHAR_DECIMAL)) {
                    str = System.String.concat(str, "0");
                }
                var amount = { };
                if (System.Decimal.tryParse(str, System.Globalization.CultureInfo.getCurrentCulture(), amount) && amount.v.gte(CM.Constants.MinimumTransactionAmount)) {
                    return amount.v;
                }
                return System.Decimal.lift(null);
            },
            OnShowAmountHint: function () {
                var amount = System.Nullable.getValueOrDefault(this.GetAmount(), System.Decimal(0.0));

                if (amount.gte(CM.Constants.MinimumTransactionAmount)) {
                    var feedback = System.String.format(CM.Javascript.SR.LABEL_AMOUNT_HINT, Bridge.Int.format(System.Decimal.toDecimalPlaces(amount.mul(System.Decimal(50)), 2, 6), "N2"), Bridge.Int.format(System.Decimal.toDecimalPlaces(amount.div(System.Decimal(1)), 2, 6), "N2"));
                    if (this._From.Account != null && this._From.Account.AccountCalculations != null && System.Nullable.liftne("ne", this._From.Account.AccountCalculations.RecentCredits, System.Decimal.lift(null)) && System.Nullable.liftne("ne", this._From.Account.AccountCalculations.RecentDebits, System.Decimal.lift(null))) {
                        //_AmountFeedback
                        var rep = { };
                        var name = { v : new CM.RecentReputation() };
                        var calcs = this._From.Account.AccountCalculations;
                        CM.Helpers.CalculateRecentReputation(System.Nullable.getValue(calcs.RecentCredits), System.Nullable.getValue(calcs.RecentDebits).add(amount), rep, name);
                        var balance = CM.Helpers.CalculateAccountBalance(System.Nullable.getValue(calcs.RecentCredits), System.Nullable.getValue(calcs.RecentDebits).add(amount));

                        feedback = System.String.concat(feedback, (System.String.concat("\n", System.String.format(CM.Javascript.SR.LABEL_REMAINING_BALANCE_HINT, balance, System.String.concat(CM.BridgeHacks.ToLocalisedName(name.v), " (", rep.v.toString(), ")")))));
                    }
                    this._AmountFeedback.Set(CM.Javascript.Assets.SVG.Speech, CM.Javascript.FeedbackType.Default, feedback);
                } else {
                    this._AmountFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_THE_AMOUNT_IS_INVALID);
                }
            }
        }
    });

    Bridge.ns("CM.Javascript.PaymentPage", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.PaymentPage, {
        f1: function (e) {
            var ev = Bridge.cast(e, KeyboardEvent);
            if (!System.Char.isDigit((ev.charCode & 65535)) && !System.Char.isControl((ev.charCode & 65535)) && System.String.indexOf(CM.Javascript.SR.CHAR_DECIMAL, String.fromCharCode((ev.charCode & 65535))) === -1 && System.String.indexOf(CM.Javascript.SR.CHAR_THOUSAND_SEPERATOR, String.fromCharCode((ev.charCode & 65535))) === -1) {
                e.preventDefault();
                e.stopPropagation();
            }
        },
        f2: function (a) {
            this.OnShowAmountHint();
        },
        f3: function (sender) {
            (sender).Item.UpdateUIProgress();
        },
        f4: function (e) {
            CM.Javascript.RegisterPage.ReturnPath = CM.Javascript.App.Identity.CurrentPath;
            CM.Javascript.App.Identity.Navigate("/register");
        },
        f5: function (e) {
            CM.Javascript.RegisterPage.ReturnPath = CM.Javascript.App.Identity.CurrentPath;
            CM.Javascript.App.Identity.Navigate("/about");
        }
    });

    /**
     * Lists ISO31662 geographical regions and provides access to inverse-taxation reports.
     *
     * @class CM.Javascript.RegionsPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.RegionsPage", {
        inherits: [CM.Javascript.Page],
        fields: {
            _DataList: null,
            _Region: null
        },
        props: {
            Title: {
                get: function () {
                    return !System.String.isNullOrEmpty(this._Region) ? CM.ISO31662.GetName(this._Region) : CM.Javascript.SR.TITLE_REGIONS;
                }
            },
            Url: {
                get: function () {
                    return System.String.concat("/regions/", this._Region);
                }
            }
        },
        ctors: {
            ctor: function (region) {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                this._Region = region;
            }
        },
        methods: {
            Build: function () {
                this.Element.className = "regionspage";
                if (System.String.isNullOrEmpty(this._Region)) {
                    // overview
                    this.BuildOverview();
                } else {
                    this.BuildRegionReport();
                }
            },
            OnAdded: function () {
                window.onscroll = Bridge.fn.cacheBind(this, this.OnScroll);
            },
            OnRemoved: function () {
                window.onscroll = null;
            },
            BuildOverview: function () {
                CM.BridgeHacks.H1(this.Element, CM.Javascript.SR.TITLE_CIVIL_MONEY_REGIONS);
                CM.BridgeHacks.Div(this.Element, null, CM.Javascript.SR.LABEL_REGIONS_INTRO);

                CM.BridgeHacks.H2(this.Element, CM.Javascript.SR.TITLE_BROWSE_REGIONS);
                CM.BridgeHacks.Div(this.Element, null, "");
                var nav = CM.BridgeHacks.Div(this.Element, "items");
                var r = document.createElement('div');

                var count = 0;
                var country = null;
                var lastCountry = null;
                var lastLetter = 0;
                var letters = new (System.Collections.Generic.List$1(HTMLElement))();
                for (var i = 0; i < CM.ISO31662.Values.length; i = (i + 1) | 0) {
                    var reg = CM.ISO31662.Values[System.Array.index(i, CM.ISO31662.Values)].$clone();
                    var c = reg.Name;
                    var region = c.substr(((c.lastIndexOf(String.fromCharCode(47)) + 1) | 0));
                    c = c.substr(0, c.lastIndexOf(String.fromCharCode(47)));
                    if (!Bridge.referenceEquals(lastCountry, c)) {
                        lastCountry = c;
                        if (lastLetter !== c.charCodeAt(0)) {
                            letters.add(CM.BridgeHacks.H1(r, String.fromCharCode(c.charCodeAt(0))));
                            lastLetter = c.charCodeAt(0);
                        }

                        country = CM.BridgeHacks.Div(r, "country");
                        CM.BridgeHacks.H3(country, CM.Javascript.Page.HtmlEncode(c));
                        country = CM.BridgeHacks.Div(country, "items");

                        count = (count + 1) | 0;
                        if (count === 4) {
                            // r = list.Div("row");
                            count = 0;
                        }
                    }
                    CM.BridgeHacks.A$1(country, CM.Javascript.Page.HtmlEncode(region), System.String.concat("/regions/", reg.ID));
                    CM.BridgeHacks.Span(country, " ");
                }

                for (var i1 = 0; i1 < letters.Count; i1 = (i1 + 1) | 0) {
                    var $let = letters.getItem(i1);
                    var a = CM.BridgeHacks.A(nav, $let.innerHTML, Bridge.fn.cacheBind(this, this.JumpToLetter));
                    CM.BridgeHacks.Span(nav, " ");
                    a.let = $let;
                }

                this.Element.appendChild(r);
            },
            BuildRegionReport: function () {
                var $t;
                var name = CM.ISO31662.GetName(this._Region);
                var div = CM.BridgeHacks.Div(this.Element, "report");
                if (name == null) {
                    // bad link
                    CM.BridgeHacks.H1(div, CM.Javascript.SR.TITLE_NOT_FOUND);

                    CM.BridgeHacks.Div(div, "", CM.Javascript.SR.LABEL_LINK_APPEARS_TO_BE_INVALID);
                    return;
                }
                var parts = System.String.split(name, [47].map(function(i) {{ return String.fromCharCode(i); }}));
                CM.BridgeHacks.H1(div, parts[System.Array.index(1, parts)]);
                CM.BridgeHacks.H2(div, parts[System.Array.index(0, parts)]);

                var feedback = new CM.Javascript.Feedback(div);
                feedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);
                var revenueRow = CM.BridgeHacks.Div(div, "revenue");
                CM.Javascript.App.Identity.Client.QueryAuthoritiveServer(($t = new (CM.AsyncRequest$1(CM.Javascript.Client.HttpRequest))(), $t.Item = new CM.Javascript.Client.HttpRequest(System.String.concat("/api/get-revenue/", this._Region)), $t.OnComplete = function (e) {
                    if (CM.CMResult.op_Equality(e.Result.$clone(), CM.CMResult.S_OK.$clone()) && e.Item.Content != null) {
                        //{ "count":"0", "revenue":"0", "lastUpdatedUtc":"date" }
                        var data = JSON.parse(e.Item.Content);
                        var count = System.Int32.parse(data.count.toString());
                        var revenue = System.Decimal(data.revenue.toString());
                        var date = CM.Helpers.DateFromISO8601$1(data.lastUpdatedUtc.toString());
                        CM.BridgeHacks.H4(revenueRow, System.String.concat(CM.Javascript.SR.LABEL_TIME_LAST_UPDATED, " ", CM.Helpers.DateToISO8601(date)));
                        CM.BridgeHacks.H2(revenueRow, System.String.concat(CM.Javascript.SR.LABEL_RECENT_REVENUE, ":"));
                        CM.BridgeHacks.Amount(CM.BridgeHacks.H1(revenueRow, ""), revenue, CM.Constants.Symbol, true);

                        //if (revenue == 0)
                        //    div.Div("", String.Format("There is currently no revenue data for {0}.", parts[1]));
                        CM.BridgeHacks.Div(revenueRow, "", CM.Javascript.SR.LABEL_REVENUE_REPORT_HINT);
                        feedback.Hide();
                    } else {
                        feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_PROBLEM_REACHING_A_SERVER);
                    }
                }, $t));
                var dataRow = CM.BridgeHacks.Div(div, "revenue-items list");
                this._DataList = new CM.Javascript.RegionsPage.RegionalDataList(dataRow, this._Region);
                this._DataList.UpdateResults();
            },
            JumpToLetter: function (e) {
                var el = Bridge.as(e.target.let, HTMLElement);
                CM.BridgeHacks.ScrollTo(el);
            },
            OnScroll: function (e) {
                if (this._DataList != null && this._DataList.IsScrollAtBottom) {
                    this._DataList.UpdateResults();
                }
            }
        }
    });

    /**
     * An account registration page.
     *
     * @class CM.Javascript.RegisterPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.RegisterPage", {
        inherits: [CM.Javascript.Page],
        statics: {
            fields: {
                /**
                 * Can be set by any page. Cleared when the register page is actually navigated to. This
                 only "sticks" for one registration page visit.
                 *
                 * @static
                 * @public
                 * @memberof CM.Javascript.RegisterPage
                 * @type string
                 */
                ReturnPath: null
            }
        },
        fields: {
            _ReturnPath: null
        },
        props: {
            Title: {
                get: function () {
                    return CM.Javascript.SR.LABEL_CREATE_MY_ACCOUNT;
                }
            },
            Url: {
                get: function () {
                    return "/register";
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                // Return path applies once only.
                this._ReturnPath = CM.Javascript.RegisterPage.ReturnPath;
                CM.Javascript.RegisterPage.ReturnPath = null;
            }
        },
        methods: {
            Build: function () {
                var $t, $t1, $t2;
                this.Element.className = "registerpage";
                var form = CM.BridgeHacks.Div(this.Element);
                CM.BridgeHacks.H1(form, CM.Javascript.SR.LABEL_CREATE_MY_ACCOUNT);
                CM.BridgeHacks.Div(form, null, CM.Javascript.SR.HTML_REGISTER_INTRO);
                CM.BridgeHacks.Div(form, null, "&nbsp;");
                CM.BridgeHacks.H3(form, CM.Javascript.SR.LABEL_ACCOUNT_NAME);
                var nameDiv = CM.BridgeHacks.Div(form);
                var accountName = CM.BridgeHacks.TextBox(nameDiv, "");

                accountName.addEventListener("keypress", $asm.$.CM.Javascript.RegisterPage.f1);
                var nameFeedback = new CM.Javascript.Feedback(nameDiv);
                CM.BridgeHacks.H3(form, CM.Javascript.SR.LABEL_REGION);
                var regionDiv = CM.BridgeHacks.Div(form);
                var country = CM.BridgeHacks.Select(regionDiv);
                var region = CM.BridgeHacks.Select(regionDiv);
                var _RegionFeedback = new CM.Javascript.Feedback(regionDiv);
                region.style.display = "none";

                country.appendChild(($t = document.createElement('option'), $t.value = "", $t.innerHTML = System.String.concat("(", CM.Javascript.SR.LABEL_PLEASE_SELECT, ")"), $t));
                var lastCountry = null;
                $t = Bridge.getEnumerator(CM.ISO31662.Values);
                try {
                    while ($t.moveNext()) {
                        var kp = $t.Current.$clone();
                        var s = ($t1 = System.String.split(kp.Name, [47].map(function(i) {{ return String.fromCharCode(i); }})))[System.Array.index(0, $t1)];
                        if (!Bridge.referenceEquals(lastCountry, s)) {
                            lastCountry = s;
                            country.appendChild(($t2 = document.createElement('option'), $t2.value = s, $t2.innerHTML = s, $t2));
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                country.onchange = Bridge.fn.combine(country.onchange, function (e) {
                    var $t3, $t4, $t5;
                    CM.BridgeHacks.Clear(region);
                    if (country.value.length > 0) {
                        region.style.display = "block";
                        var s1 = System.String.concat(country.value, "/");
                        $t3 = Bridge.getEnumerator(CM.ISO31662.Values);
                        try {
                            while ($t3.moveNext()) {
                                var kp1 = $t3.Current.$clone();
                                if (System.String.startsWith(kp1.Name, s1)) {
                                    var reg = ($t4 = System.String.split(kp1.Name, [47].map(function(i) {{ return String.fromCharCode(i); }})))[System.Array.index(1, $t4)];
                                    region.appendChild(($t5 = document.createElement('option'), $t5.value = kp1.ID, $t5.innerHTML = reg, $t5));
                                }
                            }
                        } finally {
                            if (Bridge.is($t3, System.IDisposable)) {
                                $t3.System$IDisposable$dispose();
                            }
                        }} else {
                        region.style.display = "none";
                    }
                });

                region.onchange = Bridge.fn.combine(region.onchange, function (e) {
                    if (CM.ISO31662.GetName(region.value) != null) {
                        _RegionFeedback.Hide();
                    }
                });

                CM.BridgeHacks.H3(form, CM.Javascript.SR.LABEL_SECRET_PASS_PHRASE);
                var pass1Div = CM.BridgeHacks.Div(form);
                var pass1 = CM.BridgeHacks.Password(pass1Div);
                var pass1Feedback = new CM.Javascript.Feedback(pass1Div);
                pass1Feedback.Set(CM.Javascript.Assets.SVG.CircleUnknown, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_NEW_PASSWORD_INSTRUCTIONS);
                CM.BridgeHacks.H3(form, CM.Javascript.SR.LABEL_REENTER_PASS_PHRASE);
                var pass2Div = CM.BridgeHacks.Div(form);
                var pass2 = CM.BridgeHacks.Password(pass2Div);
                var pass2Feedback = new CM.Javascript.Feedback(pass2Div);
                CM.BridgeHacks.H3(form, " ");
                var agreement = CM.BridgeHacks.CheckBox(CM.BridgeHacks.Div(form), System.String.concat(CM.Javascript.SR.HTML_I_PROMISE_TO_FOLLOW_THE_HONOUR_CODE, CM.Javascript.SR.HTML_CIVIL_MONEY_HONOUR_CODE));

                CM.BridgeHacks.H3(form, " ");
                var button = CM.BridgeHacks.Button$1(CM.BridgeHacks.Div(form, "button-row"), CM.Javascript.SR.LABEL_CREATE_MY_ACCOUNT, "", "green-button");
                button.style.display = "none";
                pass2.onchange = function (e) {
                    if (Bridge.referenceEquals(pass1.value, pass2.value)) {
                        pass2Feedback.Hide();
                    }
                };
                agreement.onchange = function (e) {
                    button.style.display = agreement.checked ? "inline" : "none";
                };

                var lastCheckedID = null;
                var dupeSearch = null;
                var progress = new CM.Javascript.Feedback(this.Element, true);
                var serverStatus = CM.BridgeHacks.Div(this.Element, "statusvisual");
                var returnButtons = CM.BridgeHacks.Div(this.Element);

                button.onclick = Bridge.fn.bind(this, function (e) {
                    var $t3, $t4;
                    if (CM.ISO31662.GetName(region.value) == null) {
                        _RegionFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_PLEASE_SELECT_YOUR_REGION);
                        CM.BridgeHacks.ScrollTo(region);
                        return;
                    }
                    if (System.String.isNullOrEmpty(pass1.value)) {
                        pass2Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_PASSWORD_REQUIRED);
                        CM.BridgeHacks.ScrollTo(pass1);
                        return;
                    }
                    if (!Bridge.referenceEquals(pass1.value, pass2.value)) {
                        pass2Feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_PASSWORD_REENTRY_MISMATCH);
                        CM.BridgeHacks.ScrollTo(pass1);
                        return;
                    }
                    if (!CM.Helpers.IsIDValid(lastCheckedID)) {
                        if (System.String.isNullOrEmpty(lastCheckedID)) {
                            nameFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_ACCOUNT_NAME_REQUIRED);
                        }
                        CM.BridgeHacks.ScrollTo(accountName);
                        return;
                    }
                    var a = new CM.Schema.Account.ctor();
                    a.ID = lastCheckedID;
                    a.CreatedUtc = System.DateTime.getUtcNow();
                    a.UpdatedUtc = a.CreatedUtc;
                    a.APIVersion = CM.Constants.APIVersion;
                    a.Iso31662Region = region.value;

                    if (CM.ISO31662.GetName(a.ID) != null) {
                        // For new governing authority registrations...

                        // Region must equal the ID
                        if (!Bridge.referenceEquals(a.Iso31662Region, a.ID.toUpperCase())) {
                            _RegionFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_PLEASE_SELECT_YOUR_REGION);
                            CM.BridgeHacks.ScrollTo(region);
                            return;
                        }

                        // We need to prompt for a Governing Authority signature
                        // which the Civil Money steering group has to generate after
                        // a thorough verification process.
                        a.Values.setItem$1(CM.Schema.AccountAttributes.GoverningAuthority_Key, window.prompt(System.String.concat("This ID requires a Governing Authority signature for timestamp ", a.Values.getItem$1("UTC"), ". Please paste it below."), ""));
                    }

                    form.style.display = "none";
                    CM.BridgeHacks.Clear(serverStatus);

                    a.ChangePasswordAndSign(($t3 = new (CM.AsyncRequest$1(CM.Schema.PasswordRequest))(), $t3.Item = ($t4 = new CM.Schema.PasswordRequest(), $t4.NewPass = pass1.value, $t4), $t3.OnProgress = function (sender) {
                        var res = sender;
                        var msg = CM.Javascript.SR.LABEL_PLEASE_WAIT;
                        switch (res.ProgressPercent) {
                            case 0: 
                                msg = CM.Javascript.SR.LABEL_STATUS_GENERATING_NEW_SECRET_KEY;
                                break;
                            case 25: 
                                msg = CM.Javascript.SR.LABEL_STATUS_PROCESSING_PASS_PHRASE;
                                break;
                            case 50: 
                                msg = CM.Javascript.SR.LABEL_STATUS_ENCRYPTING_SECRET_KEY;
                                break;
                            case 75: 
                                msg = CM.Javascript.SR.LABEL_STATUS_SIGNING_INFORMATION;
                                break;
                            case 100: 
                                msg = CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK;
                                break;
                        }
                        progress.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(res.ProgressPercent + "% ", msg, "..."));
                    }, $t3.OnComplete = Bridge.fn.bind(this, function (done) {
                        var $t5, $t6;
                        if (done.Result.Success) {
                            CM.BridgeHacks.Clear(serverStatus);
                            var prog = new CM.Javascript.ServerProgressIndicator(serverStatus);
                            prog.SetMainGlyph(CM.Javascript.Assets.SVG.Wait);
                            prog.Show();
                            var put = ($t5 = new (CM.AsyncRequest$1(CM.Javascript.PutRequest))(), $t5.Item = ($t6 = new CM.Javascript.PutRequest(a), $t6.UI = prog, $t6), $t5.OnComplete = Bridge.fn.bind(this, function (sender) {
                                var req = sender;
                                req.Item.UpdateUIProgress();
                                if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                                    progress.Set(CM.Javascript.Assets.SVG.CircleTick, CM.Javascript.FeedbackType.Success, CM.Javascript.SR.LABEL_STATUS_ACCOUNT_CREATED_SUCCESFULLY);
                                    var options = CM.BridgeHacks.Div(returnButtons, "button-row center");
                                    if (this._ReturnPath != null) {
                                        CM.BridgeHacks.Button$1(options, CM.Javascript.SR.LABEL_CONTINUE, this._ReturnPath);
                                        CM.Javascript.RegisterPage.ReturnPath = null;
                                    }
                                    CM.BridgeHacks.Button$1(options, CM.Javascript.SR.LABEL_GO_TO_YOUR_ACCOUNT, System.String.concat("/", a.ID));
                                    prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleTick);
                                } else {
                                    progress.Set(CM.Javascript.Assets.SVG.CircleError, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, ": ", CM.BridgeHacks.GetLocalisedDescription(req.Result)));
                                    form.style.display = "block";
                                    prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleError);
                                }
                            }), $t5.OnProgress = $asm.$.CM.Javascript.RegisterPage.f2, $t5);
                            CM.Javascript.App.Identity.Client.TryPut(put);
                        } else {
                            form.style.display = "block";
                            progress.Set(CM.Javascript.Assets.SVG.CircleError, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, ": ", CM.BridgeHacks.GetLocalisedDescription(done.Result)));
                            System.Console.WriteLine(done.Result.toString());
                        }
                    }), $t3), CM.Javascript.JSCryptoFunctions.Identity);
                });

                accountName.onkeyup = function (e) {
                    var $t3;
                    var id = accountName.value;

                    if (dupeSearch != null && Bridge.referenceEquals(dupeSearch.Item.ID, id)) {
                        return;
                    }

                    button.disabled = true;

                    if (dupeSearch != null) {
                        dupeSearch.IsCancelled = true;
                    }

                    dupeSearch = null;

                    if (!CM.Helpers.IsIDValid(id)) {
                        nameFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_ACCOUNT_NAME_INSTRUCTIONS);
                    } else {
                        dupeSearch = ($t3 = new (CM.AsyncRequest$1(CM.Javascript.FindAccountRequest))(), $t3.Item = new CM.Javascript.FindAccountRequest(id), $t3.OnComplete = function (sender) {
                            var req = sender;
                            if (!Bridge.referenceEquals(req, dupeSearch) || req.IsCancelled) {
                                return;
                            } // stale search
                            lastCheckedID = req.Item.ID;
                            if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                                var a = req.Item.Output.Cast(CM.Schema.Account);
                                nameFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, System.String.format(CM.Javascript.SR.LABEL_ACCOUNT_BLANK_IS_ALREADY_TAKEN, CM.Javascript.Page.HtmlEncode(a.ID)));
                            } else if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.E_Item_Not_Found.$clone())) {
                                if (req.Item.Output != null && !req.Item.Output.ConsensusOK) {
                                    // Not enough peers to know for certain
                                    nameFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.BridgeHacks.GetLocalisedDescription(CM.CMResult.E_Not_Enough_Peers.$clone()));
                                } else {
                                    button.disabled = false;
                                    nameFeedback.Set(CM.Javascript.Assets.SVG.CircleTick, CM.Javascript.FeedbackType.Success, System.String.format(CM.Javascript.SR.LABEL_ACCOUNT_BLANK_LOOKS_OK, CM.Javascript.Page.HtmlEncode(lastCheckedID)));
                                }
                            } else {
                                // Some other error, network probably
                                nameFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_PROBLEM_REACHING_A_SERVER, " ", CM.BridgeHacks.GetLocalisedDescription(req.Result)));
                            }
                        }, $t3);
                        nameFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_CHECKING_ACCOUNT_NAME, " ..."));
                        CM.Javascript.App.Identity.Client.TryFindAccount(dupeSearch);
                    }
                };
            }
        }
    });

    Bridge.ns("CM.Javascript.RegisterPage", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.RegisterPage, {
        f1: function (e) {
            var $t;
            var ev = Bridge.cast(e, KeyboardEvent);
            if ((ev.keyCode !== 45 && ev.keyCode !== 46 && !($t = (ev.keyCode & 65535), (System.Char.isDigit($t) || System.Char.isLetter($t))))) {
                e.preventDefault();
                e.stopPropagation();
            }
        },
        f2: function (sender) {
            var req = sender;
            req.Item.UpdateUIProgress();
        }
    });

    /**
     * Shows basic peer status information for diagnosing network issues.
     *
     * @class CM.Javascript.StatusPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.StatusPage", {
        inherits: [CM.Javascript.Page],
        statics: {
            methods: {
                Compare: function (a, b) {
                    for (var i = 0; i < a.length && i < b.length; i = (i + 1) | 0) {
                        if (a[System.Array.index(i, a)] !== b[System.Array.index(i, b)]) {
                            return ((a[System.Array.index(i, a)] - b[System.Array.index(i, b)]) | 0);
                        }
                    }
                    return ((a.length - b.length) | 0);
                }
            }
        },
        fields: {
            _Client: null,
            _Ordered: null,
            _PeerItems: null,
            _PeerList: null
        },
        props: {
            Title: {
                get: function () {
                    return CM.Javascript.SR.TITLE_PEERS;
                }
            },
            Url: {
                get: function () {
                    return "/status";
                }
            }
        },
        methods: {
            Build: function () {
                this.Element.className = "statuspage";
                this._PeerItems = new (System.Collections.Generic.Dictionary$2(CM.Javascript.Peer,CM.Javascript.StatusPage.PeerVisual))();
                this._Ordered = new (System.Collections.Generic.List$1(CM.Javascript.Peer))();
                this._Client = CM.Javascript.App.Identity.Client;
                this._PeerList = CM.BridgeHacks.Div(this.Element, "peers");
                for (var i = 0; i < this._Client.Peers.Count; i = (i + 1) | 0) {
                    var p = this._Client.Peers.getItem(i);
                    var v = new CM.Javascript.StatusPage.PeerVisual(p);
                    v.Refresh();
                    this._Ordered.add(p);
                    this._PeerItems.set(p, v);
                    this._PeerList.appendChild(v.Element);
                }
                this.UpdateGraph();
                this._Client.addPeerStateChanged(Bridge.fn.cacheBind(this, this._Client_PeerStateChanged));
                this._Client.addPeerRemoved(Bridge.fn.cacheBind(this, this._Client_PeerRemoved));
                this._Client.JoinNetwork();
            },
            OnRemoved: function () {
                this._Client.removePeerStateChanged(Bridge.fn.cacheBind(this, this._Client_PeerStateChanged));
                this._Client.removePeerRemoved(Bridge.fn.cacheBind(this, this._Client_PeerRemoved));
            },
            _Client_PeerRemoved: function (p) {
                var v = { };
                if (this._PeerItems.tryGetValue(p, v)) {
                    CM.BridgeHacks.RemoveEx(v.v.Element);
                    this._PeerItems.remove(p);
                    this._Ordered.remove(p);
                }
            },
            _Client_PeerStateChanged: function (p) {
                var v = { };
                if (!this._PeerItems.tryGetValue(p, v)) {
                    v.v = new CM.Javascript.StatusPage.PeerVisual(p);
                    this._Ordered.add(p);
                    this._PeerItems.set(p, v.v);
                    this._PeerList.appendChild(v.v.Element);
                }
                v.v.Refresh();
                this.UpdateGraph();
            },
            SortPeerByDHTPosition: function (a, b) {
                if (a.DHT_ID == null && b.DHT_ID == null) {
                    return 0;
                }
                if (a.DHT_ID == null && b.DHT_ID != null) {
                    return -1;
                }
                if (a.DHT_ID != null && b.DHT_ID == null) {
                    return 1;
                }
                return CM.Javascript.StatusPage.Compare(a.DHT_ID, b.DHT_ID);
            },
            UpdateGraph: function () {
                var $t;
                this._Ordered.sort(Bridge.fn.cacheBind(this, this.SortPeerByDHTPosition));
                $t = Bridge.getEnumerator(this._PeerItems);
                try {
                    while ($t.moveNext()) {
                        var kp = $t.Current;
                        kp.value.Element.style.order = this._Ordered.indexOf(kp.key).toString();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }}
        }
    });

    /**
     * A UI component for displaying a scrollable/paginated list of transactions.
     *
     * @class CM.Javascript.TransactionListResult
     * @augments CM.Javascript.ListResult
     */
    Bridge.define("CM.Javascript.TransactionListResult", {
        inherits: [CM.Javascript.ListResult],
        fields: {
            _ID: null,
            _Index: null,
            _Info: null,
            _Key: null
        },
        props: {
            Utc: {
                get: function () {
                    return this._Index.UpdatedUtc;
                }
            },
            UniqueKey: {
                get: function () {
                    return this._Key;
                }
            }
        },
        ctors: {
            ctor: function (data, path) {
                this.$initialize();
                CM.Javascript.ListResult.ctor.call(this, data, path);
                var $t;
                this._Index = new CM.Schema.TransactionIndex.$ctor2(data);
                this._ID = ($t = System.String.split(path, [47].map(function(i) {{ return String.fromCharCode(i); }})))[System.Array.index(1, $t)]; // The account we're looking at
                this._Key = this._Index.ID;
        }
    },
    methods: {
        Build: function () {
            this.Inner = CM.BridgeHacks.Div(this.Element, "summary");
            //2016-06-14T18:47:02 abc test1 1207.000000 2016-06-14T18:47:02 0 1 payee-region payer-region

            var isPayee = Bridge.referenceEquals(this._ID, this._Index.Payee);
            var otherPerson = isPayee ? this._Index.Payer : this._Index.Payee; // payee/payer

            var checkHolder = CM.BridgeHacks.Div(this.Inner, "checkregion");
            if (isPayee && this._Index.PayeeStatus === CM.Schema.PayeeStatus.NotSet && this._Index.PayerStatus === CM.Schema.PayerStatus.Accept) {
                var check = CM.BridgeHacks.CheckBox(checkHolder, "");
                check.onchange = Bridge.fn.bind(this, function (e) {
                    if (!Bridge.staticEquals(this.OnCheckedChanged, null)) {
                        this.OnCheckedChanged(this, check.checked);
                    }
                });
            }
            var region = CM.BridgeHacks.Div(this.Inner, "hitregion");
            region.addEventListener("mouseup", Bridge.fn.cacheBind(this, this.OnRowClick));

            this.Counter = CM.BridgeHacks.Span(CM.BridgeHacks.Div(region), this.Corroborators.Count.toString(), "counter");
            var modified = System.String.concat("<small>", System.DateTime.format(this._Index.UpdatedUtc, "yyyy-MM-dd HH:mm:ss"), "</small>");
            var date = Bridge.as(CM.BridgeHacks.Div(region, null, System.DateTime.format(this._Index.CreatedUtc, "yyyy-MM-dd")), HTMLElement);

            var party = Bridge.as(CM.BridgeHacks.Div(region, null, System.String.concat(CM.Javascript.Page.HtmlEncode(otherPerson), modified)), HTMLElement);

            var amount = CM.Helpers.CalculateTransactionDepreciatedAmount(System.DateTime.getUtcNow(), this._Index.CreatedUtc, this._Index.Amount).mul(System.Decimal((isPayee ? 1 : -1)));

            var prefix = "";
            switch (this._Index.PayeeStatus) {
                case CM.Schema.PayeeStatus.Accept: 
                case CM.Schema.PayeeStatus.NotSet: 
                    switch (this._Index.PayerStatus) {
                        case CM.Schema.PayerStatus.NotSet: 
                        case CM.Schema.PayerStatus.Accept:  // Payer with NotSet is technically invalid
                            {
                                // use amount
                                if (this._Index.PayeeStatus === CM.Schema.PayeeStatus.NotSet) {
                                    prefix = CM.Javascript.SR.LABEL_PAYEE_STATUS_NOTSET;
                                }
                            }
                            break;
                        case CM.Schema.PayerStatus.Cancel: 
                            prefix = CM.Javascript.SR.LABEL_PAYER_STATUS_CANCEL;
                            break;
                        case CM.Schema.PayerStatus.Dispute: 
                            prefix = System.String.concat(CM.Javascript.Assets.SVG.Warning.ToString(16, 16, "#000000"), " ", CM.Javascript.SR.LABEL_PAYER_STATUS_DISPUTE);
                            break;
                    }
                    break;
                case CM.Schema.PayeeStatus.Decline: 
                    prefix = CM.Javascript.SR.LABEL_PAYEE_STATUS_DECLINE;
                    break;
                case CM.Schema.PayeeStatus.Refund: 
                    prefix = CM.Javascript.SR.LABEL_PAYEE_STATUS_REFUND;
                    break;
            }
            var amountDiv = CM.BridgeHacks.Amount(CM.BridgeHacks.Div(region, "amount"), amount, prefix, false);
        },
        Update: function (t) {
            var $t;
            this._Index.UpdatedUtc = t.UpdatedUtc;
            this._Index.PayeeStatus = t.PayeeStatus;
            this._Index.PayerStatus = t.PayerStatus;
            CM.BridgeHacks.Clear(this.Element);
            this.Build();
            if (this._Info != null) { // was it expanded? rebuild that too
                this._Info = ($t = document.createElement('div'), $t.className = "info", $t);
                this.BuildTransactionInfo(t);
                this.Element.appendChild(this._Info);
            }
        },
        BuildTransactionInfo: function (t) {
            if (this._Info == null) {
                return;
            }
            new CM.Javascript.TransactionInfo(this._Info, t, false);
        },
        OnRowClick: function (e) {
            var $t;
            if (!Bridge.staticEquals(this.OnClick, null)) {
                this.OnClick(this);
            }
            if (this._Info != null) {
                CM.BridgeHacks.RemoveEx(this._Info);
                this._Info = null;
                return;
            }
            this._Info = ($t = document.createElement('div'), $t.className = "info", $t);
            var f = new CM.Javascript.Feedback(this._Info);
            f.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);
            CM.Javascript.App.Identity.Client.TryFindTransaction(($t = new (CM.AsyncRequest$1(CM.Javascript.FindTransactionRequest))(), $t.Item = new CM.Javascript.FindTransactionRequest(this._Key), $t.OnComplete = Bridge.fn.bind(this, function (r) {
                if (r.Result.Success) {
                    this.BuildTransactionInfo(r.Item.Output);
                    f.Hide();
                } else {
                    f.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, CM.BridgeHacks.GetLocalisedDescription(r.Result));
                }
            }), $t));
            this.Element.appendChild(this._Info);
        }
    }
    });

    /**
     * A full-page transaction viewer.
     *
     * @class CM.Javascript.TransactionPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.TransactionPage", {
        inherits: [CM.Javascript.Page],
        fields: {
            _Holder: null,
            _ID: null,
            _Info: null,
            _MainFeedback: null,
            _PreviousPage: null
        },
        props: {
            Title: {
                get: function () {
                    return this._ID;
                }
            },
            Url: {
                get: function () {
                    return System.String.concat("/", this._ID);
                }
            }
        },
        ctors: {
            ctor: function (id) {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                this._ID = id;
                this._PreviousPage = CM.Javascript.App.Identity.CurrentPage;
            }
        },
        methods: {
            Build: function () {
                var $t;
                this.Element.className = "transactionpage";
                CM.BridgeHacks.H1(CM.BridgeHacks.Div(this.Element, "top"), CM.Javascript.SR.TITLE_TRANSACTION_DETAILS);
                this._MainFeedback = new CM.Javascript.Feedback(this.Element);
                this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);
                this._Holder = CM.BridgeHacks.Div(this.Element);

                if (this._PreviousPage != null) {
                    CM.BridgeHacks.Button(CM.BridgeHacks.Div(this.Element, "button-row"), "Close", Bridge.fn.bind(this, $asm.$.CM.Javascript.TransactionPage.f1));
                }
                CM.Javascript.App.Identity.Client.TryFindTransaction(($t = new (CM.AsyncRequest$1(CM.Javascript.FindTransactionRequest))(), $t.Item = new CM.Javascript.FindTransactionRequest(this._ID), $t.OnComplete = Bridge.fn.bind(this, $asm.$.CM.Javascript.TransactionPage.f2), $t));
            },
            OnTransactionChanged: function (t) {
                if (this._Info != null && Bridge.referenceEquals(this._Info.Transaction.ID, t.ID)) {
                    CM.BridgeHacks.Clear(this._Holder);
                    this._Info = new CM.Javascript.TransactionInfo(this._Holder, t, true);
                }
                if (Bridge.is(this._PreviousPage, CM.Javascript.AccountPage)) {
                    Bridge.cast(this._PreviousPage, CM.Javascript.AccountPage).OnTransactionChanged(t);
                }
            }
        }
    });

    Bridge.ns("CM.Javascript.TransactionPage", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.TransactionPage, {
        f1: function (e) {
            CM.Javascript.App.Identity.CurrentPage = this._PreviousPage;
        },
        f2: function (r) {
            if (r.Result.Success) {
                this._Info = new CM.Javascript.TransactionInfo(this._Holder, r.Item.Output, true);
                this._MainFeedback.Hide();
            } else {
                this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.BridgeHacks.GetLocalisedDescription(r.Result));
            }
        }
    });

    /**
     * The voting page displays current propositions and voting outcomes.
     *
     * @class CM.Javascript.VotesPage
     * @augments CM.Javascript.Page
     */
    Bridge.define("CM.Javascript.VotesPage", {
        inherits: [CM.Javascript.Page],
        statics: {
            fields: {
                NumberFormatting: null
            },
            ctors: {
                init: function () {
                    this.NumberFormatting = "000";
                }
            },
            methods: {
                FixJsonDates: function (ar) {
                    for (var i = 0; i < ar.length; i = (i + 1) | 0) {
                        var p = ar[System.Array.index(i, ar)];
                        // these will come in as strings, even though the CLR type is DateTime
                        p.CloseUtc = CM.Helpers.DateFromISO8601$1(p.CloseUtc);
                        p.CreatedUtc = CM.Helpers.DateFromISO8601$1(p.CreatedUtc);
                    }
                }
            }
        },
        fields: {
            _MainFeedback: null,
            _Proposition: 0,
            _Top: null
        },
        props: {
            Title: {
                get: function () {
                    return CM.Javascript.SR.TITLE_VOTING;
                }
            },
            Url: {
                get: function () {
                    return System.String.concat("/vote", (this._Proposition !== 0 ? "/" + this._Proposition : ""));
                }
            }
        },
        ctors: {
            ctor: function (proposition) {
                this.$initialize();
                CM.Javascript.Page.ctor.call(this);
                var $t;
                System.UInt32.tryParse(($t = proposition, $t != null ? $t : ""), Bridge.ref(this, "_Proposition"));
        }
    },
    methods: {
        Build: function () {
            this.Element.className = "votespage";
            if (this._Proposition === 0) {
                // overview
                this.BuildOverview();
            } else {
                this.BuildVotePage();
            }
        },
        BuildOverview: function () {
            var $t;
            var div = CM.BridgeHacks.Div(this.Element);
            CM.BridgeHacks.H1(div, CM.Javascript.SR.TITLE_VOTING);
            CM.BridgeHacks.Div(div, null, CM.Javascript.SR.HTML_VOTES_INTRO);
            var feedback = new CM.Javascript.Feedback(div);

            feedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);

            CM.Javascript.App.Identity.Client.QueryAuthoritiveServer(($t = new (CM.AsyncRequest$1(CM.Javascript.Client.HttpRequest))(), $t.Item = new CM.Javascript.Client.HttpRequest("/api/get-propositions"), $t.OnComplete = Bridge.fn.bind(this, function (e) {
                if (CM.CMResult.op_Equality(e.Result.$clone(), CM.CMResult.S_OK.$clone()) && e.Item.Content != null) {
                    CM.BridgeHacks.H2(div, CM.Javascript.SR.TITLE_CURRENT_PROPOSITIONS);
                    var active = CM.BridgeHacks.Div(div);
                    CM.BridgeHacks.H2(div, CM.Javascript.SR.TITLE_CLOSED_PROPOSITIONS);
                    var inactive = CM.BridgeHacks.Div(div);

                    var data = JSON.parse(e.Item.Content);
                    var ar = Bridge.cast(data, System.Array.type(CM.Schema.VotingProposition));
                    CM.Javascript.VotesPage.FixJsonDates(ar);
                    ar.sort($asm.$.CM.Javascript.VotesPage.f1);
                    for (var i = 0; i < ar.length; i = (i + 1) | 0) {
                        var p = ar[System.Array.index(i, ar)];
                        var details = this.GetBestDetails(p);
                        var row = CM.BridgeHacks.Div(div, "prop-summary");
                        CM.BridgeHacks.H3(row, System.String.concat("#", System.UInt32.format(p.ID, CM.Javascript.VotesPage.NumberFormatting), " - ", CM.Javascript.Page.HtmlEncode(details.Title)));

                        CM.BridgeHacks.Div(row, "desc", CM.Javascript.Page.HtmlEncode(details.Description));

                        var summary = System.String.concat(CM.Javascript.SR.LABEL_VOTING_CLOSE_DATE, ": ", CM.Helpers.DateToISO8601(p.CloseUtc), " UTC", "<br/>", CM.Javascript.SR.LABEL_VOTING_ELIGIBLE_PARTICIPANTS, ": ", System.UInt32.format((((p.For + p.Against) >>> 0)), "N0"), "<br/>", CM.Javascript.SR.LABEL_VOTING_INELIGIBLE_UNVERIFIED_PARTICIPANTS, ": ", System.UInt32.format(p.Ineligible, "N0"));

                        CM.BridgeHacks.Div(row, "status", summary);

                        var tot = (((p.Against + p.For) >>> 0) + p.Ineligible) >>> 0;
                        var graph = CM.BridgeHacks.Div(CM.BridgeHacks.Div(row, "graph"));
                        var votesFor = CM.BridgeHacks.Div(graph, "for");
                        var forPer = (tot !== 0 ? p.For / tot : 0) * 100;
                        var againstPer = (tot !== 0 ? p.Against / tot : 0) * 100;
                        var ineligiblePer = ((tot + p.Ineligible) !== 0 ? p.Ineligible / tot : 0) * 100;
                        CM.BridgeHacks.Div(votesFor, null, System.String.concat("<span>", System.Double.format(forPer, "N1"), "%</span>")).style.height = System.Double.format(forPer) + "%";
                        CM.BridgeHacks.H3(votesFor, System.String.concat(System.UInt32.format(p.For, "N0"), "<br/>", CM.Javascript.SR.LABEL_VOTE_FOR));

                        var votesAgainst = CM.BridgeHacks.Div(graph, "against");
                        CM.BridgeHacks.Div(votesAgainst, null, System.String.concat("<span>", System.Double.format(againstPer, "N1"), "%</span>")).style.height = System.Double.format(againstPer) + "%";
                        CM.BridgeHacks.H3(votesAgainst, System.String.concat(System.UInt32.format(p.Against, "N0"), "<br/>", CM.Javascript.SR.LABEL_VOTE_AGAINST));

                        var votesIneligible = CM.BridgeHacks.Div(graph, "ineligible");
                        CM.BridgeHacks.Div(votesIneligible, null, System.String.concat("<span>", System.Double.format(ineligiblePer, "N1"), "%</span>")).style.height = System.Double.format(ineligiblePer) + "%";
                        CM.BridgeHacks.H3(votesIneligible, System.String.concat(System.UInt32.format(p.Ineligible, "N0"), "<br/>", CM.Javascript.SR.LABEL_VOTE_INELIGIBLE));

                        var buttons = CM.BridgeHacks.Div(row, "button-row");
                        if (System.DateTime.gt(p.CloseUtc, System.DateTime.getUtcNow())) {
                            CM.BridgeHacks.Button$1(buttons, CM.Javascript.SR.LABEL_LEARN_MORE_OR_VOTE, "/vote/" + p.ID);
                        }
                        CM.BridgeHacks.Button(buttons, CM.Javascript.SR.LABEL_DOWNLOAD_DATA, $asm.$.CM.Javascript.VotesPage.f2).setAttribute("url", System.String.concat(CM.Javascript.App.Identity.Client.CurrentAuthoritativeServer, "/api/get-vote-data?proposition-id=", p.ID));

                        // It doesn't matter if the user's clock is incorrect here. Vote tallying
                        // is a reporting process. Any votes after the designated time are simply ineligible.
                        if (System.DateTime.lte(p.CloseUtc, System.DateTime.getUtcNow())) {
                            inactive.appendChild(row);
                        } else {
                            active.appendChild(row);
                        }
                    }

                    feedback.Hide();

                    if (active.childNodes.length === 0) {
                        CM.BridgeHacks.Div(active, null, CM.Javascript.SR.LABEL_VOTES_NO_PROPOSITIONS);
                    }
                    if (inactive.childNodes.length === 0) {
                        CM.BridgeHacks.Div(inactive, null, CM.Javascript.SR.LABEL_VOTES_NO_PROPOSITIONS);
                    }
                } else {
                    feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_PROBLEM_REACHING_A_SERVER);
                }
            }), $t));
        },
        BuildVotePage: function () {
            var $t;
            this.Element.className = "castvotepage";
            var div = CM.BridgeHacks.Div(this.Element);
            this._Top = CM.BridgeHacks.Div(div, "top");
            CM.BridgeHacks.H1(this._Top, System.String.format(CM.Javascript.SR.TITLE_PROPOSITION_NUMBER, System.UInt32.format(this._Proposition, CM.Javascript.VotesPage.NumberFormatting)));

            this._MainFeedback = new CM.Javascript.Feedback(div, true);
            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);

            CM.Javascript.App.Identity.Client.QueryAuthoritiveServer(($t = new (CM.AsyncRequest$1(CM.Javascript.Client.HttpRequest))(), $t.Item = new CM.Javascript.Client.HttpRequest("/api/get-propositions"), $t.OnComplete = Bridge.fn.bind(this, $asm.$.CM.Javascript.VotesPage.f4), $t));
        },
        GetBestDetails: function (p) {
            for (var i = 0; i < p.Translations.length; i = (i + 1) | 0) {
                if (System.String.compare(CM.Javascript.SR.CurrentLanguage, p.Translations[System.Array.index(i, p.Translations)].Code, true) === 0) {
                    return p.Translations[System.Array.index(i, p.Translations)];
                }
            }
            return p.Translations[System.Array.index(0, p.Translations)];
        },
        RenderPopositionPage: function (p) {
            var $t, $t1;
            var div = CM.BridgeHacks.Div(this.Element);

            var details = this.GetBestDetails(p);

            CM.BridgeHacks.H2(this._Top, CM.Javascript.Page.HtmlEncode(details.Title));
            CM.BridgeHacks.Div(this._Top, null, CM.Javascript.Page.HtmlEncode(details.Description));
            var row = CM.BridgeHacks.Div(div, "row");
            var left = CM.BridgeHacks.Div(row, "cell-half");
            var right = CM.BridgeHacks.Div(row, "cell-half");

            CM.BridgeHacks.H3(left, CM.Javascript.SR.TITLE_KNOWN_NEGATIVE_IMPACTS);
            var tmp = System.String.split((($t = details.NegativeImpacts, $t != null ? $t : "")), [10].map(function(i) {{ return String.fromCharCode(i); }}));
            var s = new System.Text.StringBuilder();
            s.append("<ul>");
            for (var x = 0; x < tmp.length; x = (x + 1) | 0) {
                s.append(System.String.concat("<li>", CM.Javascript.Page.HtmlEncode(tmp[System.Array.index(x, tmp)]), "</li>"));
            }
            s.append("</ul>");
            CM.BridgeHacks.Div(left, null, s.toString());

            CM.BridgeHacks.H3(right, CM.Javascript.SR.TITLE_KNOWN_POSITIVE_IMPACTS);
            tmp = System.String.split((($t1 = details.PositiveImpacts, $t1 != null ? $t1 : "")), [10].map(function(i) {{ return String.fromCharCode(i); }}));
            s.clear();
            s.append("<ul>");
            for (var x1 = 0; x1 < tmp.length; x1 = (x1 + 1) | 0) {
                s.append(System.String.concat("<li>", CM.Javascript.Page.HtmlEncode(tmp[System.Array.index(x1, tmp)]), "</li>"));
            }
            s.append("</ul>");
            CM.BridgeHacks.Div(right, null, s.toString());

            row = CM.BridgeHacks.Div(div, "row");
            left = CM.BridgeHacks.Div(row, "cell-half");
            right = CM.BridgeHacks.Div(row, "cell-half");
            var myAccountTitle = CM.BridgeHacks.H3(left, CM.Javascript.SR.LABEL_MY_ACCOUNT);
            var account = new CM.Javascript.AccountInputBox(left, void 0, false, void 0);
            var feedback = new CM.Javascript.Feedback(div);

            var _ExistingVote = null;

            var myVoteTitle = CM.BridgeHacks.H3(right, CM.Javascript.SR.LABEL_MY_VOTE);

            var rdoFor = CM.BridgeHacks.RadioButton(right, "vote", CM.Javascript.SR.LABEL_VOTE_FOR);
            var rdoAgainst = CM.BridgeHacks.RadioButton(right, "vote", CM.Javascript.SR.LABEL_VOTE_AGAINST);
            //  div.H3(SR.LABEL_SECURITY);


            var reminder = CM.BridgeHacks.Div(div, "reminder", CM.Javascript.SR.LABEL_CIVIL_MONEY_SECURITY_REMINDER);
            var confirm = CM.BridgeHacks.Div(div, "confirm");
            var ch = CM.BridgeHacks.CheckBox(confirm, CM.Javascript.SR.HTML_IVE_CHECKED_MY_WEB_BROWSER_ADDRESS);


            var passRow = CM.BridgeHacks.Div(div, "row");
            passRow.style.display = "none";
            CM.BridgeHacks.H3(passRow, CM.Javascript.SR.LABEL_SECRET_PASS_PHRASE);
            var pass = CM.BridgeHacks.Password(passRow);
            var returnButtons = CM.BridgeHacks.Div(this.Element);
            var serverStatus = CM.BridgeHacks.Div(this.Element, "statusvisual");
            var submit = CM.BridgeHacks.Button(CM.BridgeHacks.Div(passRow, "button-row"), CM.Javascript.SR.LABEL_CONTINUE, Bridge.fn.bind(this, function (e) {
                var $t2;
                var a = account.Account;

                if (a == null) {
                    feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_YOUR_ACCOUNT_NAME_IS_REQUIRED);
                    myAccountTitle.scrollIntoView(true);
                    return;
                }

                if (!rdoFor.checked && !rdoAgainst.checked) {
                    feedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_YOUR_VOTE_SELECTION_IS_REQUIRED);
                    myVoteTitle.scrollIntoView(true);
                    return;
                }
                feedback.Hide();

                div.style.display = "none";

                var now = System.DateTime.getUtcNow();
                var vote = ($t2 = new CM.Schema.Vote.ctor(), $t2.VoterID = a.ID, $t2.APIVersion = 1, $t2.PropositionID = this._Proposition, $t2.Value = rdoFor.checked, $t2.CreatedUtc = (_ExistingVote != null ? _ExistingVote.CreatedUtc : now), $t2.UpdatedUtc = now, $t2);

                var sign = new (CM.AsyncRequest$1(CM.Schema.DataSignRequest))();
                sign.Item = new CM.Schema.DataSignRequest.ctor();
                sign.Item.Transforms.add(new CM.Schema.DataSignRequest.Transform(vote.GetSigningData()));
                sign.Item.Password = System.Text.Encoding.UTF8.GetBytes(pass.value);
                sign.OnComplete = Bridge.fn.bind(this, function (signRes) {
                    var $t3, $t4;
                    if (CM.CMResult.op_Equality(signRes.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                        vote.Signature = signRes.Item.Transforms.getItem(0).Output;

                        // Validate
                        var verify = ($t3 = new (CM.AsyncRequest$1(CM.Schema.DataVerifyRequest))(), $t3.Item = ($t4 = new CM.Schema.DataVerifyRequest(), $t4.DataDateUtc = vote.UpdatedUtc, $t4.Input = vote.GetSigningData(), $t4.Signature = vote.Signature, $t4), $t3);
                        a.VerifySignature(verify, CM.Javascript.JSCryptoFunctions.Identity);
                        if (CM.CMResult.op_Equality(verify.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                            // commit
                            this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK, " ..."));
                            CM.BridgeHacks.Clear(serverStatus);
                            var prog = new CM.Javascript.ServerProgressIndicator(serverStatus);
                            prog.SetMainGlyph(CM.Javascript.Assets.SVG.Wait);
                            prog.Show();
                            var put = ($t3 = new (CM.AsyncRequest$1(CM.Javascript.PutRequest))(), $t3.Item = ($t4 = new CM.Javascript.PutRequest(vote), $t4.UI = prog, $t4), $t3.OnComplete = Bridge.fn.bind(this, function (sender) {
                                var req = sender;
                                req.Item.UpdateUIProgress();
                                if (CM.CMResult.op_Equality(req.Result.$clone(), CM.CMResult.S_OK.$clone())) {
                                    this._MainFeedback.Set(CM.Javascript.Assets.SVG.CircleTick, CM.Javascript.FeedbackType.Success, CM.Javascript.SR.LABEL_VOTE_SUBMITTED_SUCCESSFULLY);
                                    var options = CM.BridgeHacks.Div(returnButtons, "button-row center");
                                    CM.BridgeHacks.Button$1(options, CM.Javascript.SR.LABEL_CONTINUE, "/vote");
                                    CM.BridgeHacks.Button$1(options, CM.Javascript.SR.LABEL_GO_TO_YOUR_ACCOUNT, System.String.concat("/", a.ID));
                                    prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleTick);
                                } else {
                                    this._MainFeedback.Set(CM.Javascript.Assets.SVG.CircleError, CM.Javascript.FeedbackType.Error, System.String.concat(CM.Javascript.SR.LABEL_STATUS_A_PROBLEM_OCCURRED, ": ", CM.BridgeHacks.GetLocalisedDescription(req.Result)));
                                    div.style.display = "block";
                                    prog.SetMainGlyph(CM.Javascript.Assets.SVG.CircleError);
                                }
                            }), $t3.OnProgress = $asm.$.CM.Javascript.VotesPage.f5, $t3);
                            CM.Javascript.App.Identity.Client.TryPut(put);
                            return;
                        }
                        // signing error..
                    }

                    div.style.display = "block";
                    this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Error, CM.Javascript.SR.LABEL_STATUS_SIGNING_FAILED);
                });

                this._MainFeedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, System.String.concat(CM.Javascript.SR.LABEL_STATUS_SIGNING_INFORMATION, " ..."));

                account.Account.SignData(sign, CM.Javascript.JSCryptoFunctions.Identity);
            }), "green-button");

            submit.style.display = "none";
            account.OnAccountChanged = Bridge.fn.bind(this, function (a) {
                var $t2;
                if (a == null) {
                    _ExistingVote = null;
                    return;
                }
                feedback.Set(CM.Javascript.Assets.SVG.Wait, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_CONTACTING_NETWORK);
                CM.Javascript.App.Identity.Client.TryFindVote(($t2 = new (CM.AsyncRequest$1(CM.Javascript.FindVoteRequest))(), $t2.Item = new CM.Javascript.FindVoteRequest(a.ID, this._Proposition), $t2.OnComplete = function (e) {
                    if (e.Result.Success) {
                        _ExistingVote = e.Item.Output;
                        var msg = "";
                        if (a.AccountCalculations == null || !a.AccountCalculations.IsEligibleForVoting) {
                            msg = System.String.concat(msg, (System.String.concat(CM.Javascript.SR.LABEL_YOU_ARE_NOT_PRESENTLY_ELIGIBLE_FOR_VOTING, "\n")));
                        }
                        if (_ExistingVote != null) {
                            msg = System.String.concat(msg, (System.String.concat(System.String.format(CM.Javascript.SR.LABEL_YOUR_LAST_VOTE_OF_BLANK_WAS_ON_BLANK, _ExistingVote.Value ? CM.Javascript.SR.LABEL_VOTE_FOR : CM.Javascript.SR.LABEL_VOTE_AGAINST, CM.Helpers.DateToISO8601(_ExistingVote.UpdatedUtc)), "\n")));
                        }
                        if (msg.length > 0) {
                            feedback.Set(CM.Javascript.Assets.SVG.Speech, CM.Javascript.FeedbackType.Default, msg);
                            return;
                        }
                    }
                    _ExistingVote = null;
                    feedback.Hide();
                }, $t2));
            });
            ch.onchange = function (e) {
                passRow.style.display = ch.checked ? "block" : "none";
                submit.style.display = ch.checked ? "inline" : "none";
                reminder.style.display = ch.checked ? "none" : "block";
                confirm.style.display = ch.checked ? "none" : "block";
                pass.focus();
            };
            CM.BridgeHacks.OnEnterKey(pass, Bridge.fn.cacheBind(submit, submit.click));
        }
    }
    });

    Bridge.ns("CM.Javascript.VotesPage", $asm.$);

    Bridge.apply($asm.$.CM.Javascript.VotesPage, {
        f1: function (a, b) {
            return Bridge.compare(Bridge.cast(a, CM.Schema.VotingProposition).CloseUtc, Bridge.cast(b, CM.Schema.VotingProposition).CloseUtc);
        },
        f2: function (x) {
            var url = x.target.getAttribute("url");
            window.open(url);
        },
        f3: function (x) {
            return x.ID === this._Proposition;
        },
        f4: function (e) {
            if (CM.CMResult.op_Equality(e.Result.$clone(), CM.CMResult.S_OK.$clone()) && e.Item.Content != null) {
                var data = JSON.parse(e.Item.Content);
                var ar = Bridge.cast(data, System.Array.type(CM.Schema.VotingProposition));
                CM.Javascript.VotesPage.FixJsonDates(ar);
                var p = System.Linq.Enumerable.from(ar).firstOrDefault(Bridge.fn.bind(this, $asm.$.CM.Javascript.VotesPage.f3), null);
                if (p == null) {
                    this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.TITLE_NOT_FOUND);
                    return;
                }
                this.RenderPopositionPage(p);
                this._MainFeedback.Hide();
            } else {
                this._MainFeedback.Set(CM.Javascript.Assets.SVG.Warning, CM.Javascript.FeedbackType.Default, CM.Javascript.SR.LABEL_STATUS_PROBLEM_REACHING_A_SERVER);
            }
        },
        f5: function (sender) {
            var req = sender;
            req.Item.UpdateUIProgress();
        }
    });

    /**
     * Describes a user account
     *
     * @public
     * @class CM.Schema.Account
     * @augments CM.Message
     * @implements  CM.IStorable
     */
    Bridge.define("CM.Schema.Account", {
        inherits: [CM.Message,CM.IStorable],
        fields: {
            /**
             * Optional server-side computed data for convenience, populated only when requested.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Account
             * @type CM.Schema.AccountCalculations
             */
            AccountCalculations: null
        },
        props: {
            ConsensusCount: 0,
            ConsensusOK: {
                get: function () {
                    return this.ConsensusCount >= CM.Constants.MinimumNumberOfCopies;
                }
            },
            /**
             * Accounts are stored in path ACCNT/{Account ID}
             *
             * @instance
             * @public
             * @readonly
             * @memberof CM.Schema.Account
             * @function Path
             * @type string
             */
            Path: {
                get: function () {
                    return System.String.concat("ACCNT/", this.ID);
                }
            },
            /**
             * Ensures validity of the current account data.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Account
             * @function AccountSignature
             * @type Array.<number>
             */
            AccountSignature: {
                get: function () {
                    return this.Values.Get(System.Array.type(System.Byte), "SIG");
                },
                set: function (value) {
                    this.Values.Set$1(System.Array.type(System.Byte), "SIG", value);
                }
            },
            /**
             * Currently always 1
             *
             * @instance
             * @public
             * @memberof CM.Schema.Account
             * @function APIVersion
             * @type number
             */
            APIVersion: {
                get: function () {
                    return this.Values.Get(System.UInt32, "VER");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "VER", value);
                }
            },
            /**
             * Creation time (ISO-8601 UTC date string)
             *
             * @instance
             * @public
             * @memberof CM.Schema.Account
             * @function CreatedUtc
             * @type System.DateTime
             */
            CreatedUtc: {
                get: function () {
                    return this.Values.Get(System.DateTime, "UTC");
                },
                set: function (value) {
                    this.Values.Set$1(System.DateTime, "UTC", value);
                }
            },
            /**
             * A user-chosen unique account ID or name. Naming rules:
             - Account IDs must match the regular expression ^[\p{L}|\p{Mn}|UnicodeRanges][\p{L}|\p{Mn}|UnicodeRanges|0-9|\-]{2,47}$
             - That is, starts with a letter. Period '.' and dash '-' are allowed. Between 3 and 48 characters in length.
             - The size of ID must be &lt;= 48 UTF-8 bytes. This means that the 'perceived' maximum length is less than 48 if non-ASCII character ranges are used.
             - Account IDs are case in-sensitive during lookup.
             - Account IDs must be rejected if equal to an ISO-31662 code and no GOVERNING-AUTHORITY attribute is present. These IDs are reserved for governing authorities.
             - The ID cannot be changed.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Account
             * @function ID
             * @type string
             */
            ID: {
                get: function () {
                    return this.getItem("ID");
                },
                set: function (value) {
                    this.setItem("ID", value);
                }
            },
            /**
             * A default ISO 3166-2 subdivision code
             *
             * @instance
             * @public
             * @memberof CM.Schema.Account
             * @function Iso31662Region
             * @type string
             */
            Iso31662Region: {
                get: function () {
                    return this.getItem("REG");
                },
                set: function (value) {
                    this.setItem("REG", value);
                }
            },
            /**
             * Stores the private key. The Private key component is encrypted
             using a specified key derivation routine, such as RFC2898.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Account
             * @function PrivateKey
             * @type CM.Schema.PrivateKey
             */
            PrivateKey: {
                get: function () {
                    return this.Values.Get(CM.Schema.PrivateKey, "PRIKEY");
                },
                set: function (value) {
                    this.Values.Set$1(CM.Schema.PrivateKey, "PRIKEY", value);
                }
            },
            /**
             * Modification time (ISO-8601 UTC date string)
             *
             * @instance
             * @public
             * @memberof CM.Schema.Account
             * @function UpdatedUtc
             * @type System.DateTime
             */
            UpdatedUtc: {
                get: function () {
                    return this.Values.Get(System.DateTime, "UPD-UTC");
                },
                set: function (value) {
                    this.Values.Set$1(System.DateTime, "UPD-UTC", value);
                }
            }
        },
        alias: [
            "ConsensusCount", "CM$IStorable$ConsensusCount",
            "ConsensusOK", "CM$IStorable$ConsensusOK",
            "Path", "CM$IStorable$Path",
            "UpdatedUtc", "CM$IStorable$UpdatedUtc"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                CM.Message.ctor.call(this);
            },
            $ctor1: function (payload) {
                this.$initialize();
                CM.Message.$ctor1.call(this, payload);
            }
        },
        methods: {
            /**
             * Appends a new PublicKey to the account.
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @param   {CM.Schema.PublicKey}    key    The new public key to append.
             * @return  {void}
             */
            AppendNewPublicKey: function (key) {
                if (key == null) {
                    throw new System.ArgumentNullException("key");
                }
                if (System.DateTime.lt(key.EffectiveDate, this.CreatedUtc) || !Bridge.equals(key.EffectiveDate, this.UpdatedUtc)) {
                    throw new System.ArgumentException("Key effective date must be equal to UpdatedUtc.");
                }
                this.Values.Append$2("PUBKEY", key.toString());
            },
            /**
             * Gets all values in the Account containing the ATTR- prefix.
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @return  {CM.NamedValueList}
             */
            CollectAttributes: function () {
                var ar = new CM.NamedValueList();
                for (var i = 0; i < this.Values.Count; i = (i + 1) | 0) {
                    var v = this.Values.getItem(i);
                    if (CM.BridgeHacks.StartsWith(v.Name, "ATTR-", 5)) {
                        ar.Append$2(v.Name, v.Value);
                    }
                }
                return ar;
            },
            /**
             * Returns a sorted list of all public keys in the account (Oldest first.)
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @return  {System.Collections.Generic.List$1}
             */
            GetAllPublicKeys: function () {
                var ar = new (System.Collections.Generic.List$1(CM.Schema.PublicKey))();
                for (var i = 0; i < this.Values.Count; i = (i + 1) | 0) {
                    if (System.String.compare(this.Values.getItem(i).Name, "PUBKEY", 5) === 0) {
                        var tmp = { };
                        if (CM.Schema.PublicKey.TryParse(this.Values.getItem(i).Value, tmp)) {
                            ar.add(tmp.v);
                        }
                    }
                }
                ar.sort();
                return ar;
            },
            /**
             * Account signing data consists of UTF8 encoded bytes of all Account line 'values'
             in their originally specified order, with the exception of CALC-XX and SIG lines.
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @return  {Array.<number>}
             */
            GetSigningData: function () {
                var data = new (System.Collections.Generic.List$1(System.Byte))();
                for (var i = 0; i < this.Values.Count; i = (i + 1) | 0) {
                    var v = this.Values.getItem(i);
                    if (v.Name == null || System.String.compare(v.Name, "SIG", 5) === 0 || CM.BridgeHacks.StartsWith(v.Name, "CALC-", 5)) {
                        continue;
                    }
                    data.addRange(System.Text.Encoding.UTF8.GetBytes(this.Values.getItem(i).Value));
                }
                return data.toArray();
            },
            /**
             * Deletes and replaces all attributes with the specified collection.
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @param   {CM.NamedValueList}    newAttributes    The new attribute set to replace with.
             * @return  {void}
             */
            ReplaceAttributes: function (newAttributes) {
                for (var i = 0; i < this.Values.Count; i = (i + 1) | 0) {
                    if (CM.BridgeHacks.StartsWith(this.Values.getItem(i).Name, "ATTR-", 5)) {
                        this.Values.RemoveAt(Bridge.identity(i, (i = (i - 1) | 0)));
                    }
                }
                this.Values.Append(newAttributes);
            },
            /**
             * RSA Signs the specified data, which is first SHA256'd. The provided password will be used
             according to the account's derivation scheme to decode the RSA private key.
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @param   {CM.AsyncRequest$1}      e         The password and data to sign.
             * @param   {CM.ICryptoFunctions}    crypto    The crypto implementation.
             * @return  {void}
             */
            SignData: function (e, crypto) {
                var $t, $t1;
                var pubKey = { };
                if (!this.TryFindPublicKey(System.DateTime.getUtcNow(), pubKey)) {
                    e.Completed(CM.CMResult.E_Account_Missing_Public_Key.$clone());
                    return;
                }

                switch (this.PrivateKey.SchemeID) {
                    case CM.Schema.PrivateKeySchemeID.AES_CBC_PKCS7_RFC2898_HMACSHA1_10000: 
                        crypto.CM$ICryptoFunctions$BeginRFC2898(($t = new (CM.AsyncRequest$1(CM.RFC2898CryptoRequest))(), $t.Item = ($t1 = new CM.RFC2898CryptoRequest(), $t1.Salt = this.PrivateKey.Salt, $t1.Iterations = 10000, $t1.IVSizeBytes = 16, $t1.KeySizeBytes = 32, $t1.Password = e.Item.Password, $t1), $t.OnComplete = Bridge.fn.bind(this, function (aesKey) {
                            var $t2, $t3;
                            if (!aesKey.Result.Success) {
                                e.Completed(aesKey.Result.$clone());
                                return;
                            }
                            crypto.CM$ICryptoFunctions$BeginAESDecrypt(($t2 = new (CM.AsyncRequest$1(CM.AESCryptoRequest))(), $t2.Item = ($t3 = new CM.AESCryptoRequest(), $t3.Key = aesKey.Item.OutputKey, $t3.IV = aesKey.Item.OutputIV, $t3.Input = this.PrivateKey.Encrypted, $t3), $t2.OnComplete = function (aesResult) {
                                var $t4, $t5;
                                if (!aesResult.Result.Success) {
                                    e.Completed(aesResult.Result.$clone());
                                    return;
                                }
                                var privateKey = aesResult.Item.Output;
                                var completed = 0;
                                for (var i = 0; i < e.Item.Transforms.Count; i = (i + 1) | 0) {
                                    crypto.CM$ICryptoFunctions$BeginRSASign(($t4 = new (CM.AsyncRequest$1(CM.RSASignRequest))(), $t4.Item = ($t5 = new CM.RSASignRequest(), $t5.Input = e.Item.Transforms.getItem(i).Input, $t5.PrivateKey = privateKey, $t5.PublicKey = pubKey.v.Key, $t5.Tag = e.Item.Transforms.getItem(i), $t5), $t4.OnComplete = function (signature) {
                                        if (!signature.Result.Success) {
                                            e.Completed(signature.Result.$clone());
                                            return;
                                        }
                                        Bridge.cast(signature.Item.Tag, CM.Schema.DataSignRequest.Transform).Output = signature.Item.OutputSignature;
                                        completed = (completed + 1) | 0;
                                        if (completed === e.Item.Transforms.Count) {
                                            e.Completed(CM.CMResult.S_OK.$clone());
                                        }
                                    }, $t4));
                                }
                            }, $t2));
                        }), $t));
                        break;
                    default: 
                        e.Completed(CM.CMResult.E_Crypto_Unrecognized_SchemeID.$clone());
                        break;
                }
            },
            /**
             * Gets the public/private key
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @param   {System.DateTime}        dateUtc    The date when the public key was/is effective.
             * @param   {CM.Schema.PublicKey}    key        Pointer to receive the located public key.
             * @return  {boolean}                           True if a key was found, otherwise false.
             */
            TryFindPublicKey: function (dateUtc, key) {
                var bestKey = null;
                for (var i = 0; i < this.Values.Count; i = (i + 1) | 0) {
                    if (System.String.compare(this.Values.getItem(i).Name, "PUBKEY", 5) === 0) {
                        var tmp = { };
                        CM.Schema.PublicKey.TryParse(this.Values.getItem(i).Value, tmp);
                        if (System.DateTime.gt(tmp.v.EffectiveDate, dateUtc) || (bestKey != null && System.DateTime.lt(tmp.v.EffectiveDate, bestKey.EffectiveDate))) {
                            continue;
                        }
                        bestKey = tmp.v;
                    }
                }
                key.v = bestKey;
                return key.v != null;
            },
            /**
             * Verifies the specified RSA signature using the account's public key
             for the specified time.
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @param   {CM.AsyncRequest$1}      e         The time stamp, data and signature to validate.
             * @param   {CM.ICryptoFunctions}    crypto    The crypto implementation.
             * @return  {void}
             */
            VerifySignature: function (e, crypto) {
                var $t, $t1;
                var pubKey = { };
                if (!this.TryFindPublicKey(e.Item.DataDateUtc, pubKey)) {
                    e.Completed(CM.CMResult.E_Account_Missing_Public_Key.$clone());
                    return;
                }
                crypto.CM$ICryptoFunctions$BeginRSAVerify(($t = new (CM.AsyncRequest$1(CM.RSAVerifyRequest))(), $t.Item = ($t1 = new CM.RSAVerifyRequest(), $t1.Exponent = CM.Constants.StandardExponent65537, $t1.Input = e.Item.Input, $t1.InputSignature = e.Item.Signature, $t1.PublicKey = pubKey.v.Key, $t1), $t.OnComplete = function (r) {
                    e.Completed(r.Result.$clone());
                }, $t));
            },
            ChangePasswordAndSign: function (e, crypto) {
                var $t, $t1;
                e.UpdateProgress(0);
                if (this.PrivateKey != null && e.Item.OldPass == null) {
                    // old pass is required.
                    e.Completed(CM.CMResult.E_Crypto_Invalid_Password.$clone());
                    return;
                }
                if (this.PrivateKey != null) {
                    var oldPubKey = { };
                    if (!this.TryFindPublicKey(System.DateTime.getUtcNow(), oldPubKey)) {
                        e.Completed(CM.CMResult.E_Account_Missing_Public_Key.$clone());
                        return;
                    }
                    // we're doing a key change, decrypt the old one
                    crypto.CM$ICryptoFunctions$BeginRFC2898(($t = new (CM.AsyncRequest$1(CM.RFC2898CryptoRequest))(), $t.Item = ($t1 = new CM.RFC2898CryptoRequest(), $t1.Salt = this.PrivateKey.Salt, $t1.Iterations = 10000, $t1.IVSizeBytes = 16, $t1.KeySizeBytes = 32, $t1.Password = System.Text.Encoding.UTF8.GetBytes(e.Item.OldPass), $t1), $t.OnComplete = Bridge.fn.bind(this, function (aesKey) {
                        var $t2, $t3;
                        if (!aesKey.Result.Success) {
                            e.Completed(aesKey.Result.$clone());
                            return;
                        }
                        crypto.CM$ICryptoFunctions$BeginAESDecrypt(($t2 = new (CM.AsyncRequest$1(CM.AESCryptoRequest))(), $t2.Item = ($t3 = new CM.AESCryptoRequest(), $t3.Key = aesKey.Item.OutputKey, $t3.IV = aesKey.Item.OutputIV, $t3.Input = this.PrivateKey.Encrypted, $t3), $t2.OnComplete = Bridge.fn.bind(this, function (aesResult) {
                            if (!aesResult.Result.Success) {
                                e.Completed(aesResult.Result.$clone());
                                return;
                            }
                            var oldPrivateKey = aesResult.Item.Output;
                            this.ChangePasswordAndSign$1(e, crypto, oldPrivateKey, oldPubKey.v);
                        }), $t2));
                    }), $t));
                } else {
                    this.ChangePasswordAndSign$1(e, crypto, null, null);
                }
            },
            ChangePasswordAndSign$1: function (e, crypto, oldPrivateKey, oldPubKey) {
                var $t;
                crypto.CM$ICryptoFunctions$BeginRSAKeyGen(($t = new (CM.AsyncRequest$1(CM.RSAKeyRequest))(), $t.Item = new CM.RSAKeyRequest(), $t.OnComplete = Bridge.fn.bind(this, function (rsa) {
                    var $t1, $t2;
                    if (!rsa.Result.Success) {
                        e.Completed(rsa.Result.$clone());
                        return;
                    }
                    e.UpdateProgress(25);
                    var salt = System.Array.init(32, 0, System.Byte);
                    CM.Cryptography.RNG.RandomBytes(salt);
                    crypto.CM$ICryptoFunctions$BeginRFC2898(($t1 = new (CM.AsyncRequest$1(CM.RFC2898CryptoRequest))(), $t1.Item = ($t2 = new CM.RFC2898CryptoRequest(), $t2.Salt = salt, $t2.Iterations = 10000, $t2.IVSizeBytes = 16, $t2.KeySizeBytes = 32, $t2.Password = System.Text.Encoding.UTF8.GetBytes(e.Item.NewPass), $t2), $t1.OnComplete = Bridge.fn.bind(this, function (aesKey) {
                        var $t3, $t4;
                        if (!aesKey.Result.Success) {
                            e.Completed(aesKey.Result.$clone());
                            return;
                        }
                        e.UpdateProgress(50);
                        crypto.CM$ICryptoFunctions$BeginAESEncrypt(($t3 = new (CM.AsyncRequest$1(CM.AESCryptoRequest))(), $t3.Item = ($t4 = new CM.AESCryptoRequest(), $t4.Key = aesKey.Item.OutputKey, $t4.IV = aesKey.Item.OutputIV, $t4.Input = rsa.Item.Output.D, $t4), $t3.OnComplete = Bridge.fn.bind(this, function (encrypted) {
                            var $t5, $t6;
                            if (!encrypted.Result.Success) {
                                e.Completed(encrypted.Result.$clone());
                                return;
                            }
                            e.UpdateProgress(75);
                            // Commit the encrypted private + clear public key
                            this.PrivateKey = ($t5 = new CM.Schema.PrivateKey(), $t5.SchemeID = CM.Schema.PrivateKeySchemeID.AES_CBC_PKCS7_RFC2898_HMACSHA1_10000, $t5.Salt = salt, $t5.Encrypted = encrypted.Item.Output, $t5);

                            var newPubKey = ($t5 = new CM.Schema.PublicKey(), $t5.EffectiveDate = this.UpdatedUtc, $t5.Key = rsa.Item.Output.Modulus, $t5);

                            if (oldPrivateKey != null) {
                                crypto.CM$ICryptoFunctions$BeginRSASign(($t5 = new (CM.AsyncRequest$1(CM.RSASignRequest))(), $t5.Item = ($t6 = new CM.RSASignRequest(), $t6.Input = newPubKey.GetModificationSigningData(), $t6.PrivateKey = oldPrivateKey, $t6.PublicKey = oldPubKey.Key, $t6), $t5.OnComplete = Bridge.fn.bind(this, function (signature) {
                                    if (!signature.Result.Success) {
                                        e.Completed(signature.Result.$clone());
                                        return;
                                    }
                                    newPubKey.ModificationSignature = signature.Item.OutputSignature;
                                    this.AppendNewPublicKey(newPubKey);
                                    this.SignAccount(e, crypto, rsa.Item);
                                }), $t5));
                            } else {
                                this.AppendNewPublicKey(newPubKey);
                                this.SignAccount(e, crypto, rsa.Item);
                            }
                        }), $t3));
                    }), $t1));
                }), $t));
            },
            SignAccount: function (e, crypto, rsa) {
                var $t, $t1;
                crypto.CM$ICryptoFunctions$BeginRSASign(($t = new (CM.AsyncRequest$1(CM.RSASignRequest))(), $t.Item = ($t1 = new CM.RSASignRequest(), $t1.Input = this.GetSigningData(), $t1.PrivateKey = rsa.Output.D, $t1.PublicKey = rsa.Output.Modulus, $t1), $t.OnComplete = Bridge.fn.bind(this, function (signature) {
                    if (!signature.Result.Success) {
                        e.Completed(signature.Result.$clone());
                        return;
                    }
                    this.AccountSignature = signature.Item.OutputSignature;
                    e.UpdateProgress(100);
                    e.Completed(CM.CMResult.S_OK.$clone());
                }), $t));
            },
            /**
             * Account IDs that are equal to an ISO3166-2 subdivision code
             must have an ATTR-GOV attribute which contains a signature
             of the Creation UTC date and region code.
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @return  {Array.<number>}        The data to use for IsGoverningAuthority verification.
             */
            GetGoverningAuthoritySigningData: function () {
                var data = new (System.Collections.Generic.List$1(System.Byte))();
                data.addRange(System.Text.Encoding.UTF8.GetBytes(CM.Helpers.DateToISO8601(this.CreatedUtc)));
                data.addRange(System.Text.Encoding.UTF8.GetBytes(this.Iso31662Region));
                return data.toArray();
            },
            /**
             * Determines whether or not the account's ATTR-GOV signature is valid.
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @param   {CM.AsyncRequest$1}      req       
             * @param   {CM.ICryptoFunctions}    crypto
             * @return  {void}
             */
            CheckIsValidGoverningAuthority: function (req, crypto) {
                var $t, $t1, $t2;
                var sig = ($t = this.Values.getItem$1(CM.Schema.AccountAttributes.GoverningAuthority_Key), $t != null ? $t : null);

                if (sig == null) {
                    req.Completed(CM.CMResult.E_General_Failure.$clone());
                    return;
                }
                try {
                    var verif = ($t1 = new (CM.AsyncRequest$1(CM.RSAVerifyRequest))(), $t1.Item = ($t2 = new CM.RSAVerifyRequest(), $t2.Exponent = CM.Constants.StandardExponent65537, $t2.Input = this.GetGoverningAuthoritySigningData(), $t2.InputSignature = System.Convert.fromBase64String(sig), $t2.PublicKey = CM.Constants.GoverningAuthorityRSAPublicKey, $t2), $t1.OnComplete = function (res) {
                        req.Item = CM.CMResult.op_Equality(res.Result.$clone(), CM.CMResult.S_OK.$clone());
                        req.Completed(res.Result.$clone());
                    }, $t1);
                    crypto.CM$ICryptoFunctions$BeginRSAVerify(verif);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    req.Completed(CM.CMResult.E_General_Failure.$clone());
                }
            },
            GetIncomeEligibilityLocalised: function () {
                var eligibility = this.Values.getItem$1(CM.Schema.AccountAttributes.IncomeEligibility_Key);
                switch (eligibility) {
                    case CM.Schema.AccountAttributes.IncomeEligibility_Working: 
                        eligibility = CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_WORKING;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_LookingForWork: 
                        eligibility = CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_LOOKING_FOR_WORK;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_HealthProblem: 
                        eligibility = CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_HEALTH_PROBLEM;
                        break;
                    case CM.Schema.AccountAttributes.IncomeEligibility_Retired: 
                        eligibility = CM.Javascript.SR.LABEL_INCOME_ELIGIBILITY_RETIRED;
                        break;
                    default: 
                        eligibility = CM.Javascript.SR.LABEL_VALUE_NOT_SET;
                        break;
                }
                return eligibility;
            },
            GetOneLineAttributeSummaryHtml: function () {
                var s = new System.Text.StringBuilder();
                var age = (System.DateTime.subdd(System.DateTime.getUtcNow(), this.CreatedUtc));
                s.append("<span>");
                s.append(age.getTotalDays() / 365 > 1 ? System.String.format(CM.Javascript.SR.LABEL_YEARS_OLD, Bridge.box((((Bridge.Int.div(Bridge.Int.clip32(age.getTotalDays()), 365)) | 0)), System.Int32)) : System.String.format(CM.Javascript.SR.LABEL_DAYS_OLD, Bridge.box(Bridge.Int.clip32(age.getTotalDays()), System.Int32)));
                s.append("</span>");

                var eligibility = this.GetIncomeEligibilityLocalised();
                if (!Bridge.referenceEquals(eligibility, CM.Javascript.SR.LABEL_VALUE_NOT_SET)) {
                    s.append(System.String.concat("<span>&bull;</span><span>", eligibility, "</span>"));
                }
                var separate = s.getLength() > 0;
                for (var i = 0; i < this.Values.Count; i = (i + 1) | 0) {
                    var v = this.Values.getItem(i);
                    if (System.String.equals(v.Name, "ATTR-SKILL", 5) && !System.String.isNullOrEmpty(v.Value)) {
                        var skill = new CM.Schema.AccountAttributes.SkillCsv.$ctor1(v.Value);
                        if (!System.String.isNullOrEmpty(skill.Value)) {
                            if (separate) {
                                s.append("<span>&bull;</span>");
                                separate = false;
                            }
                            s.append("<span>");
                            s.append(CM.Javascript.Page.HtmlEncode(skill.Value));
                            switch (skill.Level) {
                                case CM.Schema.AccountAttributes.SkillLevel.Amateur: 
                                    break;
                                case CM.Schema.AccountAttributes.SkillLevel.Certified: 
                                    s.append(System.String.concat(" (", CM.Javascript.SR.LABEL_SKILL_LEVEL_CERTIFIED, ")"));
                                    break;
                                case CM.Schema.AccountAttributes.SkillLevel.Experienced: 
                                    s.append(System.String.concat(" (", CM.Javascript.SR.LABEL_SKILL_LEVEL_EXPERIENCED, ")"));
                                    break;
                                case CM.Schema.AccountAttributes.SkillLevel.Qualified: 
                                    s.append(System.String.concat(" (", CM.Javascript.SR.LABEL_SKILL_LEVEL_QUALIFIED, ")"));
                                    break;
                            }
                            s.append("</span> ");
                        }
                    }
                }
                return s.toString();
            },
            /**
             * Javascript Extension method -- pulls skills and levels and produces a
             line delimited list.
             *
             * @instance
             * @public
             * @this CM.Schema.Account
             * @memberof CM.Schema.Account
             * @return  {string}
             */
            GetSkillsSummary: function () {
                var s = new System.Text.StringBuilder();
                for (var i = 0; i < this.Values.Count; i = (i + 1) | 0) {
                    var v = this.Values.getItem(i);
                    if (System.String.equals(v.Name, "ATTR-SKILL", 5) && !System.String.isNullOrEmpty(v.Value)) {
                        var skill = new CM.Schema.AccountAttributes.SkillCsv.$ctor1(v.Value);
                        if (!System.String.isNullOrEmpty(skill.Value)) {
                            if (s.getLength() > 0) {
                                s.append("\n");
                            }
                            s.append(skill.Value);
                            switch (skill.Level) {
                                case CM.Schema.AccountAttributes.SkillLevel.Amateur: 
                                    break;
                                case CM.Schema.AccountAttributes.SkillLevel.Certified: 
                                    s.append(System.String.concat(" (", CM.Javascript.SR.LABEL_SKILL_LEVEL_CERTIFIED.toLowerCase(), ")"));
                                    break;
                                case CM.Schema.AccountAttributes.SkillLevel.Experienced: 
                                    s.append(System.String.concat(" (", CM.Javascript.SR.LABEL_SKILL_LEVEL_EXPERIENCED.toLowerCase(), ")"));
                                    break;
                                case CM.Schema.AccountAttributes.SkillLevel.Qualified: 
                                    s.append(System.String.concat(" (", CM.Javascript.SR.LABEL_SKILL_LEVEL_QUALIFIED.toLowerCase(), ")"));
                                    break;
                            }
                        }
                    }
                }
                return s.toString();
            }
        }
    });

    Bridge.define("CM.Schema.FindResponsiblePeerRequest", {
        inherits: [CM.Message],
        props: {
            /**
             * Distributed Hash Table storage key in decimal
             *
             * @instance
             * @public
             * @memberof CM.Schema.FindResponsiblePeerRequest
             * @function DHTID
             * @type Array.<number>
             */
            DHTID: {
                get: function () {
                    return this.Values.Get(System.Array.type(System.Byte), "DHT-ID");
                },
                set: function (value) {
                    this.Values.Set$1(System.Array.type(System.Byte), "DHT-ID", value);
                }
            },
            HopList: {
                get: function () {
                    return this.Values.Get(System.String, "HOPS");
                },
                set: function (value) {
                    this.Values.Set$1(System.String, "HOPS", value);
                }
            },
            MaxHopCount: {
                get: function () {
                    return this.Values.Get(System.UInt32, "MAX-HOPS");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "MAX-HOPS", value);
                }
            }
        }
    });

    Bridge.define("CM.Schema.FindResponsiblePeerResponse", {
        inherits: [CM.Message],
        props: {
            HopList: {
                get: function () {
                    return this.Values.Get(System.String, "HOPS");
                },
                set: function (value) {
                    this.Values.Set$1(System.String, "HOPS", value);
                }
            },
            /**
             * The proposed end-point that is responsible for the requested key
             *
             * @instance
             * @public
             * @memberof CM.Schema.FindResponsiblePeerResponse
             * @function PeerEndpoint
             * @type string
             */
            PeerEndpoint: {
                get: function () {
                    return this.getItem("PEER");
                },
                set: function (value) {
                    this.setItem("PEER", value);
                }
            }
        }
    });

    /**
     * Describes a DHT peer search request. The search path is specified as the argument of the CMD LIST line.
     *
     * @public
     * @class CM.Schema.ListRequest
     * @augments CM.Message
     */
    Bridge.define("CM.Schema.ListRequest", {
        inherits: [CM.Message],
        props: {
            /**
             * Currently always 1
             *
             * @instance
             * @public
             * @memberof CM.Schema.ListRequest
             * @function APIVersion
             * @type number
             */
            APIVersion: {
                get: function () {
                    return this.Values.Get(System.UInt32, "VER");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "VER", value);
                }
            },
            /**
             * The item Updated date to start from
             *
             * @instance
             * @public
             * @memberof CM.Schema.ListRequest
             * @function UpdatedUtcFromInclusive
             * @type System.DateTime
             */
            UpdatedUtcFromInclusive: {
                get: function () {
                    return this.Values.Get(System.DateTime, "UTC-FROM");
                },
                set: function (value) {
                    this.Values.Set$1(System.DateTime, "UTC-FROM", value);
                }
            },
            /**
             * The item Updated date to stop at
             *
             * @instance
             * @public
             * @memberof CM.Schema.ListRequest
             * @function UpdatedUtcToExclusive
             * @type System.DateTime
             */
            UpdatedUtcToExclusive: {
                get: function () {
                    return this.Values.Get(System.DateTime, "UTC-TO");
                },
                set: function (value) {
                    this.Values.Set$1(System.DateTime, "UTC-TO", value);
                }
            },
            /**
             * The maximum number of results to return. The default value is 1000 when not specified.
             *
             * @instance
             * @public
             * @memberof CM.Schema.ListRequest
             * @function Max
             * @type number
             */
            Max: {
                get: function () {
                    return this.Values.Get(System.UInt32, "MAX");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "MAX", value);
                }
            },
            /**
             * The starting index.
             *
             * @instance
             * @public
             * @memberof CM.Schema.ListRequest
             * @function StartAt
             * @type number
             */
            StartAt: {
                get: function () {
                    return this.Values.Get(System.UInt32, "START");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "START", value);
                }
            },
            /**
             * For Accounts: [UTC | UPD-UTC | ID] [ASC | DESC]
             For Transactions: [UTC | UPD-UTC | PYR-ID | PYE-ID | AMNT] [ASC | DESC]
             For Votes: [UTC | UPD-UTC | VTR-ID] [ASC | DESC]
             *
             * @instance
             * @public
             * @memberof CM.Schema.ListRequest
             * @function Sort
             * @type string
             */
            Sort: {
                get: function () {
                    return this.getItem("SORT");
                },
                set: function (value) {
                    this.setItem("SORT", value);
                }
            }
        }
    });

    /**
     * Describes a DHT peer search reply
     *
     * @public
     * @class CM.Schema.ListResponse
     * @augments CM.Message
     */
    Bridge.define("CM.Schema.ListResponse", {
        inherits: [CM.Message],
        props: {
            /**
             * The starting index for this result
             *
             * @instance
             * @public
             * @memberof CM.Schema.ListResponse
             * @function StartAt
             * @type number
             */
            StartAt: {
                get: function () {
                    return this.Values.Get(System.UInt32, "START");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "START", value);
                }
            },
            /**
             * The number of items in this result
             *
             * @instance
             * @public
             * @memberof CM.Schema.ListResponse
             * @function Count
             * @type number
             */
            Count: {
                get: function () {
                    return this.Values.Get(System.UInt32, "COUNT");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "COUNT", value);
                }
            },
            /**
             * The total number of records available
             *
             * @instance
             * @public
             * @memberof CM.Schema.ListResponse
             * @function Total
             * @type number
             */
            Total: {
                get: function () {
                    return this.Values.Get(System.UInt32, "TOTAL");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "TOTAL", value);
                }
            }
        }
    });

    Bridge.define("CM.Schema.PingRequest", {
        inherits: [CM.Message],
        props: {
            /**
             * When specified, informs the peer that I'm a DHT peer also, and this
             is my public end-point. Peers must reject this field if the end-point
             IP address does not match the incoming request.
             *
             * @instance
             * @public
             * @memberof CM.Schema.PingRequest
             * @function EndPoint
             * @type string
             */
            EndPoint: {
                get: function () {
                    return this.getItem("EP");
                },
                set: function (value) {
                    this.setItem("EP", value);
                }
            }
        }
    });

    Bridge.define("CM.Schema.PingResponse", {
        inherits: [CM.Message],
        props: {
            /**
             * Provides the caller with their external IP address
             *
             * @instance
             * @public
             * @memberof CM.Schema.PingResponse
             * @function YourIP
             * @type string
             */
            YourIP: {
                get: function () {
                    return this.getItem("YOUR-IP");
                },
                set: function (value) {
                    this.setItem("YOUR-IP", value);
                }
            },
            /**
             * The IP that the server thinks its public address is. This can help clients
             correlate seed host names with IP addresses, as well as detect network address
             translation issues.
             *
             * @instance
             * @public
             * @memberof CM.Schema.PingResponse
             * @function MyIP
             * @type string
             */
            MyIP: {
                get: function () {
                    return this.getItem("MY-IP");
                },
                set: function (value) {
                    this.setItem("MY-IP", value);
                }
            },
            /**
             * The endpoint of the peer's successor
             *
             * @instance
             * @public
             * @memberof CM.Schema.PingResponse
             * @function SuccessorEndpoint
             * @type string
             */
            SuccessorEndpoint: {
                get: function () {
                    return this.getItem("SUCC");
                },
                set: function (value) {
                    this.setItem("SUCC", value);
                }
            },
            /**
             * The endpoint of the peer's predecessor
             *
             * @instance
             * @public
             * @memberof CM.Schema.PingResponse
             * @function PredecessorEndpoint
             * @type string
             */
            PredecessorEndpoint: {
                get: function () {
                    return this.getItem("PRED");
                },
                set: function (value) {
                    this.setItem("PRED", value);
                }
            },
            /**
             * Comma delimited list of top 10 seen endpoints
             *
             * @instance
             * @public
             * @memberof CM.Schema.PingResponse
             * @function Seen
             * @type string
             */
            Seen: {
                get: function () {
                    return this.getItem("SEEN");
                },
                set: function (value) {
                    this.setItem("SEEN", value);
                }
            }
        }
    });

    /**
     * Describes a digitally signed money transfer between accounts.
     *
     * @public
     * @class CM.Schema.Transaction
     * @augments CM.Message
     * @implements  CM.IStorable
     */
    Bridge.define("CM.Schema.Transaction", {
        inherits: [CM.Message,CM.IStorable],
        props: {
            /**
             * Gets the transaction globally unique identifier which consists of
             ISO8601(CreatedUtc) + " " + PayeeID + " " + PayerID
             *
             * @instance
             * @public
             * @readonly
             * @memberof CM.Schema.Transaction
             * @function ID
             * @type string
             */
            ID: {
                get: function () {
                    return System.String.concat(CM.Helpers.DateToISO8601(this.CreatedUtc), " ", this.PayeeID, " ", this.PayerID);
                }
            },
            ConsensusCount: 0,
            ConsensusOK: {
                get: function () {
                    return this.ConsensusCount >= CM.Constants.MinimumNumberOfCopies;
                }
            },
            Path: {
                get: function () {
                    // 2016-06-05T09:48:12 account1 account2

                    return System.String.concat("TRANS/", this.ID);
                }
            },
            PayeePath: {
                get: function () {
                    return System.String.concat("ACCNT/", this.PayeeID, "/", this.Path);
                }
            },
            PayerPath: {
                get: function () {
                    return System.String.concat("ACCNT/", this.PayerID, "/", this.Path);
                }
            },
            RegionPath: {
                get: function () {
                    return System.String.concat("REGION/", this.PayeeRegion, "/", this.Path);
                }
            },
            /**
             * Currently always 1
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function APIVersion
             * @type number
             */
            APIVersion: {
                get: function () {
                    return this.Values.Get(System.UInt32, "VER");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "VER", value);
                }
            },
            /**
             * Creation time (ISO-8601 UTC date string)
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function CreatedUtc
             * @type System.DateTime
             */
            CreatedUtc: {
                get: function () {
                    return this.Values.Get(System.DateTime, "UTC");
                },
                set: function (value) {
                    this.Values.Set$1(System.DateTime, "UTC", value);
                }
            },
            /**
             * The amount of the transaction up to 6 decimal places.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function Amount
             * @type number
             */
            Amount: {
                get: function () {
                    return this.Values.Get(System.Decimal, "AMNT");
                },
                set: function (value) {
                    this.Values.Set$1(System.Decimal, "AMNT", value);
                }
            },
            /**
             * A reader-friendly plain-text UTF8 description or note about the transaction. Maximum allowed length is 255 UTF-8 bytes.
             Trusted implementations which generate HTML must HTML-encode all memos.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function Memo
             * @type string
             */
            Memo: {
                get: function () {
                    return this.Values.Get(System.String, "MEMO");
                },
                set: function (value) {
                    this.Values.Set$1(System.String, "MEMO", value);
                }
            },
            /**
             * The recipient/payee ID
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayeeID
             * @type string
             */
            PayeeID: {
                get: function () {
                    return this.Values.Get(System.String, "PYE-ID");
                },
                set: function (value) {
                    this.Values.Set$1(System.String, "PYE-ID", value);
                }
            },
            /**
             * The Payee's region at time of transaction.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayeeRegion
             * @type string
             */
            PayeeRegion: {
                get: function () {
                    return this.Values.Get(System.String, "PYE-REG");
                },
                set: function (value) {
                    this.Values.Set$1(System.String, "PYE-REG", value);
                }
            },
            /**
             * An optional electronic tag which can only be set by the recipient before signing. Up to 48 UTF8 bytes.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayeeTag
             * @type string
             */
            PayeeTag: {
                get: function () {
                    return this.Values.Get(System.String, "PYE-TAG");
                },
                set: function (value) {
                    this.Values.Set$1(System.String, "PYE-TAG", value);
                }
            },
            /**
             * Last payee update time (ISO-8601 UTC date string)
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayeeUpdatedUtc
             * @type System.DateTime
             */
            PayeeUpdatedUtc: {
                get: function () {
                    return this.Values.Get(System.DateTime, "PYE-UTC");
                },
                set: function (value) {
                    this.Values.Set$1(System.DateTime, "PYE-UTC", value);
                }
            },
            /**
             * Accept, Decline or Refund
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayeeStatus
             * @type CM.Schema.PayeeStatus
             */
            PayeeStatus: {
                get: function () {
                    return this.Values.Get(CM.Schema.PayeeStatus, "PYE-STAT");
                },
                set: function (value) {
                    this.Values.Set$1(CM.Schema.PayeeStatus, "PYE-STAT", value);
                }
            },
            /**
             * Signature of the payee. Basically confirms that 'yes, I recognise the sender and I'm expecting this payment.'
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayeeSignature
             * @type Array.<number>
             */
            PayeeSignature: {
                get: function () {
                    return this.Values.Get(System.Array.type(System.Byte), "PYE-SIG");
                },
                set: function (value) {
                    this.Values.Set$1(System.Array.type(System.Byte), "PYE-SIG", value);
                }
            },
            /**
             * The sender/payer ID
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayerID
             * @type string
             */
            PayerID: {
                get: function () {
                    return this.Values.Get(System.String, "PYR-ID");
                },
                set: function (value) {
                    this.Values.Set$1(System.String, "PYR-ID", value);
                }
            },
            /**
             * The payer's region at time of transaction.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayerRegion
             * @type string
             */
            PayerRegion: {
                get: function () {
                    return this.Values.Get(System.String, "PYR-REG");
                },
                set: function (value) {
                    this.Values.Set$1(System.String, "PYR-REG", value);
                }
            },
            /**
             * An optional electronic tag which can only be set by the payer before signing. Up to 48 UTF8 bytes.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayerTag
             * @type string
             */
            PayerTag: {
                get: function () {
                    return this.Values.Get(System.String, "PYR-TAG");
                },
                set: function (value) {
                    this.Values.Set$1(System.String, "PYR-TAG", value);
                }
            },
            /**
             * Last payer update time (ISO-8601 UTC date string)
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayerUpdatedUtc
             * @type System.DateTime
             */
            PayerUpdatedUtc: {
                get: function () {
                    return this.Values.Get(System.DateTime, "PYR-UTC");
                },
                set: function (value) {
                    this.Values.Set$1(System.DateTime, "PYR-UTC", value);
                }
            },
            /**
             * Accept, Dispute
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayerStatus
             * @type CM.Schema.PayerStatus
             */
            PayerStatus: {
                get: function () {
                    return this.Values.Get(CM.Schema.PayerStatus, "PYR-STAT");
                },
                set: function (value) {
                    this.Values.Set$1(CM.Schema.PayerStatus, "PYR-STAT", value);
                }
            },
            /**
             * Signature of the payer. Confirms that 'yes, I'm authorising this payment'.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Transaction
             * @function PayerSignature
             * @type Array.<number>
             */
            PayerSignature: {
                get: function () {
                    return this.Values.Get(System.Array.type(System.Byte), "PYR-SIG");
                },
                set: function (value) {
                    this.Values.Set$1(System.Array.type(System.Byte), "PYR-SIG", value);
                }
            },
            /**
             * gets the MAX of PAYEE-UTC and PAYER-UTC
             *
             * @instance
             * @public
             * @readonly
             * @memberof CM.Schema.Transaction
             * @function UpdatedUtc
             * @type System.DateTime
             */
            UpdatedUtc: {
                get: function () {
                    return (System.DateTime.gt(this.PayeeUpdatedUtc, this.PayerUpdatedUtc) ? this.PayeeUpdatedUtc : this.PayerUpdatedUtc);
                }
            }
        },
        alias: [
            "ConsensusCount", "CM$IStorable$ConsensusCount",
            "ConsensusOK", "CM$IStorable$ConsensusOK",
            "Path", "CM$IStorable$Path",
            "UpdatedUtc", "CM$IStorable$UpdatedUtc"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                CM.Message.ctor.call(this);
            },
            $ctor1: function (payload) {
                this.$initialize();
                CM.Message.$ctor1.call(this, payload);
            }
        },
        methods: {
            /**
             * Transaction signing data for the PAYER/SENDER consists of:
             - CreatedUtc      25 UTF-8 bytes
             - Amount          N UTF-8 bytes, value formatted with 6 decimal places, so 0 = '0.000000'. Decimal symbol must be a period.
             - Payee ID        N UTF-8 bytes
             - Payer ID        N UTF-8 bytes
             - Memo            N UTF-8 bytes
             - Payer Updated   8 bytes uimsbf
             - Payer Tag       N bytes
             - Payer Response  1 byte
             - Payer Region    N UTF-8 bytes
             *
             * @instance
             * @public
             * @this CM.Schema.Transaction
             * @memberof CM.Schema.Transaction
             * @return  {Array.<number>}
             */
            GetPayerSigningData: function () {
                var ar = new (System.Collections.Generic.List$1(System.Byte))();
                // Common fields
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(CM.Helpers.DateToISO8601(this.CreatedUtc)));
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(Bridge.Int.format(this.Amount, "0.000000")));
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.PayeeID));
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.PayerID));
                if (this.Memo != null) {
                    ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.Memo));
                }
                // Payer-specific fields to sign
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(CM.Helpers.DateToISO8601(this.PayerUpdatedUtc)));
                if (this.PayerTag != null) {
                    ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.PayerTag));
                }
                ar.add(this.PayerStatus);
                if (this.PayerRegion != null) {
                    ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.PayerRegion));
                }
                return ar.toArray();
            },
            /**
             * Transaction signing data for the PAYEE/RECEIVER consists of:
             - CreatedUtc      25 UTF-8 bytes
             - Amount          N UTF-8 bytes, value formatted with 6 decimal places, so 0 = '0.000000'. Decimal symbol must be a period.
             - Payee ID        N UTF-8 bytes
             - Payer ID        N UTF-8 bytes
             - Memo            N UTF-8 bytes
             - Payee Updated   8 bytes uimsbf
             - Payee Tag       N bytes
             - Payee Response  1 byte
             - Payee Region    N UTF-8 bytes
             *
             * @instance
             * @public
             * @this CM.Schema.Transaction
             * @memberof CM.Schema.Transaction
             * @return  {Array.<number>}
             */
            GetPayeeSigningData: function () {
                var ar = new (System.Collections.Generic.List$1(System.Byte))();
                // Common fields
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(CM.Helpers.DateToISO8601(this.CreatedUtc)));
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(Bridge.Int.format(this.Amount, "0.000000")));
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.PayeeID));
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.PayerID));
                if (this.Memo != null) {
                    ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.Memo));
                }
                // Payee-specific fields to sign
                ar.addRange(System.Text.Encoding.UTF8.GetBytes(CM.Helpers.DateToISO8601(this.PayeeUpdatedUtc)));
                if (this.PayeeTag != null) {
                    ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.PayeeTag));
                }
                ar.add(this.PayeeStatus);
                if (this.PayeeRegion != null) {
                    ar.addRange(System.Text.Encoding.UTF8.GetBytes(this.PayeeRegion));
                }
                return ar.toArray();
            }
        }
    });

    /**
     * Describes a user vote for a proposal by the CM steering group.
     *
     * @public
     * @class CM.Schema.Vote
     * @augments CM.Message
     * @implements  CM.IStorable
     */
    Bridge.define("CM.Schema.Vote", {
        inherits: [CM.Message,CM.IStorable],
        props: {
            ConsensusCount: 0,
            ConsensusOK: {
                get: function () {
                    return this.ConsensusCount >= CM.Constants.MinimumNumberOfCopies;
                }
            },
            /**
             * Votes are stored in path /VOTES/{Proposition ID}/{Account ID}
             *
             * @instance
             * @public
             * @readonly
             * @memberof CM.Schema.Vote
             * @function Path
             * @type string
             */
            Path: {
                get: function () {
                    return System.String.concat("VOTES/" + this.PropositionID + "/", this.VoterID);
                }
            },
            /**
             * Votes are indexed in accounts under ACCNT/{VoterID}/VOTES/{PropositionID}
             *
             * @instance
             * @public
             * @readonly
             * @memberof CM.Schema.Vote
             * @function AccountPath
             * @type string
             */
            AccountPath: {
                get: function () {
                    return System.String.concat("ACCNT/", this.VoterID, "/VOTES/", this.PropositionID);
                }
            },
            /**
             * Currently always 1
             *
             * @instance
             * @public
             * @memberof CM.Schema.Vote
             * @function APIVersion
             * @type number
             */
            APIVersion: {
                get: function () {
                    return this.Values.Get(System.UInt32, "VER");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "VER", value);
                }
            },
            /**
             * Creation time (ISO-8601 UTC date string)
             *
             * @instance
             * @public
             * @memberof CM.Schema.Vote
             * @function CreatedUtc
             * @type System.DateTime
             */
            CreatedUtc: {
                get: function () {
                    return this.Values.Get(System.DateTime, "UTC");
                },
                set: function (value) {
                    this.Values.Set$1(System.DateTime, "UTC", value);
                }
            },
            /**
             * Modification time (ISO-8601 UTC date string)
             *
             * @instance
             * @public
             * @memberof CM.Schema.Vote
             * @function UpdatedUtc
             * @type System.DateTime
             */
            UpdatedUtc: {
                get: function () {
                    return this.Values.Get(System.DateTime, "UPD-UTC");
                },
                set: function (value) {
                    this.Values.Set$1(System.DateTime, "UPD-UTC", value);
                }
            },
            /**
             * The user placing the vote.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Vote
             * @function VoterID
             * @type string
             */
            VoterID: {
                get: function () {
                    return this.getItem("VTR-ID");
                },
                set: function (value) {
                    this.setItem("VTR-ID", value);
                }
            },
            /**
             * The ID of the proposition being voted on.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Vote
             * @function PropositionID
             * @type number
             */
            PropositionID: {
                get: function () {
                    return this.Values.Get(System.UInt32, "PROP");
                },
                set: function (value) {
                    this.Values.Set$1(System.UInt32, "PROP", value);
                }
            },
            /**
             * The user's selected vote on the proposal. By design propositions must be binary (for or against.)
             This is to take potentially unfair "ranked order" voting procedures off the table.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Vote
             * @function Value
             * @type boolean
             */
            Value: {
                get: function () {
                    return this.Values.Get(System.Boolean, "VOTE");
                },
                set: function (value) {
                    this.Values.Set$1(System.Boolean, "VOTE", value);
                }
            },
            /**
             * The user's RSA signature.
             *
             * @instance
             * @public
             * @memberof CM.Schema.Vote
             * @function Signature
             * @type Array.<number>
             */
            Signature: {
                get: function () {
                    return this.Values.Get(System.Array.type(System.Byte), "SIG");
                },
                set: function (value) {
                    this.Values.Set$1(System.Array.type(System.Byte), "SIG", value);
                }
            }
        },
        alias: [
            "ConsensusCount", "CM$IStorable$ConsensusCount",
            "ConsensusOK", "CM$IStorable$ConsensusOK",
            "Path", "CM$IStorable$Path",
            "UpdatedUtc", "CM$IStorable$UpdatedUtc"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                CM.Message.ctor.call(this);
            },
            $ctor1: function (payload) {
                this.$initialize();
                CM.Message.$ctor1.call(this, payload);
            }
        },
        methods: {
            /**
             * Vote signing data consists of all attribute values (with the exception of SIG itself.)
             *
             * @instance
             * @public
             * @this CM.Schema.Vote
             * @memberof CM.Schema.Vote
             * @return  {Array.<number>}
             */
            GetSigningData: function () {
                var data = new (System.Collections.Generic.List$1(System.Byte))();
                for (var i = 0; i < this.Values.Count; i = (i + 1) | 0) {
                    var v = this.Values.getItem(i);
                    if (System.String.compare(v.Name, "SIG", 5) === 0) {
                        continue;
                    }
                    data.addRange(System.Text.Encoding.UTF8.GetBytes(this.Values.getItem(i).Value));
                }
                return data.toArray();
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,
